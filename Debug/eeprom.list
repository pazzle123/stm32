
eeprom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a2c  08000258  08000258  00001258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08005c84  08005c84  00006c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d0c  08005d0c  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005d0c  08005d0c  00006d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d14  08005d14  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d14  08005d14  00006d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005d18  08005d18  00006d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005d1c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  08005d28  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08005d28  00007114  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010558  00000000  00000000  00007042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d6c  00000000  00000000  0001759a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c00  00000000  00000000  00019308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000095f  00000000  00000000  00019f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f4eb  00000000  00000000  0001a867  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000108ff  00000000  00000000  00039d52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3c8a  00000000  00000000  0004a651  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010e2db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000327c  00000000  00000000  0010e320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  0011159c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	2000000c 	.word	0x2000000c
 8000274:	00000000 	.word	0x00000000
 8000278:	08005c6c 	.word	0x08005c6c

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	20000010 	.word	0x20000010
 8000294:	08005c6c 	.word	0x08005c6c

08000298 <__aeabi_uldivmod>:
 8000298:	b953      	cbnz	r3, 80002b0 <__aeabi_uldivmod+0x18>
 800029a:	b94a      	cbnz	r2, 80002b0 <__aeabi_uldivmod+0x18>
 800029c:	2900      	cmp	r1, #0
 800029e:	bf08      	it	eq
 80002a0:	2800      	cmpeq	r0, #0
 80002a2:	bf1c      	itt	ne
 80002a4:	f04f 31ff 	movne.w	r1, #4294967295
 80002a8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ac:	f000 b9b0 	b.w	8000610 <__aeabi_idiv0>
 80002b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b8:	f000 f806 	bl	80002c8 <__udivmoddi4>
 80002bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c4:	b004      	add	sp, #16
 80002c6:	4770      	bx	lr

080002c8 <__udivmoddi4>:
 80002c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002cc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ce:	4688      	mov	r8, r1
 80002d0:	4604      	mov	r4, r0
 80002d2:	468e      	mov	lr, r1
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d14a      	bne.n	800036e <__udivmoddi4+0xa6>
 80002d8:	428a      	cmp	r2, r1
 80002da:	4617      	mov	r7, r2
 80002dc:	d95f      	bls.n	800039e <__udivmoddi4+0xd6>
 80002de:	fab2 f682 	clz	r6, r2
 80002e2:	b14e      	cbz	r6, 80002f8 <__udivmoddi4+0x30>
 80002e4:	f1c6 0320 	rsb	r3, r6, #32
 80002e8:	fa01 fe06 	lsl.w	lr, r1, r6
 80002ec:	40b7      	lsls	r7, r6
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	ea43 0e0e 	orr.w	lr, r3, lr
 80002f8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002fc:	fa1f fc87 	uxth.w	ip, r7
 8000300:	0c23      	lsrs	r3, r4, #16
 8000302:	fbbe f1f8 	udiv	r1, lr, r8
 8000306:	fb08 ee11 	mls	lr, r8, r1, lr
 800030a:	fb01 f20c 	mul.w	r2, r1, ip
 800030e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x5e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f101 30ff 	add.w	r0, r1, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x5c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 8154 	bhi.w	80005cc <__udivmoddi4+0x304>
 8000324:	4601      	mov	r1, r0
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	b2a2      	uxth	r2, r4
 800032a:	fbb3 f0f8 	udiv	r0, r3, r8
 800032e:	fb08 3310 	mls	r3, r8, r0, r3
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800033a:	4594      	cmp	ip, r2
 800033c:	d90b      	bls.n	8000356 <__udivmoddi4+0x8e>
 800033e:	18ba      	adds	r2, r7, r2
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	bf2c      	ite	cs
 8000346:	2401      	movcs	r4, #1
 8000348:	2400      	movcc	r4, #0
 800034a:	4594      	cmp	ip, r2
 800034c:	d902      	bls.n	8000354 <__udivmoddi4+0x8c>
 800034e:	2c00      	cmp	r4, #0
 8000350:	f000 813f 	beq.w	80005d2 <__udivmoddi4+0x30a>
 8000354:	4618      	mov	r0, r3
 8000356:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800035a:	eba2 020c 	sub.w	r2, r2, ip
 800035e:	2100      	movs	r1, #0
 8000360:	b11d      	cbz	r5, 800036a <__udivmoddi4+0xa2>
 8000362:	40f2      	lsrs	r2, r6
 8000364:	2300      	movs	r3, #0
 8000366:	e9c5 2300 	strd	r2, r3, [r5]
 800036a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800036e:	428b      	cmp	r3, r1
 8000370:	d905      	bls.n	800037e <__udivmoddi4+0xb6>
 8000372:	b10d      	cbz	r5, 8000378 <__udivmoddi4+0xb0>
 8000374:	e9c5 0100 	strd	r0, r1, [r5]
 8000378:	2100      	movs	r1, #0
 800037a:	4608      	mov	r0, r1
 800037c:	e7f5      	b.n	800036a <__udivmoddi4+0xa2>
 800037e:	fab3 f183 	clz	r1, r3
 8000382:	2900      	cmp	r1, #0
 8000384:	d14e      	bne.n	8000424 <__udivmoddi4+0x15c>
 8000386:	4543      	cmp	r3, r8
 8000388:	f0c0 8112 	bcc.w	80005b0 <__udivmoddi4+0x2e8>
 800038c:	4282      	cmp	r2, r0
 800038e:	f240 810f 	bls.w	80005b0 <__udivmoddi4+0x2e8>
 8000392:	4608      	mov	r0, r1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e8      	beq.n	800036a <__udivmoddi4+0xa2>
 8000398:	e9c5 4e00 	strd	r4, lr, [r5]
 800039c:	e7e5      	b.n	800036a <__udivmoddi4+0xa2>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f000 80ac 	beq.w	80004fc <__udivmoddi4+0x234>
 80003a4:	fab2 f682 	clz	r6, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	f040 80bb 	bne.w	8000524 <__udivmoddi4+0x25c>
 80003ae:	1a8b      	subs	r3, r1, r2
 80003b0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80003b4:	b2bc      	uxth	r4, r7
 80003b6:	2101      	movs	r1, #1
 80003b8:	0c02      	lsrs	r2, r0, #16
 80003ba:	b280      	uxth	r0, r0
 80003bc:	fbb3 fcfe 	udiv	ip, r3, lr
 80003c0:	fb0e 331c 	mls	r3, lr, ip, r3
 80003c4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80003c8:	fb04 f20c 	mul.w	r2, r4, ip
 80003cc:	429a      	cmp	r2, r3
 80003ce:	d90e      	bls.n	80003ee <__udivmoddi4+0x126>
 80003d0:	18fb      	adds	r3, r7, r3
 80003d2:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d6:	bf2c      	ite	cs
 80003d8:	f04f 0901 	movcs.w	r9, #1
 80003dc:	f04f 0900 	movcc.w	r9, #0
 80003e0:	429a      	cmp	r2, r3
 80003e2:	d903      	bls.n	80003ec <__udivmoddi4+0x124>
 80003e4:	f1b9 0f00 	cmp.w	r9, #0
 80003e8:	f000 80ec 	beq.w	80005c4 <__udivmoddi4+0x2fc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f8fe 	udiv	r8, r3, lr
 80003f4:	fb0e 3318 	mls	r3, lr, r8, r3
 80003f8:	fb04 f408 	mul.w	r4, r4, r8
 80003fc:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000400:	4294      	cmp	r4, r2
 8000402:	d90b      	bls.n	800041c <__udivmoddi4+0x154>
 8000404:	18ba      	adds	r2, r7, r2
 8000406:	f108 33ff 	add.w	r3, r8, #4294967295
 800040a:	bf2c      	ite	cs
 800040c:	2001      	movcs	r0, #1
 800040e:	2000      	movcc	r0, #0
 8000410:	4294      	cmp	r4, r2
 8000412:	d902      	bls.n	800041a <__udivmoddi4+0x152>
 8000414:	2800      	cmp	r0, #0
 8000416:	f000 80d1 	beq.w	80005bc <__udivmoddi4+0x2f4>
 800041a:	4698      	mov	r8, r3
 800041c:	1b12      	subs	r2, r2, r4
 800041e:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000422:	e79d      	b.n	8000360 <__udivmoddi4+0x98>
 8000424:	f1c1 0620 	rsb	r6, r1, #32
 8000428:	408b      	lsls	r3, r1
 800042a:	fa08 f401 	lsl.w	r4, r8, r1
 800042e:	fa00 f901 	lsl.w	r9, r0, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	fa28 f806 	lsr.w	r8, r8, r6
 800043a:	408a      	lsls	r2, r1
 800043c:	431f      	orrs	r7, r3
 800043e:	fa20 f306 	lsr.w	r3, r0, r6
 8000442:	0c38      	lsrs	r0, r7, #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fa1f fc87 	uxth.w	ip, r7
 800044a:	0c1c      	lsrs	r4, r3, #16
 800044c:	fbb8 fef0 	udiv	lr, r8, r0
 8000450:	fb00 881e 	mls	r8, r0, lr, r8
 8000454:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000458:	fb0e f80c 	mul.w	r8, lr, ip
 800045c:	45a0      	cmp	r8, r4
 800045e:	d90e      	bls.n	800047e <__udivmoddi4+0x1b6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	bf2c      	ite	cs
 8000468:	f04f 0b01 	movcs.w	fp, #1
 800046c:	f04f 0b00 	movcc.w	fp, #0
 8000470:	45a0      	cmp	r8, r4
 8000472:	d903      	bls.n	800047c <__udivmoddi4+0x1b4>
 8000474:	f1bb 0f00 	cmp.w	fp, #0
 8000478:	f000 80b8 	beq.w	80005ec <__udivmoddi4+0x324>
 800047c:	46d6      	mov	lr, sl
 800047e:	eba4 0408 	sub.w	r4, r4, r8
 8000482:	fa1f f883 	uxth.w	r8, r3
 8000486:	fbb4 f3f0 	udiv	r3, r4, r0
 800048a:	fb00 4413 	mls	r4, r0, r3, r4
 800048e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000492:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000496:	45a4      	cmp	ip, r4
 8000498:	d90e      	bls.n	80004b8 <__udivmoddi4+0x1f0>
 800049a:	193c      	adds	r4, r7, r4
 800049c:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a0:	bf2c      	ite	cs
 80004a2:	f04f 0801 	movcs.w	r8, #1
 80004a6:	f04f 0800 	movcc.w	r8, #0
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d903      	bls.n	80004b6 <__udivmoddi4+0x1ee>
 80004ae:	f1b8 0f00 	cmp.w	r8, #0
 80004b2:	f000 809f 	beq.w	80005f4 <__udivmoddi4+0x32c>
 80004b6:	4603      	mov	r3, r0
 80004b8:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004bc:	eba4 040c 	sub.w	r4, r4, ip
 80004c0:	fba0 ec02 	umull	lr, ip, r0, r2
 80004c4:	4564      	cmp	r4, ip
 80004c6:	4673      	mov	r3, lr
 80004c8:	46e0      	mov	r8, ip
 80004ca:	d302      	bcc.n	80004d2 <__udivmoddi4+0x20a>
 80004cc:	d107      	bne.n	80004de <__udivmoddi4+0x216>
 80004ce:	45f1      	cmp	r9, lr
 80004d0:	d205      	bcs.n	80004de <__udivmoddi4+0x216>
 80004d2:	ebbe 0302 	subs.w	r3, lr, r2
 80004d6:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	46e0      	mov	r8, ip
 80004de:	b15d      	cbz	r5, 80004f8 <__udivmoddi4+0x230>
 80004e0:	ebb9 0203 	subs.w	r2, r9, r3
 80004e4:	eb64 0408 	sbc.w	r4, r4, r8
 80004e8:	fa04 f606 	lsl.w	r6, r4, r6
 80004ec:	fa22 f301 	lsr.w	r3, r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	431e      	orrs	r6, r3
 80004f4:	e9c5 6400 	strd	r6, r4, [r5]
 80004f8:	2100      	movs	r1, #0
 80004fa:	e736      	b.n	800036a <__udivmoddi4+0xa2>
 80004fc:	fbb1 fcf2 	udiv	ip, r1, r2
 8000500:	0c01      	lsrs	r1, r0, #16
 8000502:	4614      	mov	r4, r2
 8000504:	b280      	uxth	r0, r0
 8000506:	4696      	mov	lr, r2
 8000508:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800050c:	2620      	movs	r6, #32
 800050e:	4690      	mov	r8, r2
 8000510:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000514:	4610      	mov	r0, r2
 8000516:	fbb1 f1f2 	udiv	r1, r1, r2
 800051a:	eba3 0308 	sub.w	r3, r3, r8
 800051e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000522:	e74b      	b.n	80003bc <__udivmoddi4+0xf4>
 8000524:	40b7      	lsls	r7, r6
 8000526:	f1c6 0320 	rsb	r3, r6, #32
 800052a:	fa01 f206 	lsl.w	r2, r1, r6
 800052e:	fa21 f803 	lsr.w	r8, r1, r3
 8000532:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000536:	fa20 f303 	lsr.w	r3, r0, r3
 800053a:	b2bc      	uxth	r4, r7
 800053c:	40b0      	lsls	r0, r6
 800053e:	4313      	orrs	r3, r2
 8000540:	0c02      	lsrs	r2, r0, #16
 8000542:	0c19      	lsrs	r1, r3, #16
 8000544:	b280      	uxth	r0, r0
 8000546:	fbb8 f9fe 	udiv	r9, r8, lr
 800054a:	fb0e 8819 	mls	r8, lr, r9, r8
 800054e:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000552:	fb09 f804 	mul.w	r8, r9, r4
 8000556:	4588      	cmp	r8, r1
 8000558:	d951      	bls.n	80005fe <__udivmoddi4+0x336>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f109 3cff 	add.w	ip, r9, #4294967295
 8000560:	bf2c      	ite	cs
 8000562:	f04f 0a01 	movcs.w	sl, #1
 8000566:	f04f 0a00 	movcc.w	sl, #0
 800056a:	4588      	cmp	r8, r1
 800056c:	d902      	bls.n	8000574 <__udivmoddi4+0x2ac>
 800056e:	f1ba 0f00 	cmp.w	sl, #0
 8000572:	d031      	beq.n	80005d8 <__udivmoddi4+0x310>
 8000574:	eba1 0108 	sub.w	r1, r1, r8
 8000578:	fbb1 f9fe 	udiv	r9, r1, lr
 800057c:	fb09 f804 	mul.w	r8, r9, r4
 8000580:	fb0e 1119 	mls	r1, lr, r9, r1
 8000584:	b29b      	uxth	r3, r3
 8000586:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800058a:	4543      	cmp	r3, r8
 800058c:	d235      	bcs.n	80005fa <__udivmoddi4+0x332>
 800058e:	18fb      	adds	r3, r7, r3
 8000590:	f109 31ff 	add.w	r1, r9, #4294967295
 8000594:	bf2c      	ite	cs
 8000596:	f04f 0a01 	movcs.w	sl, #1
 800059a:	f04f 0a00 	movcc.w	sl, #0
 800059e:	4543      	cmp	r3, r8
 80005a0:	d2bb      	bcs.n	800051a <__udivmoddi4+0x252>
 80005a2:	f1ba 0f00 	cmp.w	sl, #0
 80005a6:	d1b8      	bne.n	800051a <__udivmoddi4+0x252>
 80005a8:	f1a9 0102 	sub.w	r1, r9, #2
 80005ac:	443b      	add	r3, r7
 80005ae:	e7b4      	b.n	800051a <__udivmoddi4+0x252>
 80005b0:	1a84      	subs	r4, r0, r2
 80005b2:	eb68 0203 	sbc.w	r2, r8, r3
 80005b6:	2001      	movs	r0, #1
 80005b8:	4696      	mov	lr, r2
 80005ba:	e6eb      	b.n	8000394 <__udivmoddi4+0xcc>
 80005bc:	443a      	add	r2, r7
 80005be:	f1a8 0802 	sub.w	r8, r8, #2
 80005c2:	e72b      	b.n	800041c <__udivmoddi4+0x154>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	443b      	add	r3, r7
 80005ca:	e710      	b.n	80003ee <__udivmoddi4+0x126>
 80005cc:	3902      	subs	r1, #2
 80005ce:	443b      	add	r3, r7
 80005d0:	e6a9      	b.n	8000326 <__udivmoddi4+0x5e>
 80005d2:	443a      	add	r2, r7
 80005d4:	3802      	subs	r0, #2
 80005d6:	e6be      	b.n	8000356 <__udivmoddi4+0x8e>
 80005d8:	eba7 0808 	sub.w	r8, r7, r8
 80005dc:	f1a9 0c02 	sub.w	ip, r9, #2
 80005e0:	4441      	add	r1, r8
 80005e2:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e6:	fb09 f804 	mul.w	r8, r9, r4
 80005ea:	e7c9      	b.n	8000580 <__udivmoddi4+0x2b8>
 80005ec:	f1ae 0e02 	sub.w	lr, lr, #2
 80005f0:	443c      	add	r4, r7
 80005f2:	e744      	b.n	800047e <__udivmoddi4+0x1b6>
 80005f4:	3b02      	subs	r3, #2
 80005f6:	443c      	add	r4, r7
 80005f8:	e75e      	b.n	80004b8 <__udivmoddi4+0x1f0>
 80005fa:	4649      	mov	r1, r9
 80005fc:	e78d      	b.n	800051a <__udivmoddi4+0x252>
 80005fe:	eba1 0108 	sub.w	r1, r1, r8
 8000602:	46cc      	mov	ip, r9
 8000604:	fbb1 f9fe 	udiv	r9, r1, lr
 8000608:	fb09 f804 	mul.w	r8, r9, r4
 800060c:	e7b8      	b.n	8000580 <__udivmoddi4+0x2b8>
 800060e:	bf00      	nop

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <Mem_Add>:
            HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 100);
        }

    }
}
void Mem_Add(uint16_t memadd,uint8_t *data, uint8_t size){
 8000614:	b580      	push	{r7, lr}
 8000616:	b086      	sub	sp, #24
 8000618:	af02      	add	r7, sp, #8
 800061a:	4603      	mov	r3, r0
 800061c:	6039      	str	r1, [r7, #0]
 800061e:	80fb      	strh	r3, [r7, #6]
 8000620:	4613      	mov	r3, r2
 8000622:	717b      	strb	r3, [r7, #5]
	uint8_t ad[2];
	ad[0] = memadd>>8 & 0xFF;
 8000624:	88fb      	ldrh	r3, [r7, #6]
 8000626:	0a1b      	lsrs	r3, r3, #8
 8000628:	b29b      	uxth	r3, r3
 800062a:	b2db      	uxtb	r3, r3
 800062c:	733b      	strb	r3, [r7, #12]
	ad[1] = memadd& 0xFF;
 800062e:	88fb      	ldrh	r3, [r7, #6]
 8000630:	b2db      	uxtb	r3, r3
 8000632:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, addrEPP, ad, 2, 100);
 8000634:	f107 020c 	add.w	r2, r7, #12
 8000638:	2364      	movs	r3, #100	@ 0x64
 800063a:	9300      	str	r3, [sp, #0]
 800063c:	2302      	movs	r3, #2
 800063e:	21a0      	movs	r1, #160	@ 0xa0
 8000640:	4809      	ldr	r0, [pc, #36]	@ (8000668 <Mem_Add+0x54>)
 8000642:	f000 ffe5 	bl	8001610 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, addrEPP, data, size, 100);
 8000646:	797b      	ldrb	r3, [r7, #5]
 8000648:	b29b      	uxth	r3, r3
 800064a:	2264      	movs	r2, #100	@ 0x64
 800064c:	9200      	str	r2, [sp, #0]
 800064e:	683a      	ldr	r2, [r7, #0]
 8000650:	21a0      	movs	r1, #160	@ 0xa0
 8000652:	4805      	ldr	r0, [pc, #20]	@ (8000668 <Mem_Add+0x54>)
 8000654:	f000 ffdc 	bl	8001610 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8000658:	200a      	movs	r0, #10
 800065a:	f000 fc57 	bl	8000f0c <HAL_Delay>
}
 800065e:	bf00      	nop
 8000660:	3710      	adds	r7, #16
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000028 	.word	0x20000028

0800066c <Mem_read>:
void Mem_read(uint16_t memadd,uint8_t *data, uint8_t size){
 800066c:	b5b0      	push	{r4, r5, r7, lr}
 800066e:	b08e      	sub	sp, #56	@ 0x38
 8000670:	af02      	add	r7, sp, #8
 8000672:	4603      	mov	r3, r0
 8000674:	6039      	str	r1, [r7, #0]
 8000676:	80fb      	strh	r3, [r7, #6]
 8000678:	4613      	mov	r3, r2
 800067a:	717b      	strb	r3, [r7, #5]
	uint8_t mess_ok[]="Date done \r\n";
 800067c:	4b21      	ldr	r3, [pc, #132]	@ (8000704 <Mem_read+0x98>)
 800067e:	f107 0420 	add.w	r4, r7, #32
 8000682:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000684:	c407      	stmia	r4!, {r0, r1, r2}
 8000686:	7023      	strb	r3, [r4, #0]
	uint8_t trans_ok[]="Transmit done \r\n";
 8000688:	4b1f      	ldr	r3, [pc, #124]	@ (8000708 <Mem_read+0x9c>)
 800068a:	f107 040c 	add.w	r4, r7, #12
 800068e:	461d      	mov	r5, r3
 8000690:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000692:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000694:	682b      	ldr	r3, [r5, #0]
 8000696:	7023      	strb	r3, [r4, #0]
	uint8_t ad[2];
	ad[0] = memadd>>8 & 0xFF ;
 8000698:	88fb      	ldrh	r3, [r7, #6]
 800069a:	0a1b      	lsrs	r3, r3, #8
 800069c:	b29b      	uxth	r3, r3
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	723b      	strb	r3, [r7, #8]
	ad[1] = memadd& 0xFF;
 80006a2:	88fb      	ldrh	r3, [r7, #6]
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	727b      	strb	r3, [r7, #9]
	if(HAL_I2C_Master_Transmit(&hi2c1, addrEPP, ad, 2, 100)==HAL_OK){
 80006a8:	f107 0208 	add.w	r2, r7, #8
 80006ac:	2364      	movs	r3, #100	@ 0x64
 80006ae:	9300      	str	r3, [sp, #0]
 80006b0:	2302      	movs	r3, #2
 80006b2:	21a0      	movs	r1, #160	@ 0xa0
 80006b4:	4815      	ldr	r0, [pc, #84]	@ (800070c <Mem_read+0xa0>)
 80006b6:	f000 ffab 	bl	8001610 <HAL_I2C_Master_Transmit>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d106      	bne.n	80006ce <Mem_read+0x62>
		HAL_UART_Transmit(&huart1, trans_ok, sizeof(trans_ok)-1, 100);
 80006c0:	f107 010c 	add.w	r1, r7, #12
 80006c4:	2364      	movs	r3, #100	@ 0x64
 80006c6:	2210      	movs	r2, #16
 80006c8:	4811      	ldr	r0, [pc, #68]	@ (8000710 <Mem_read+0xa4>)
 80006ca:	f004 fd65 	bl	8005198 <HAL_UART_Transmit>
	}
	HAL_Delay(20);
 80006ce:	2014      	movs	r0, #20
 80006d0:	f000 fc1c 	bl	8000f0c <HAL_Delay>


	    // Чтение данных
	if(HAL_I2C_Master_Receive(&hi2c1, addrEPP | 0x01, data, size, 100)==HAL_OK){
 80006d4:	797b      	ldrb	r3, [r7, #5]
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	2264      	movs	r2, #100	@ 0x64
 80006da:	9200      	str	r2, [sp, #0]
 80006dc:	683a      	ldr	r2, [r7, #0]
 80006de:	21a1      	movs	r1, #161	@ 0xa1
 80006e0:	480a      	ldr	r0, [pc, #40]	@ (800070c <Mem_read+0xa0>)
 80006e2:	f001 f889 	bl	80017f8 <HAL_I2C_Master_Receive>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d106      	bne.n	80006fa <Mem_read+0x8e>
		HAL_UART_Transmit(&huart1, mess_ok, sizeof(mess_ok)-1, 100);
 80006ec:	f107 0120 	add.w	r1, r7, #32
 80006f0:	2364      	movs	r3, #100	@ 0x64
 80006f2:	220c      	movs	r2, #12
 80006f4:	4806      	ldr	r0, [pc, #24]	@ (8000710 <Mem_read+0xa4>)
 80006f6:	f004 fd4f 	bl	8005198 <HAL_UART_Transmit>
	}



}
 80006fa:	bf00      	nop
 80006fc:	3730      	adds	r7, #48	@ 0x30
 80006fe:	46bd      	mov	sp, r7
 8000700:	bdb0      	pop	{r4, r5, r7, pc}
 8000702:	bf00      	nop
 8000704:	08005ca8 	.word	0x08005ca8
 8000708:	08005cb8 	.word	0x08005cb8
 800070c:	20000028 	.word	0x20000028
 8000710:	2000007c 	.word	0x2000007c

08000714 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800071a:	f000 fb39 	bl	8000d90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800071e:	f000 f81f 	bl	8000760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000722:	f000 f93d 	bl	80009a0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000726:	f000 f87b 	bl	8000820 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800072a:	f000 f8ed 	bl	8000908 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  uint8_t txt[] = "Aloe";
 800072e:	4b0b      	ldr	r3, [pc, #44]	@ (800075c <main+0x48>)
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	2300      	movs	r3, #0
 8000734:	733b      	strb	r3, [r7, #12]
  Mem_Add(0x1000, txt, sizeof(txt)-1);
 8000736:	f107 0308 	add.w	r3, r7, #8
 800073a:	2204      	movs	r2, #4
 800073c:	4619      	mov	r1, r3
 800073e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000742:	f7ff ff67 	bl	8000614 <Mem_Add>
  uint8_t Read_data[sizeof(txt)-1] = {0};
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]

  while (1)
  {
    /* USER CODE END WHILE */

	 Mem_read(0x1000, Read_data, sizeof(Read_data)-1);
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	2203      	movs	r2, #3
 800074e:	4619      	mov	r1, r3
 8000750:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000754:	f7ff ff8a 	bl	800066c <Mem_read>
 8000758:	e7f7      	b.n	800074a <main+0x36>
 800075a:	bf00      	nop
 800075c:	656f6c41 	.word	0x656f6c41

08000760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b09c      	sub	sp, #112	@ 0x70
 8000764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000766:	f107 0320 	add.w	r3, r7, #32
 800076a:	2250      	movs	r2, #80	@ 0x50
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f005 fa50 	bl	8005c14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000774:	f107 0308 	add.w	r3, r7, #8
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]
 8000784:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000786:	4b24      	ldr	r3, [pc, #144]	@ (8000818 <SystemClock_Config+0xb8>)
 8000788:	691b      	ldr	r3, [r3, #16]
 800078a:	4a23      	ldr	r2, [pc, #140]	@ (8000818 <SystemClock_Config+0xb8>)
 800078c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000790:	6113      	str	r3, [r2, #16]
 8000792:	4b21      	ldr	r3, [pc, #132]	@ (8000818 <SystemClock_Config+0xb8>)
 8000794:	691b      	ldr	r3, [r3, #16]
 8000796:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800079e:	bf00      	nop
 80007a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000818 <SystemClock_Config+0xb8>)
 80007a2:	695b      	ldr	r3, [r3, #20]
 80007a4:	f003 0308 	and.w	r3, r3, #8
 80007a8:	2b08      	cmp	r3, #8
 80007aa:	d1f9      	bne.n	80007a0 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007ac:	2302      	movs	r3, #2
 80007ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007b0:	2301      	movs	r3, #1
 80007b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 80007b4:	2308      	movs	r3, #8
 80007b6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b8:	2340      	movs	r3, #64	@ 0x40
 80007ba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007bc:	2300      	movs	r3, #0
 80007be:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c0:	f107 0320 	add.w	r3, r7, #32
 80007c4:	4618      	mov	r0, r3
 80007c6:	f001 fc4b 	bl	8002060 <HAL_RCC_OscConfig>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80007d0:	f000 f91e 	bl	8000a10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d4:	231f      	movs	r3, #31
 80007d6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007d8:	2300      	movs	r3, #0
 80007da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007dc:	2300      	movs	r3, #0
 80007de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007ec:	f107 0308 	add.w	r3, r7, #8
 80007f0:	2101      	movs	r1, #1
 80007f2:	4618      	mov	r0, r3
 80007f4:	f002 f86c 	bl	80028d0 <HAL_RCC_ClockConfig>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80007fe:	f000 f907 	bl	8000a10 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_0);
 8000802:	4b06      	ldr	r3, [pc, #24]	@ (800081c <SystemClock_Config+0xbc>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a05      	ldr	r2, [pc, #20]	@ (800081c <SystemClock_Config+0xbc>)
 8000808:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800080c:	6013      	str	r3, [r2, #0]
}
 800080e:	bf00      	nop
 8000810:	3770      	adds	r7, #112	@ 0x70
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	44020800 	.word	0x44020800
 800081c:	40022000 	.word	0x40022000

08000820 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  // Включение тактирования GPIOB
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000834:	4b2f      	ldr	r3, [pc, #188]	@ (80008f4 <MX_I2C1_Init+0xd4>)
 8000836:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800083a:	4a2e      	ldr	r2, [pc, #184]	@ (80008f4 <MX_I2C1_Init+0xd4>)
 800083c:	f043 0302 	orr.w	r3, r3, #2
 8000840:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000844:	4b2b      	ldr	r3, [pc, #172]	@ (80008f4 <MX_I2C1_Init+0xd4>)
 8000846:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800084a:	f003 0302 	and.w	r3, r3, #2
 800084e:	603b      	str	r3, [r7, #0]
 8000850:	683b      	ldr	r3, [r7, #0]

  // Настройка PB6 (SCL)
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000852:	2340      	movs	r3, #64	@ 0x40
 8000854:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000856:	2312      	movs	r3, #18
 8000858:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800085a:	2301      	movs	r3, #1
 800085c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800085e:	2302      	movs	r3, #2
 8000860:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000862:	2304      	movs	r3, #4
 8000864:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	4619      	mov	r1, r3
 800086a:	4823      	ldr	r0, [pc, #140]	@ (80008f8 <MX_I2C1_Init+0xd8>)
 800086c:	f000 fcd6 	bl	800121c <HAL_GPIO_Init>

  // Настройка PB10 (SDA)
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000870:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000874:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	4619      	mov	r1, r3
 800087a:	481f      	ldr	r0, [pc, #124]	@ (80008f8 <MX_I2C1_Init+0xd8>)
 800087c:	f000 fcce 	bl	800121c <HAL_GPIO_Init>
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000880:	4b1e      	ldr	r3, [pc, #120]	@ (80008fc <MX_I2C1_Init+0xdc>)
 8000882:	4a1f      	ldr	r2, [pc, #124]	@ (8000900 <MX_I2C1_Init+0xe0>)
 8000884:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000886:	4b1d      	ldr	r3, [pc, #116]	@ (80008fc <MX_I2C1_Init+0xdc>)
 8000888:	4a1e      	ldr	r2, [pc, #120]	@ (8000904 <MX_I2C1_Init+0xe4>)
 800088a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800088c:	4b1b      	ldr	r3, [pc, #108]	@ (80008fc <MX_I2C1_Init+0xdc>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000892:	4b1a      	ldr	r3, [pc, #104]	@ (80008fc <MX_I2C1_Init+0xdc>)
 8000894:	2201      	movs	r2, #1
 8000896:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000898:	4b18      	ldr	r3, [pc, #96]	@ (80008fc <MX_I2C1_Init+0xdc>)
 800089a:	2200      	movs	r2, #0
 800089c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800089e:	4b17      	ldr	r3, [pc, #92]	@ (80008fc <MX_I2C1_Init+0xdc>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008a4:	4b15      	ldr	r3, [pc, #84]	@ (80008fc <MX_I2C1_Init+0xdc>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008aa:	4b14      	ldr	r3, [pc, #80]	@ (80008fc <MX_I2C1_Init+0xdc>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008b0:	4b12      	ldr	r3, [pc, #72]	@ (80008fc <MX_I2C1_Init+0xdc>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008b6:	4811      	ldr	r0, [pc, #68]	@ (80008fc <MX_I2C1_Init+0xdc>)
 80008b8:	f000 fe0e 	bl	80014d8 <HAL_I2C_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_I2C1_Init+0xa6>
  {
    Error_Handler();
 80008c2:	f000 f8a5 	bl	8000a10 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008c6:	2100      	movs	r1, #0
 80008c8:	480c      	ldr	r0, [pc, #48]	@ (80008fc <MX_I2C1_Init+0xdc>)
 80008ca:	f001 fb31 	bl	8001f30 <HAL_I2CEx_ConfigAnalogFilter>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_I2C1_Init+0xb8>
  {
    Error_Handler();
 80008d4:	f000 f89c 	bl	8000a10 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008d8:	2100      	movs	r1, #0
 80008da:	4808      	ldr	r0, [pc, #32]	@ (80008fc <MX_I2C1_Init+0xdc>)
 80008dc:	f001 fb73 	bl	8001fc6 <HAL_I2CEx_ConfigDigitalFilter>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_I2C1_Init+0xca>
  {
    Error_Handler();
 80008e6:	f000 f893 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	3718      	adds	r7, #24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	44020c00 	.word	0x44020c00
 80008f8:	42020400 	.word	0x42020400
 80008fc:	20000028 	.word	0x20000028
 8000900:	40005400 	.word	0x40005400
 8000904:	00707cbb 	.word	0x00707cbb

08000908 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800090c:	4b22      	ldr	r3, [pc, #136]	@ (8000998 <MX_USART1_UART_Init+0x90>)
 800090e:	4a23      	ldr	r2, [pc, #140]	@ (800099c <MX_USART1_UART_Init+0x94>)
 8000910:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000912:	4b21      	ldr	r3, [pc, #132]	@ (8000998 <MX_USART1_UART_Init+0x90>)
 8000914:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000918:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800091a:	4b1f      	ldr	r3, [pc, #124]	@ (8000998 <MX_USART1_UART_Init+0x90>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000920:	4b1d      	ldr	r3, [pc, #116]	@ (8000998 <MX_USART1_UART_Init+0x90>)
 8000922:	2200      	movs	r2, #0
 8000924:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000926:	4b1c      	ldr	r3, [pc, #112]	@ (8000998 <MX_USART1_UART_Init+0x90>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800092c:	4b1a      	ldr	r3, [pc, #104]	@ (8000998 <MX_USART1_UART_Init+0x90>)
 800092e:	220c      	movs	r2, #12
 8000930:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000932:	4b19      	ldr	r3, [pc, #100]	@ (8000998 <MX_USART1_UART_Init+0x90>)
 8000934:	2200      	movs	r2, #0
 8000936:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000938:	4b17      	ldr	r3, [pc, #92]	@ (8000998 <MX_USART1_UART_Init+0x90>)
 800093a:	2200      	movs	r2, #0
 800093c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800093e:	4b16      	ldr	r3, [pc, #88]	@ (8000998 <MX_USART1_UART_Init+0x90>)
 8000940:	2200      	movs	r2, #0
 8000942:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000944:	4b14      	ldr	r3, [pc, #80]	@ (8000998 <MX_USART1_UART_Init+0x90>)
 8000946:	2200      	movs	r2, #0
 8000948:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800094a:	4b13      	ldr	r3, [pc, #76]	@ (8000998 <MX_USART1_UART_Init+0x90>)
 800094c:	2200      	movs	r2, #0
 800094e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000950:	4811      	ldr	r0, [pc, #68]	@ (8000998 <MX_USART1_UART_Init+0x90>)
 8000952:	f004 fbd1 	bl	80050f8 <HAL_UART_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800095c:	f000 f858 	bl	8000a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000960:	2100      	movs	r1, #0
 8000962:	480d      	ldr	r0, [pc, #52]	@ (8000998 <MX_USART1_UART_Init+0x90>)
 8000964:	f005 f88c 	bl	8005a80 <HAL_UARTEx_SetTxFifoThreshold>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800096e:	f000 f84f 	bl	8000a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000972:	2100      	movs	r1, #0
 8000974:	4808      	ldr	r0, [pc, #32]	@ (8000998 <MX_USART1_UART_Init+0x90>)
 8000976:	f005 f8c1 	bl	8005afc <HAL_UARTEx_SetRxFifoThreshold>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000980:	f000 f846 	bl	8000a10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000984:	4804      	ldr	r0, [pc, #16]	@ (8000998 <MX_USART1_UART_Init+0x90>)
 8000986:	f005 f842 	bl	8005a0e <HAL_UARTEx_DisableFifoMode>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000990:	f000 f83e 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}
 8000998:	2000007c 	.word	0x2000007c
 800099c:	40013800 	.word	0x40013800

080009a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009a6:	4b19      	ldr	r3, [pc, #100]	@ (8000a0c <MX_GPIO_Init+0x6c>)
 80009a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009ac:	4a17      	ldr	r2, [pc, #92]	@ (8000a0c <MX_GPIO_Init+0x6c>)
 80009ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009b2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009b6:	4b15      	ldr	r3, [pc, #84]	@ (8000a0c <MX_GPIO_Init+0x6c>)
 80009b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c4:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <MX_GPIO_Init+0x6c>)
 80009c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009ca:	4a10      	ldr	r2, [pc, #64]	@ (8000a0c <MX_GPIO_Init+0x6c>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009d4:	4b0d      	ldr	r3, [pc, #52]	@ (8000a0c <MX_GPIO_Init+0x6c>)
 80009d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e2:	4b0a      	ldr	r3, [pc, #40]	@ (8000a0c <MX_GPIO_Init+0x6c>)
 80009e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009e8:	4a08      	ldr	r2, [pc, #32]	@ (8000a0c <MX_GPIO_Init+0x6c>)
 80009ea:	f043 0302 	orr.w	r3, r3, #2
 80009ee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009f2:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <MX_GPIO_Init+0x6c>)
 80009f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009f8:	f003 0302 	and.w	r3, r3, #2
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a00:	bf00      	nop
 8000a02:	3714      	adds	r7, #20
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	44020c00 	.word	0x44020c00

08000a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a14:	b672      	cpsid	i
}
 8000a16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a18:	bf00      	nop
 8000a1a:	e7fd      	b.n	8000a18 <Error_Handler+0x8>

08000a1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
	...

08000a2c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b0ac      	sub	sp, #176	@ 0xb0
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a44:	f107 0310 	add.w	r3, r7, #16
 8000a48:	2288      	movs	r2, #136	@ 0x88
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f005 f8e1 	bl	8005c14 <memset>
  if(hi2c->Instance==I2C1)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a31      	ldr	r2, [pc, #196]	@ (8000b1c <HAL_I2C_MspInit+0xf0>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d15a      	bne.n	8000b12 <HAL_I2C_MspInit+0xe6>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a60:	f04f 0300 	mov.w	r3, #0
 8000a64:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a6c:	f107 0310 	add.w	r3, r7, #16
 8000a70:	4618      	mov	r0, r3
 8000a72:	f002 fa6f 	bl	8002f54 <HAL_RCCEx_PeriphCLKConfig>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <HAL_I2C_MspInit+0x54>
    {
      Error_Handler();
 8000a7c:	f7ff ffc8 	bl	8000a10 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a80:	4b27      	ldr	r3, [pc, #156]	@ (8000b20 <HAL_I2C_MspInit+0xf4>)
 8000a82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a86:	4a26      	ldr	r2, [pc, #152]	@ (8000b20 <HAL_I2C_MspInit+0xf4>)
 8000a88:	f043 0302 	orr.w	r3, r3, #2
 8000a8c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a90:	4b23      	ldr	r3, [pc, #140]	@ (8000b20 <HAL_I2C_MspInit+0xf4>)
 8000a92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a96:	f003 0302 	and.w	r3, r3, #2
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB10     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000aa2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aa6:	2312      	movs	r3, #18
 8000aa8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aac:	2301      	movs	r3, #1
 8000aae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C1;
 8000ab8:	230b      	movs	r3, #11
 8000aba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000abe:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4817      	ldr	r0, [pc, #92]	@ (8000b24 <HAL_I2C_MspInit+0xf8>)
 8000ac6:	f000 fba9 	bl	800121c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000aca:	2340      	movs	r3, #64	@ 0x40
 8000acc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ad0:	2312      	movs	r3, #18
 8000ad2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	2300      	movs	r3, #0
 8000ade:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ae2:	2304      	movs	r3, #4
 8000ae4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000aec:	4619      	mov	r1, r3
 8000aee:	480d      	ldr	r0, [pc, #52]	@ (8000b24 <HAL_I2C_MspInit+0xf8>)
 8000af0:	f000 fb94 	bl	800121c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000af4:	4b0a      	ldr	r3, [pc, #40]	@ (8000b20 <HAL_I2C_MspInit+0xf4>)
 8000af6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000afa:	4a09      	ldr	r2, [pc, #36]	@ (8000b20 <HAL_I2C_MspInit+0xf4>)
 8000afc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b00:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000b04:	4b06      	ldr	r3, [pc, #24]	@ (8000b20 <HAL_I2C_MspInit+0xf4>)
 8000b06:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000b0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b0e:	60bb      	str	r3, [r7, #8]
 8000b10:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000b12:	bf00      	nop
 8000b14:	37b0      	adds	r7, #176	@ 0xb0
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40005400 	.word	0x40005400
 8000b20:	44020c00 	.word	0x44020c00
 8000b24:	42020400 	.word	0x42020400

08000b28 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b0ac      	sub	sp, #176	@ 0xb0
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b40:	f107 0310 	add.w	r3, r7, #16
 8000b44:	2288      	movs	r2, #136	@ 0x88
 8000b46:	2100      	movs	r1, #0
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f005 f863 	bl	8005c14 <memset>
  if(huart->Instance==USART1)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a26      	ldr	r2, [pc, #152]	@ (8000bec <HAL_UART_MspInit+0xc4>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d144      	bne.n	8000be2 <HAL_UART_MspInit+0xba>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b58:	f04f 0201 	mov.w	r2, #1
 8000b5c:	f04f 0300 	mov.w	r3, #0
 8000b60:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b64:	2300      	movs	r3, #0
 8000b66:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b68:	f107 0310 	add.w	r3, r7, #16
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f002 f9f1 	bl	8002f54 <HAL_RCCEx_PeriphCLKConfig>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000b78:	f7ff ff4a 	bl	8000a10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b7c:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf0 <HAL_UART_MspInit+0xc8>)
 8000b7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000b82:	4a1b      	ldr	r2, [pc, #108]	@ (8000bf0 <HAL_UART_MspInit+0xc8>)
 8000b84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b88:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000b8c:	4b18      	ldr	r3, [pc, #96]	@ (8000bf0 <HAL_UART_MspInit+0xc8>)
 8000b8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000b92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9a:	4b15      	ldr	r3, [pc, #84]	@ (8000bf0 <HAL_UART_MspInit+0xc8>)
 8000b9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ba0:	4a13      	ldr	r2, [pc, #76]	@ (8000bf0 <HAL_UART_MspInit+0xc8>)
 8000ba2:	f043 0301 	orr.w	r3, r3, #1
 8000ba6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000baa:	4b11      	ldr	r3, [pc, #68]	@ (8000bf0 <HAL_UART_MspInit+0xc8>)
 8000bac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bb0:	f003 0301 	and.w	r3, r3, #1
 8000bb4:	60bb      	str	r3, [r7, #8]
 8000bb6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA1     ------> USART1_RX
    PA2     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000bb8:	2306      	movs	r3, #6
 8000bba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART1;
 8000bd0:	2308      	movs	r3, #8
 8000bd2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4805      	ldr	r0, [pc, #20]	@ (8000bf4 <HAL_UART_MspInit+0xcc>)
 8000bde:	f000 fb1d 	bl	800121c <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000be2:	bf00      	nop
 8000be4:	37b0      	adds	r7, #176	@ 0xb0
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40013800 	.word	0x40013800
 8000bf0:	44020c00 	.word	0x44020c00
 8000bf4:	42020000 	.word	0x42020000

08000bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <NMI_Handler+0x4>

08000c00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <HardFault_Handler+0x4>

08000c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <MemManage_Handler+0x4>

08000c10 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <BusFault_Handler+0x4>

08000c18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <UsageFault_Handler+0x4>

08000c20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c4e:	f000 f93d 	bl	8000ecc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
	...

08000c58 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c5e:	4b30      	ldr	r3, [pc, #192]	@ (8000d20 <SystemInit+0xc8>)
 8000c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c64:	4a2e      	ldr	r2, [pc, #184]	@ (8000d20 <SystemInit+0xc8>)
 8000c66:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c6a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000c6e:	4b2d      	ldr	r3, [pc, #180]	@ (8000d24 <SystemInit+0xcc>)
 8000c70:	2201      	movs	r2, #1
 8000c72:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000c74:	4b2b      	ldr	r3, [pc, #172]	@ (8000d24 <SystemInit+0xcc>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000c7a:	4b2a      	ldr	r3, [pc, #168]	@ (8000d24 <SystemInit+0xcc>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000c80:	4b28      	ldr	r3, [pc, #160]	@ (8000d24 <SystemInit+0xcc>)
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	4927      	ldr	r1, [pc, #156]	@ (8000d24 <SystemInit+0xcc>)
 8000c86:	4b28      	ldr	r3, [pc, #160]	@ (8000d28 <SystemInit+0xd0>)
 8000c88:	4013      	ands	r3, r2
 8000c8a:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000c8c:	4b25      	ldr	r3, [pc, #148]	@ (8000d24 <SystemInit+0xcc>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8000c92:	4b24      	ldr	r3, [pc, #144]	@ (8000d24 <SystemInit+0xcc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000c98:	4b22      	ldr	r3, [pc, #136]	@ (8000d24 <SystemInit+0xcc>)
 8000c9a:	4a24      	ldr	r2, [pc, #144]	@ (8000d2c <SystemInit+0xd4>)
 8000c9c:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000c9e:	4b21      	ldr	r3, [pc, #132]	@ (8000d24 <SystemInit+0xcc>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000ca4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d24 <SystemInit+0xcc>)
 8000ca6:	4a21      	ldr	r2, [pc, #132]	@ (8000d2c <SystemInit+0xd4>)
 8000ca8:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000caa:	4b1e      	ldr	r3, [pc, #120]	@ (8000d24 <SystemInit+0xcc>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000cb0:	4b1c      	ldr	r3, [pc, #112]	@ (8000d24 <SystemInit+0xcc>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a1b      	ldr	r2, [pc, #108]	@ (8000d24 <SystemInit+0xcc>)
 8000cb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000cba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000cbc:	4b19      	ldr	r3, [pc, #100]	@ (8000d24 <SystemInit+0xcc>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cc2:	4b17      	ldr	r3, [pc, #92]	@ (8000d20 <SystemInit+0xc8>)
 8000cc4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000cc8:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000cca:	4b19      	ldr	r3, [pc, #100]	@ (8000d30 <SystemInit+0xd8>)
 8000ccc:	699b      	ldr	r3, [r3, #24]
 8000cce:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000cd2:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000cda:	d003      	beq.n	8000ce4 <SystemInit+0x8c>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000ce2:	d117      	bne.n	8000d14 <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000ce4:	4b12      	ldr	r3, [pc, #72]	@ (8000d30 <SystemInit+0xd8>)
 8000ce6:	69db      	ldr	r3, [r3, #28]
 8000ce8:	f003 0301 	and.w	r3, r3, #1
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d005      	beq.n	8000cfc <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d30 <SystemInit+0xd8>)
 8000cf2:	4a10      	ldr	r2, [pc, #64]	@ (8000d34 <SystemInit+0xdc>)
 8000cf4:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d30 <SystemInit+0xd8>)
 8000cf8:	4a0f      	ldr	r2, [pc, #60]	@ (8000d38 <SystemInit+0xe0>)
 8000cfa:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000d30 <SystemInit+0xd8>)
 8000cfe:	69db      	ldr	r3, [r3, #28]
 8000d00:	4a0b      	ldr	r2, [pc, #44]	@ (8000d30 <SystemInit+0xd8>)
 8000d02:	f043 0302 	orr.w	r3, r3, #2
 8000d06:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000d08:	4b09      	ldr	r3, [pc, #36]	@ (8000d30 <SystemInit+0xd8>)
 8000d0a:	69db      	ldr	r3, [r3, #28]
 8000d0c:	4a08      	ldr	r2, [pc, #32]	@ (8000d30 <SystemInit+0xd8>)
 8000d0e:	f043 0301 	orr.w	r3, r3, #1
 8000d12:	61d3      	str	r3, [r2, #28]
  }
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000ed00 	.word	0xe000ed00
 8000d24:	44020c00 	.word	0x44020c00
 8000d28:	fae2eae3 	.word	0xfae2eae3
 8000d2c:	01010280 	.word	0x01010280
 8000d30:	40022000 	.word	0x40022000
 8000d34:	08192a3b 	.word	0x08192a3b
 8000d38:	4c5d6e7f 	.word	0x4c5d6e7f

08000d3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000d3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d74 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000d40:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000d42:	e003      	b.n	8000d4c <LoopCopyDataInit>

08000d44 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000d44:	4b0c      	ldr	r3, [pc, #48]	@ (8000d78 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000d46:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000d48:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000d4a:	3104      	adds	r1, #4

08000d4c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000d4c:	480b      	ldr	r0, [pc, #44]	@ (8000d7c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d80 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000d50:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000d52:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000d54:	d3f6      	bcc.n	8000d44 <CopyDataInit>
	ldr	r2, =_sbss
 8000d56:	4a0b      	ldr	r2, [pc, #44]	@ (8000d84 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000d58:	e002      	b.n	8000d60 <LoopFillZerobss>

08000d5a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000d5a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000d5c:	f842 3b04 	str.w	r3, [r2], #4

08000d60 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000d60:	4b09      	ldr	r3, [pc, #36]	@ (8000d88 <LoopForever+0x16>)
	cmp	r2, r3
 8000d62:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000d64:	d3f9      	bcc.n	8000d5a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d66:	f7ff ff77 	bl	8000c58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d6a:	f004 ff5b 	bl	8005c24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d6e:	f7ff fcd1 	bl	8000714 <main>

08000d72 <LoopForever>:

LoopForever:
    b LoopForever
 8000d72:	e7fe      	b.n	8000d72 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000d74:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8000d78:	08005d1c 	.word	0x08005d1c
	ldr	r0, =_sdata
 8000d7c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000d80:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000d84:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000d88:	20000114 	.word	0x20000114

08000d8c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d8c:	e7fe      	b.n	8000d8c <ADC1_IRQHandler>
	...

08000d90 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d94:	2003      	movs	r0, #3
 8000d96:	f000 f96c 	bl	8001072 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000d9a:	f001 ff51 	bl	8002c40 <HAL_RCC_GetSysClockFreq>
 8000d9e:	4602      	mov	r2, r0
 8000da0:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd4 <HAL_Init+0x44>)
 8000da2:	6a1b      	ldr	r3, [r3, #32]
 8000da4:	f003 030f 	and.w	r3, r3, #15
 8000da8:	490b      	ldr	r1, [pc, #44]	@ (8000dd8 <HAL_Init+0x48>)
 8000daa:	5ccb      	ldrb	r3, [r1, r3]
 8000dac:	fa22 f303 	lsr.w	r3, r2, r3
 8000db0:	4a0a      	ldr	r2, [pc, #40]	@ (8000ddc <HAL_Init+0x4c>)
 8000db2:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000db4:	2004      	movs	r0, #4
 8000db6:	f000 f9a3 	bl	8001100 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dba:	200f      	movs	r0, #15
 8000dbc:	f000 f810 	bl	8000de0 <HAL_InitTick>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e002      	b.n	8000dd0 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000dca:	f7ff fe27 	bl	8000a1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dce:	2300      	movs	r3, #0
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	44020c00 	.word	0x44020c00
 8000dd8:	08005ccc 	.word	0x08005ccc
 8000ddc:	20000000 	.word	0x20000000

08000de0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000de8:	2300      	movs	r3, #0
 8000dea:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000dec:	4b33      	ldr	r3, [pc, #204]	@ (8000ebc <HAL_InitTick+0xdc>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d101      	bne.n	8000df8 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000df4:	2301      	movs	r3, #1
 8000df6:	e05c      	b.n	8000eb2 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000df8:	4b31      	ldr	r3, [pc, #196]	@ (8000ec0 <HAL_InitTick+0xe0>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f003 0304 	and.w	r3, r3, #4
 8000e00:	2b04      	cmp	r3, #4
 8000e02:	d10c      	bne.n	8000e1e <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000e04:	4b2f      	ldr	r3, [pc, #188]	@ (8000ec4 <HAL_InitTick+0xe4>)
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	4b2c      	ldr	r3, [pc, #176]	@ (8000ebc <HAL_InitTick+0xdc>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	e037      	b.n	8000e8e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000e1e:	f000 f9c7 	bl	80011b0 <HAL_SYSTICK_GetCLKSourceConfig>
 8000e22:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d023      	beq.n	8000e72 <HAL_InitTick+0x92>
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d82d      	bhi.n	8000e8c <HAL_InitTick+0xac>
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d003      	beq.n	8000e3e <HAL_InitTick+0x5e>
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d00d      	beq.n	8000e58 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000e3c:	e026      	b.n	8000e8c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000e3e:	4b21      	ldr	r3, [pc, #132]	@ (8000ec4 <HAL_InitTick+0xe4>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	4b1e      	ldr	r3, [pc, #120]	@ (8000ebc <HAL_InitTick+0xdc>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	4619      	mov	r1, r3
 8000e48:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000e4c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e54:	60fb      	str	r3, [r7, #12]
        break;
 8000e56:	e01a      	b.n	8000e8e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000e58:	4b18      	ldr	r3, [pc, #96]	@ (8000ebc <HAL_InitTick+0xdc>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e62:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e66:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e6e:	60fb      	str	r3, [r7, #12]
        break;
 8000e70:	e00d      	b.n	8000e8e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000e72:	4b12      	ldr	r3, [pc, #72]	@ (8000ebc <HAL_InitTick+0xdc>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	461a      	mov	r2, r3
 8000e78:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e80:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e88:	60fb      	str	r3, [r7, #12]
        break;
 8000e8a:	e000      	b.n	8000e8e <HAL_InitTick+0xae>
        break;
 8000e8c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000e8e:	68f8      	ldr	r0, [r7, #12]
 8000e90:	f000 f914 	bl	80010bc <HAL_SYSTICK_Config>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e009      	b.n	8000eb2 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	6879      	ldr	r1, [r7, #4]
 8000ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea6:	f000 f8ef 	bl	8001088 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000eaa:	4a07      	ldr	r2, [pc, #28]	@ (8000ec8 <HAL_InitTick+0xe8>)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000008 	.word	0x20000008
 8000ec0:	e000e010 	.word	0xe000e010
 8000ec4:	20000000 	.word	0x20000000
 8000ec8:	20000004 	.word	0x20000004

08000ecc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ed0:	4b06      	ldr	r3, [pc, #24]	@ (8000eec <HAL_IncTick+0x20>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	4b06      	ldr	r3, [pc, #24]	@ (8000ef0 <HAL_IncTick+0x24>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4413      	add	r3, r2
 8000edc:	4a04      	ldr	r2, [pc, #16]	@ (8000ef0 <HAL_IncTick+0x24>)
 8000ede:	6013      	str	r3, [r2, #0]
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	20000008 	.word	0x20000008
 8000ef0:	20000110 	.word	0x20000110

08000ef4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef8:	4b03      	ldr	r3, [pc, #12]	@ (8000f08 <HAL_GetTick+0x14>)
 8000efa:	681b      	ldr	r3, [r3, #0]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	20000110 	.word	0x20000110

08000f0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f14:	f7ff ffee 	bl	8000ef4 <HAL_GetTick>
 8000f18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f24:	d005      	beq.n	8000f32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f26:	4b0a      	ldr	r3, [pc, #40]	@ (8000f50 <HAL_Delay+0x44>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	4413      	add	r3, r2
 8000f30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f32:	bf00      	nop
 8000f34:	f7ff ffde 	bl	8000ef4 <HAL_GetTick>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d8f7      	bhi.n	8000f34 <HAL_Delay+0x28>
  {
  }
}
 8000f44:	bf00      	nop
 8000f46:	bf00      	nop
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000008 	.word	0x20000008

08000f54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f64:	4b0c      	ldr	r3, [pc, #48]	@ (8000f98 <__NVIC_SetPriorityGrouping+0x44>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f6a:	68ba      	ldr	r2, [r7, #8]
 8000f6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f70:	4013      	ands	r3, r2
 8000f72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f86:	4a04      	ldr	r2, [pc, #16]	@ (8000f98 <__NVIC_SetPriorityGrouping+0x44>)
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	60d3      	str	r3, [r2, #12]
}
 8000f8c:	bf00      	nop
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa0:	4b04      	ldr	r3, [pc, #16]	@ (8000fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	0a1b      	lsrs	r3, r3, #8
 8000fa6:	f003 0307 	and.w	r3, r3, #7
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	6039      	str	r1, [r7, #0]
 8000fc2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	db0a      	blt.n	8000fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	490c      	ldr	r1, [pc, #48]	@ (8001004 <__NVIC_SetPriority+0x4c>)
 8000fd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fd6:	0112      	lsls	r2, r2, #4
 8000fd8:	b2d2      	uxtb	r2, r2
 8000fda:	440b      	add	r3, r1
 8000fdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe0:	e00a      	b.n	8000ff8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	4908      	ldr	r1, [pc, #32]	@ (8001008 <__NVIC_SetPriority+0x50>)
 8000fe8:	88fb      	ldrh	r3, [r7, #6]
 8000fea:	f003 030f 	and.w	r3, r3, #15
 8000fee:	3b04      	subs	r3, #4
 8000ff0:	0112      	lsls	r2, r2, #4
 8000ff2:	b2d2      	uxtb	r2, r2
 8000ff4:	440b      	add	r3, r1
 8000ff6:	761a      	strb	r2, [r3, #24]
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000e100 	.word	0xe000e100
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800100c:	b480      	push	{r7}
 800100e:	b089      	sub	sp, #36	@ 0x24
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	f1c3 0307 	rsb	r3, r3, #7
 8001026:	2b04      	cmp	r3, #4
 8001028:	bf28      	it	cs
 800102a:	2304      	movcs	r3, #4
 800102c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	3304      	adds	r3, #4
 8001032:	2b06      	cmp	r3, #6
 8001034:	d902      	bls.n	800103c <NVIC_EncodePriority+0x30>
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	3b03      	subs	r3, #3
 800103a:	e000      	b.n	800103e <NVIC_EncodePriority+0x32>
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001040:	f04f 32ff 	mov.w	r2, #4294967295
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43da      	mvns	r2, r3
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	401a      	ands	r2, r3
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001054:	f04f 31ff 	mov.w	r1, #4294967295
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	fa01 f303 	lsl.w	r3, r1, r3
 800105e:	43d9      	mvns	r1, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	4313      	orrs	r3, r2
         );
}
 8001066:	4618      	mov	r0, r3
 8001068:	3724      	adds	r7, #36	@ 0x24
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff ff6a 	bl	8000f54 <__NVIC_SetPriorityGrouping>
}
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
 8001094:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001096:	f7ff ff81 	bl	8000f9c <__NVIC_GetPriorityGrouping>
 800109a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	68b9      	ldr	r1, [r7, #8]
 80010a0:	6978      	ldr	r0, [r7, #20]
 80010a2:	f7ff ffb3 	bl	800100c <NVIC_EncodePriority>
 80010a6:	4602      	mov	r2, r0
 80010a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010ac:	4611      	mov	r1, r2
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff ff82 	bl	8000fb8 <__NVIC_SetPriority>
}
 80010b4:	bf00      	nop
 80010b6:	3718      	adds	r7, #24
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010cc:	d301      	bcc.n	80010d2 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80010ce:	2301      	movs	r3, #1
 80010d0:	e00d      	b.n	80010ee <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80010d2:	4a0a      	ldr	r2, [pc, #40]	@ (80010fc <HAL_SYSTICK_Config+0x40>)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80010da:	4b08      	ldr	r3, [pc, #32]	@ (80010fc <HAL_SYSTICK_Config+0x40>)
 80010dc:	2200      	movs	r2, #0
 80010de:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80010e0:	4b06      	ldr	r3, [pc, #24]	@ (80010fc <HAL_SYSTICK_Config+0x40>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a05      	ldr	r2, [pc, #20]	@ (80010fc <HAL_SYSTICK_Config+0x40>)
 80010e6:	f043 0303 	orr.w	r3, r3, #3
 80010ea:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	e000e010 	.word	0xe000e010

08001100 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2b04      	cmp	r3, #4
 800110c:	d844      	bhi.n	8001198 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800110e:	a201      	add	r2, pc, #4	@ (adr r2, 8001114 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001114:	08001137 	.word	0x08001137
 8001118:	08001155 	.word	0x08001155
 800111c:	08001177 	.word	0x08001177
 8001120:	08001199 	.word	0x08001199
 8001124:	08001129 	.word	0x08001129
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001128:	4b1f      	ldr	r3, [pc, #124]	@ (80011a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a1e      	ldr	r2, [pc, #120]	@ (80011a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800112e:	f043 0304 	orr.w	r3, r3, #4
 8001132:	6013      	str	r3, [r2, #0]
      break;
 8001134:	e031      	b.n	800119a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001136:	4b1c      	ldr	r3, [pc, #112]	@ (80011a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a1b      	ldr	r2, [pc, #108]	@ (80011a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800113c:	f023 0304 	bic.w	r3, r3, #4
 8001140:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8001142:	4b1a      	ldr	r3, [pc, #104]	@ (80011ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001144:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001148:	4a18      	ldr	r2, [pc, #96]	@ (80011ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800114a:	f023 030c 	bic.w	r3, r3, #12
 800114e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001152:	e022      	b.n	800119a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001154:	4b14      	ldr	r3, [pc, #80]	@ (80011a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a13      	ldr	r2, [pc, #76]	@ (80011a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800115a:	f023 0304 	bic.w	r3, r3, #4
 800115e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8001160:	4b12      	ldr	r3, [pc, #72]	@ (80011ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001162:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001166:	f023 030c 	bic.w	r3, r3, #12
 800116a:	4a10      	ldr	r2, [pc, #64]	@ (80011ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800116c:	f043 0304 	orr.w	r3, r3, #4
 8001170:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001174:	e011      	b.n	800119a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001176:	4b0c      	ldr	r3, [pc, #48]	@ (80011a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a0b      	ldr	r2, [pc, #44]	@ (80011a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800117c:	f023 0304 	bic.w	r3, r3, #4
 8001180:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8001182:	4b0a      	ldr	r3, [pc, #40]	@ (80011ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001184:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001188:	f023 030c 	bic.w	r3, r3, #12
 800118c:	4a07      	ldr	r2, [pc, #28]	@ (80011ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800118e:	f043 0308 	orr.w	r3, r3, #8
 8001192:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001196:	e000      	b.n	800119a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001198:	bf00      	nop
  }
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	e000e010 	.word	0xe000e010
 80011ac:	44020c00 	.word	0x44020c00

080011b0 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80011b6:	4b17      	ldr	r3, [pc, #92]	@ (8001214 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0304 	and.w	r3, r3, #4
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d002      	beq.n	80011c8 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80011c2:	2304      	movs	r3, #4
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	e01e      	b.n	8001206 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 80011c8:	4b13      	ldr	r3, [pc, #76]	@ (8001218 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 80011ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80011ce:	f003 030c 	and.w	r3, r3, #12
 80011d2:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	2b08      	cmp	r3, #8
 80011d8:	d00f      	beq.n	80011fa <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	2b08      	cmp	r3, #8
 80011de:	d80f      	bhi.n	8001200 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	2b04      	cmp	r3, #4
 80011ea:	d003      	beq.n	80011f4 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80011ec:	e008      	b.n	8001200 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80011ee:	2300      	movs	r3, #0
 80011f0:	607b      	str	r3, [r7, #4]
        break;
 80011f2:	e008      	b.n	8001206 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80011f4:	2301      	movs	r3, #1
 80011f6:	607b      	str	r3, [r7, #4]
        break;
 80011f8:	e005      	b.n	8001206 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80011fa:	2302      	movs	r3, #2
 80011fc:	607b      	str	r3, [r7, #4]
        break;
 80011fe:	e002      	b.n	8001206 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001200:	2300      	movs	r3, #0
 8001202:	607b      	str	r3, [r7, #4]
        break;
 8001204:	bf00      	nop
    }
  }
  return systick_source;
 8001206:	687b      	ldr	r3, [r7, #4]
}
 8001208:	4618      	mov	r0, r3
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	e000e010 	.word	0xe000e010
 8001218:	44020c00 	.word	0x44020c00

0800121c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800121c:	b480      	push	{r7}
 800121e:	b087      	sub	sp, #28
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001226:	2300      	movs	r3, #0
 8001228:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800122a:	e142      	b.n	80014b2 <HAL_GPIO_Init+0x296>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	2101      	movs	r1, #1
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	fa01 f303 	lsl.w	r3, r1, r3
 8001238:	4013      	ands	r3, r2
 800123a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	2b00      	cmp	r3, #0
 8001240:	f000 8134 	beq.w	80014ac <HAL_GPIO_Init+0x290>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2b02      	cmp	r3, #2
 800124a:	d003      	beq.n	8001254 <HAL_GPIO_Init+0x38>
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	2b12      	cmp	r3, #18
 8001252:	d125      	bne.n	80012a0 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	08da      	lsrs	r2, r3, #3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3208      	adds	r2, #8
 800125c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001260:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	f003 0307 	and.w	r3, r3, #7
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	220f      	movs	r2, #15
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	697a      	ldr	r2, [r7, #20]
 8001274:	4013      	ands	r3, r2
 8001276:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	691b      	ldr	r3, [r3, #16]
 800127c:	f003 020f 	and.w	r2, r3, #15
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	697a      	ldr	r2, [r7, #20]
 800128e:	4313      	orrs	r3, r2
 8001290:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	08da      	lsrs	r2, r3, #3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	3208      	adds	r2, #8
 800129a:	6979      	ldr	r1, [r7, #20]
 800129c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	2203      	movs	r2, #3
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	43db      	mvns	r3, r3
 80012b2:	697a      	ldr	r2, [r7, #20]
 80012b4:	4013      	ands	r3, r2
 80012b6:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 0203 	and.w	r2, r3, #3
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	697a      	ldr	r2, [r7, #20]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	697a      	ldr	r2, [r7, #20]
 80012d2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d00b      	beq.n	80012f4 <HAL_GPIO_Init+0xd8>
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d007      	beq.n	80012f4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012e8:	2b11      	cmp	r3, #17
 80012ea:	d003      	beq.n	80012f4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	2b12      	cmp	r3, #18
 80012f2:	d130      	bne.n	8001356 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	2203      	movs	r2, #3
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	43db      	mvns	r3, r3
 8001306:	697a      	ldr	r2, [r7, #20]
 8001308:	4013      	ands	r3, r2
 800130a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	68da      	ldr	r2, [r3, #12]
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	697a      	ldr	r2, [r7, #20]
 800131a:	4313      	orrs	r3, r2
 800131c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	697a      	ldr	r2, [r7, #20]
 8001322:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800132a:	2201      	movs	r2, #1
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43db      	mvns	r3, r3
 8001334:	697a      	ldr	r2, [r7, #20]
 8001336:	4013      	ands	r3, r2
 8001338:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	091b      	lsrs	r3, r3, #4
 8001340:	f003 0201 	and.w	r2, r3, #1
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	697a      	ldr	r2, [r7, #20]
 800134c:	4313      	orrs	r3, r2
 800134e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	697a      	ldr	r2, [r7, #20]
 8001354:	605a      	str	r2, [r3, #4]
      }

      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f003 0303 	and.w	r3, r3, #3
 800135e:	2b03      	cmp	r3, #3
 8001360:	d109      	bne.n	8001376 <HAL_GPIO_Init+0x15a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f003 0303 	and.w	r3, r3, #3
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 800136a:	2b03      	cmp	r3, #3
 800136c:	d11b      	bne.n	80013a6 <HAL_GPIO_Init+0x18a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d017      	beq.n	80013a6 <HAL_GPIO_Init+0x18a>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	2203      	movs	r2, #3
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	43db      	mvns	r3, r3
 8001388:	697a      	ldr	r2, [r7, #20]
 800138a:	4013      	ands	r3, r2
 800138c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	689a      	ldr	r2, [r3, #8]
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	697a      	ldr	r2, [r7, #20]
 800139c:	4313      	orrs	r3, r2
 800139e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	697a      	ldr	r2, [r7, #20]
 80013a4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d07c      	beq.n	80014ac <HAL_GPIO_Init+0x290>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80013b2:	4a47      	ldr	r2, [pc, #284]	@ (80014d0 <HAL_GPIO_Init+0x2b4>)
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	089b      	lsrs	r3, r3, #2
 80013b8:	3318      	adds	r3, #24
 80013ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013be:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	f003 0303 	and.w	r3, r3, #3
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	220f      	movs	r2, #15
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43db      	mvns	r3, r3
 80013d0:	697a      	ldr	r2, [r7, #20]
 80013d2:	4013      	ands	r3, r2
 80013d4:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	0a9a      	lsrs	r2, r3, #10
 80013da:	4b3e      	ldr	r3, [pc, #248]	@ (80014d4 <HAL_GPIO_Init+0x2b8>)
 80013dc:	4013      	ands	r3, r2
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	f002 0203 	and.w	r2, r2, #3
 80013e4:	00d2      	lsls	r2, r2, #3
 80013e6:	4093      	lsls	r3, r2
 80013e8:	697a      	ldr	r2, [r7, #20]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80013ee:	4938      	ldr	r1, [pc, #224]	@ (80014d0 <HAL_GPIO_Init+0x2b4>)
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	089b      	lsrs	r3, r3, #2
 80013f4:	3318      	adds	r3, #24
 80013f6:	697a      	ldr	r2, [r7, #20]
 80013f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80013fc:	4b34      	ldr	r3, [pc, #208]	@ (80014d0 <HAL_GPIO_Init+0x2b4>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	43db      	mvns	r3, r3
 8001406:	697a      	ldr	r2, [r7, #20]
 8001408:	4013      	ands	r3, r2
 800140a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d003      	beq.n	8001420 <HAL_GPIO_Init+0x204>
        {
          tmp |= iocurrent;
 8001418:	697a      	ldr	r2, [r7, #20]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	4313      	orrs	r3, r2
 800141e:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001420:	4a2b      	ldr	r2, [pc, #172]	@ (80014d0 <HAL_GPIO_Init+0x2b4>)
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001426:	4b2a      	ldr	r3, [pc, #168]	@ (80014d0 <HAL_GPIO_Init+0x2b4>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	43db      	mvns	r3, r3
 8001430:	697a      	ldr	r2, [r7, #20]
 8001432:	4013      	ands	r3, r2
 8001434:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <HAL_GPIO_Init+0x22e>
        {
          tmp |= iocurrent;
 8001442:	697a      	ldr	r2, [r7, #20]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	4313      	orrs	r3, r2
 8001448:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800144a:	4a21      	ldr	r2, [pc, #132]	@ (80014d0 <HAL_GPIO_Init+0x2b4>)
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001450:	4b1f      	ldr	r3, [pc, #124]	@ (80014d0 <HAL_GPIO_Init+0x2b4>)
 8001452:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001456:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	43db      	mvns	r3, r3
 800145c:	697a      	ldr	r2, [r7, #20]
 800145e:	4013      	ands	r3, r2
 8001460:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <HAL_GPIO_Init+0x25a>
        {
          tmp |= iocurrent;
 800146e:	697a      	ldr	r2, [r7, #20]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4313      	orrs	r3, r2
 8001474:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001476:	4a16      	ldr	r2, [pc, #88]	@ (80014d0 <HAL_GPIO_Init+0x2b4>)
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800147e:	4b14      	ldr	r3, [pc, #80]	@ (80014d0 <HAL_GPIO_Init+0x2b4>)
 8001480:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001484:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	43db      	mvns	r3, r3
 800148a:	697a      	ldr	r2, [r7, #20]
 800148c:	4013      	ands	r3, r2
 800148e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d003      	beq.n	80014a4 <HAL_GPIO_Init+0x288>
        {
          tmp |= iocurrent;
 800149c:	697a      	ldr	r2, [r7, #20]
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80014a4:	4a0a      	ldr	r2, [pc, #40]	@ (80014d0 <HAL_GPIO_Init+0x2b4>)
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	3301      	adds	r3, #1
 80014b0:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	fa22 f303 	lsr.w	r3, r2, r3
 80014bc:	2b00      	cmp	r3, #0
 80014be:	f47f aeb5 	bne.w	800122c <HAL_GPIO_Init+0x10>
  }
}
 80014c2:	bf00      	nop
 80014c4:	bf00      	nop
 80014c6:	371c      	adds	r7, #28
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	44022000 	.word	0x44022000
 80014d4:	002f7f7f 	.word	0x002f7f7f

080014d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e08d      	b.n	8001606 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d106      	bne.n	8001504 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff fa94 	bl	8000a2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2224      	movs	r2, #36	@ 0x24
 8001508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f022 0201 	bic.w	r2, r2, #1
 800151a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685a      	ldr	r2, [r3, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001528:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	689a      	ldr	r2, [r3, #8]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001538:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d107      	bne.n	8001552 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	689a      	ldr	r2, [r3, #8]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	e006      	b.n	8001560 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	689a      	ldr	r2, [r3, #8]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800155e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	2b02      	cmp	r3, #2
 8001566:	d108      	bne.n	800157a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	685a      	ldr	r2, [r3, #4]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	e007      	b.n	800158a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	685a      	ldr	r2, [r3, #4]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001588:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	6812      	ldr	r2, [r2, #0]
 8001594:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001598:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800159c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	68da      	ldr	r2, [r3, #12]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80015ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	691a      	ldr	r2, [r3, #16]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	695b      	ldr	r3, [r3, #20]
 80015b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	430a      	orrs	r2, r1
 80015c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	69d9      	ldr	r1, [r3, #28]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a1a      	ldr	r2, [r3, #32]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	430a      	orrs	r2, r1
 80015d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f042 0201 	orr.w	r2, r2, #1
 80015e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2220      	movs	r2, #32
 80015f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af02      	add	r7, sp, #8
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	607a      	str	r2, [r7, #4]
 800161a:	461a      	mov	r2, r3
 800161c:	460b      	mov	r3, r1
 800161e:	817b      	strh	r3, [r7, #10]
 8001620:	4613      	mov	r3, r2
 8001622:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800162a:	b2db      	uxtb	r3, r3
 800162c:	2b20      	cmp	r3, #32
 800162e:	f040 80da 	bne.w	80017e6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001638:	2b01      	cmp	r3, #1
 800163a:	d101      	bne.n	8001640 <HAL_I2C_Master_Transmit+0x30>
 800163c:	2302      	movs	r3, #2
 800163e:	e0d3      	b.n	80017e8 <HAL_I2C_Master_Transmit+0x1d8>
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2201      	movs	r2, #1
 8001644:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001648:	f7ff fc54 	bl	8000ef4 <HAL_GetTick>
 800164c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	9300      	str	r3, [sp, #0]
 8001652:	2319      	movs	r3, #25
 8001654:	2201      	movs	r2, #1
 8001656:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800165a:	68f8      	ldr	r0, [r7, #12]
 800165c:	f000 f9e6 	bl	8001a2c <I2C_WaitOnFlagUntilTimeout>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e0be      	b.n	80017e8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2221      	movs	r2, #33	@ 0x21
 800166e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2210      	movs	r2, #16
 8001676:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2200      	movs	r2, #0
 800167e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	893a      	ldrh	r2, [r7, #8]
 800168a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2200      	movs	r2, #0
 8001690:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001696:	b29b      	uxth	r3, r3
 8001698:	2bff      	cmp	r3, #255	@ 0xff
 800169a:	d90e      	bls.n	80016ba <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	22ff      	movs	r2, #255	@ 0xff
 80016a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	8979      	ldrh	r1, [r7, #10]
 80016aa:	4b51      	ldr	r3, [pc, #324]	@ (80017f0 <HAL_I2C_Master_Transmit+0x1e0>)
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80016b2:	68f8      	ldr	r0, [r7, #12]
 80016b4:	f000 fc0a 	bl	8001ecc <I2C_TransferConfig>
 80016b8:	e06c      	b.n	8001794 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016be:	b29a      	uxth	r2, r3
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	8979      	ldrh	r1, [r7, #10]
 80016cc:	4b48      	ldr	r3, [pc, #288]	@ (80017f0 <HAL_I2C_Master_Transmit+0x1e0>)
 80016ce:	9300      	str	r3, [sp, #0]
 80016d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80016d4:	68f8      	ldr	r0, [r7, #12]
 80016d6:	f000 fbf9 	bl	8001ecc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80016da:	e05b      	b.n	8001794 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016dc:	697a      	ldr	r2, [r7, #20]
 80016de:	6a39      	ldr	r1, [r7, #32]
 80016e0:	68f8      	ldr	r0, [r7, #12]
 80016e2:	f000 f9fc 	bl	8001ade <I2C_WaitOnTXISFlagUntilTimeout>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e07b      	b.n	80017e8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016f4:	781a      	ldrb	r2, [r3, #0]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001700:	1c5a      	adds	r2, r3, #1
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800170a:	b29b      	uxth	r3, r3
 800170c:	3b01      	subs	r3, #1
 800170e:	b29a      	uxth	r2, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001718:	3b01      	subs	r3, #1
 800171a:	b29a      	uxth	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001724:	b29b      	uxth	r3, r3
 8001726:	2b00      	cmp	r3, #0
 8001728:	d034      	beq.n	8001794 <HAL_I2C_Master_Transmit+0x184>
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800172e:	2b00      	cmp	r3, #0
 8001730:	d130      	bne.n	8001794 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	9300      	str	r3, [sp, #0]
 8001736:	6a3b      	ldr	r3, [r7, #32]
 8001738:	2200      	movs	r2, #0
 800173a:	2180      	movs	r1, #128	@ 0x80
 800173c:	68f8      	ldr	r0, [r7, #12]
 800173e:	f000 f975 	bl	8001a2c <I2C_WaitOnFlagUntilTimeout>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e04d      	b.n	80017e8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001750:	b29b      	uxth	r3, r3
 8001752:	2bff      	cmp	r3, #255	@ 0xff
 8001754:	d90e      	bls.n	8001774 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	22ff      	movs	r2, #255	@ 0xff
 800175a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001760:	b2da      	uxtb	r2, r3
 8001762:	8979      	ldrh	r1, [r7, #10]
 8001764:	2300      	movs	r3, #0
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800176c:	68f8      	ldr	r0, [r7, #12]
 800176e:	f000 fbad 	bl	8001ecc <I2C_TransferConfig>
 8001772:	e00f      	b.n	8001794 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001778:	b29a      	uxth	r2, r3
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001782:	b2da      	uxtb	r2, r3
 8001784:	8979      	ldrh	r1, [r7, #10]
 8001786:	2300      	movs	r3, #0
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800178e:	68f8      	ldr	r0, [r7, #12]
 8001790:	f000 fb9c 	bl	8001ecc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001798:	b29b      	uxth	r3, r3
 800179a:	2b00      	cmp	r3, #0
 800179c:	d19e      	bne.n	80016dc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800179e:	697a      	ldr	r2, [r7, #20]
 80017a0:	6a39      	ldr	r1, [r7, #32]
 80017a2:	68f8      	ldr	r0, [r7, #12]
 80017a4:	f000 f9e2 	bl	8001b6c <I2C_WaitOnSTOPFlagUntilTimeout>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e01a      	b.n	80017e8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2220      	movs	r2, #32
 80017b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	6859      	ldr	r1, [r3, #4]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4b0b      	ldr	r3, [pc, #44]	@ (80017f4 <HAL_I2C_Master_Transmit+0x1e4>)
 80017c6:	400b      	ands	r3, r1
 80017c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2220      	movs	r2, #32
 80017ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80017e2:	2300      	movs	r3, #0
 80017e4:	e000      	b.n	80017e8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80017e6:	2302      	movs	r3, #2
  }
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3718      	adds	r7, #24
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	80002000 	.word	0x80002000
 80017f4:	fe00e800 	.word	0xfe00e800

080017f8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b088      	sub	sp, #32
 80017fc:	af02      	add	r7, sp, #8
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	607a      	str	r2, [r7, #4]
 8001802:	461a      	mov	r2, r3
 8001804:	460b      	mov	r3, r1
 8001806:	817b      	strh	r3, [r7, #10]
 8001808:	4613      	mov	r3, r2
 800180a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001812:	b2db      	uxtb	r3, r3
 8001814:	2b20      	cmp	r3, #32
 8001816:	f040 80db 	bne.w	80019d0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001820:	2b01      	cmp	r3, #1
 8001822:	d101      	bne.n	8001828 <HAL_I2C_Master_Receive+0x30>
 8001824:	2302      	movs	r3, #2
 8001826:	e0d4      	b.n	80019d2 <HAL_I2C_Master_Receive+0x1da>
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2201      	movs	r2, #1
 800182c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001830:	f7ff fb60 	bl	8000ef4 <HAL_GetTick>
 8001834:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	9300      	str	r3, [sp, #0]
 800183a:	2319      	movs	r3, #25
 800183c:	2201      	movs	r2, #1
 800183e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001842:	68f8      	ldr	r0, [r7, #12]
 8001844:	f000 f8f2 	bl	8001a2c <I2C_WaitOnFlagUntilTimeout>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e0bf      	b.n	80019d2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2222      	movs	r2, #34	@ 0x22
 8001856:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2210      	movs	r2, #16
 800185e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2200      	movs	r2, #0
 8001866:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	893a      	ldrh	r2, [r7, #8]
 8001872:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2200      	movs	r2, #0
 8001878:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800187e:	b29b      	uxth	r3, r3
 8001880:	2bff      	cmp	r3, #255	@ 0xff
 8001882:	d90e      	bls.n	80018a2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	22ff      	movs	r2, #255	@ 0xff
 8001888:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800188e:	b2da      	uxtb	r2, r3
 8001890:	8979      	ldrh	r1, [r7, #10]
 8001892:	4b52      	ldr	r3, [pc, #328]	@ (80019dc <HAL_I2C_Master_Receive+0x1e4>)
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800189a:	68f8      	ldr	r0, [r7, #12]
 800189c:	f000 fb16 	bl	8001ecc <I2C_TransferConfig>
 80018a0:	e06d      	b.n	800197e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	8979      	ldrh	r1, [r7, #10]
 80018b4:	4b49      	ldr	r3, [pc, #292]	@ (80019dc <HAL_I2C_Master_Receive+0x1e4>)
 80018b6:	9300      	str	r3, [sp, #0]
 80018b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80018bc:	68f8      	ldr	r0, [r7, #12]
 80018be:	f000 fb05 	bl	8001ecc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80018c2:	e05c      	b.n	800197e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018c4:	697a      	ldr	r2, [r7, #20]
 80018c6:	6a39      	ldr	r1, [r7, #32]
 80018c8:	68f8      	ldr	r0, [r7, #12]
 80018ca:	f000 f993 	bl	8001bf4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e07c      	b.n	80019d2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ea:	1c5a      	adds	r2, r3, #1
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018f4:	3b01      	subs	r3, #1
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001900:	b29b      	uxth	r3, r3
 8001902:	3b01      	subs	r3, #1
 8001904:	b29a      	uxth	r2, r3
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800190e:	b29b      	uxth	r3, r3
 8001910:	2b00      	cmp	r3, #0
 8001912:	d034      	beq.n	800197e <HAL_I2C_Master_Receive+0x186>
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001918:	2b00      	cmp	r3, #0
 800191a:	d130      	bne.n	800197e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	6a3b      	ldr	r3, [r7, #32]
 8001922:	2200      	movs	r2, #0
 8001924:	2180      	movs	r1, #128	@ 0x80
 8001926:	68f8      	ldr	r0, [r7, #12]
 8001928:	f000 f880 	bl	8001a2c <I2C_WaitOnFlagUntilTimeout>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e04d      	b.n	80019d2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800193a:	b29b      	uxth	r3, r3
 800193c:	2bff      	cmp	r3, #255	@ 0xff
 800193e:	d90e      	bls.n	800195e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	22ff      	movs	r2, #255	@ 0xff
 8001944:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800194a:	b2da      	uxtb	r2, r3
 800194c:	8979      	ldrh	r1, [r7, #10]
 800194e:	2300      	movs	r3, #0
 8001950:	9300      	str	r3, [sp, #0]
 8001952:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001956:	68f8      	ldr	r0, [r7, #12]
 8001958:	f000 fab8 	bl	8001ecc <I2C_TransferConfig>
 800195c:	e00f      	b.n	800197e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001962:	b29a      	uxth	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800196c:	b2da      	uxtb	r2, r3
 800196e:	8979      	ldrh	r1, [r7, #10]
 8001970:	2300      	movs	r3, #0
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001978:	68f8      	ldr	r0, [r7, #12]
 800197a:	f000 faa7 	bl	8001ecc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001982:	b29b      	uxth	r3, r3
 8001984:	2b00      	cmp	r3, #0
 8001986:	d19d      	bne.n	80018c4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001988:	697a      	ldr	r2, [r7, #20]
 800198a:	6a39      	ldr	r1, [r7, #32]
 800198c:	68f8      	ldr	r0, [r7, #12]
 800198e:	f000 f8ed 	bl	8001b6c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e01a      	b.n	80019d2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2220      	movs	r2, #32
 80019a2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6859      	ldr	r1, [r3, #4]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	4b0c      	ldr	r3, [pc, #48]	@ (80019e0 <HAL_I2C_Master_Receive+0x1e8>)
 80019b0:	400b      	ands	r3, r1
 80019b2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2220      	movs	r2, #32
 80019b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80019cc:	2300      	movs	r3, #0
 80019ce:	e000      	b.n	80019d2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80019d0:	2302      	movs	r3, #2
  }
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3718      	adds	r7, #24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	80002400 	.word	0x80002400
 80019e0:	fe00e800 	.word	0xfe00e800

080019e4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d103      	bne.n	8001a02 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2200      	movs	r2, #0
 8001a00:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d007      	beq.n	8001a20 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	699a      	ldr	r2, [r3, #24]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f042 0201 	orr.w	r2, r2, #1
 8001a1e:	619a      	str	r2, [r3, #24]
  }
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	603b      	str	r3, [r7, #0]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a3c:	e03b      	b.n	8001ab6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	6839      	ldr	r1, [r7, #0]
 8001a42:	68f8      	ldr	r0, [r7, #12]
 8001a44:	f000 f962 	bl	8001d0c <I2C_IsErrorOccurred>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e041      	b.n	8001ad6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a58:	d02d      	beq.n	8001ab6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a5a:	f7ff fa4b 	bl	8000ef4 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	683a      	ldr	r2, [r7, #0]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d302      	bcc.n	8001a70 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d122      	bne.n	8001ab6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	699a      	ldr	r2, [r3, #24]
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	68ba      	ldr	r2, [r7, #8]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	bf0c      	ite	eq
 8001a80:	2301      	moveq	r3, #1
 8001a82:	2300      	movne	r3, #0
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	461a      	mov	r2, r3
 8001a88:	79fb      	ldrb	r3, [r7, #7]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d113      	bne.n	8001ab6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a92:	f043 0220 	orr.w	r2, r3, #32
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2220      	movs	r2, #32
 8001a9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e00f      	b.n	8001ad6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	699a      	ldr	r2, [r3, #24]
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	68ba      	ldr	r2, [r7, #8]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	bf0c      	ite	eq
 8001ac6:	2301      	moveq	r3, #1
 8001ac8:	2300      	movne	r3, #0
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	461a      	mov	r2, r3
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d0b4      	beq.n	8001a3e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b084      	sub	sp, #16
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	60f8      	str	r0, [r7, #12]
 8001ae6:	60b9      	str	r1, [r7, #8]
 8001ae8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001aea:	e033      	b.n	8001b54 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	68b9      	ldr	r1, [r7, #8]
 8001af0:	68f8      	ldr	r0, [r7, #12]
 8001af2:	f000 f90b 	bl	8001d0c <I2C_IsErrorOccurred>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e031      	b.n	8001b64 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b06:	d025      	beq.n	8001b54 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b08:	f7ff f9f4 	bl	8000ef4 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	68ba      	ldr	r2, [r7, #8]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d302      	bcc.n	8001b1e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d11a      	bne.n	8001b54 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d013      	beq.n	8001b54 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b30:	f043 0220 	orr.w	r2, r3, #32
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2220      	movs	r2, #32
 8001b3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e007      	b.n	8001b64 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	699b      	ldr	r3, [r3, #24]
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d1c4      	bne.n	8001aec <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b78:	e02f      	b.n	8001bda <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	68b9      	ldr	r1, [r7, #8]
 8001b7e:	68f8      	ldr	r0, [r7, #12]
 8001b80:	f000 f8c4 	bl	8001d0c <I2C_IsErrorOccurred>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e02d      	b.n	8001bea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b8e:	f7ff f9b1 	bl	8000ef4 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	68ba      	ldr	r2, [r7, #8]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d302      	bcc.n	8001ba4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d11a      	bne.n	8001bda <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	f003 0320 	and.w	r3, r3, #32
 8001bae:	2b20      	cmp	r3, #32
 8001bb0:	d013      	beq.n	8001bda <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb6:	f043 0220 	orr.w	r2, r3, #32
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2220      	movs	r2, #32
 8001bc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e007      	b.n	8001bea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	f003 0320 	and.w	r3, r3, #32
 8001be4:	2b20      	cmp	r3, #32
 8001be6:	d1c8      	bne.n	8001b7a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
	...

08001bf4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c00:	2300      	movs	r3, #0
 8001c02:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8001c04:	e071      	b.n	8001cea <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	68b9      	ldr	r1, [r7, #8]
 8001c0a:	68f8      	ldr	r0, [r7, #12]
 8001c0c:	f000 f87e 	bl	8001d0c <I2C_IsErrorOccurred>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	f003 0320 	and.w	r3, r3, #32
 8001c24:	2b20      	cmp	r3, #32
 8001c26:	d13b      	bne.n	8001ca0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8001c28:	7dfb      	ldrb	r3, [r7, #23]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d138      	bne.n	8001ca0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	2b04      	cmp	r3, #4
 8001c3a:	d105      	bne.n	8001c48 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8001c44:	2300      	movs	r3, #0
 8001c46:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	f003 0310 	and.w	r3, r3, #16
 8001c52:	2b10      	cmp	r3, #16
 8001c54:	d121      	bne.n	8001c9a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2210      	movs	r2, #16
 8001c5c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2204      	movs	r2, #4
 8001c62:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2220      	movs	r2, #32
 8001c6a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6859      	ldr	r1, [r3, #4]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	4b24      	ldr	r3, [pc, #144]	@ (8001d08 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8001c78:	400b      	ands	r3, r1
 8001c7a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2220      	movs	r2, #32
 8001c80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	75fb      	strb	r3, [r7, #23]
 8001c98:	e002      	b.n	8001ca0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8001ca0:	f7ff f928 	bl	8000ef4 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	68ba      	ldr	r2, [r7, #8]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d302      	bcc.n	8001cb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d119      	bne.n	8001cea <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8001cb6:	7dfb      	ldrb	r3, [r7, #23]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d116      	bne.n	8001cea <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	f003 0304 	and.w	r3, r3, #4
 8001cc6:	2b04      	cmp	r3, #4
 8001cc8:	d00f      	beq.n	8001cea <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cce:	f043 0220 	orr.w	r2, r3, #32
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2220      	movs	r2, #32
 8001cda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	f003 0304 	and.w	r3, r3, #4
 8001cf4:	2b04      	cmp	r3, #4
 8001cf6:	d002      	beq.n	8001cfe <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8001cf8:	7dfb      	ldrb	r3, [r7, #23]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d083      	beq.n	8001c06 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8001cfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3718      	adds	r7, #24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	fe00e800 	.word	0xfe00e800

08001d0c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08a      	sub	sp, #40	@ 0x28
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	f003 0310 	and.w	r3, r3, #16
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d068      	beq.n	8001e0a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2210      	movs	r2, #16
 8001d3e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001d40:	e049      	b.n	8001dd6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d48:	d045      	beq.n	8001dd6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d4a:	f7ff f8d3 	bl	8000ef4 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	68ba      	ldr	r2, [r7, #8]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d302      	bcc.n	8001d60 <I2C_IsErrorOccurred+0x54>
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d13a      	bne.n	8001dd6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d6a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001d72:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d82:	d121      	bne.n	8001dc8 <I2C_IsErrorOccurred+0xbc>
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001d8a:	d01d      	beq.n	8001dc8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001d8c:	7cfb      	ldrb	r3, [r7, #19]
 8001d8e:	2b20      	cmp	r3, #32
 8001d90:	d01a      	beq.n	8001dc8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	685a      	ldr	r2, [r3, #4]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001da0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001da2:	f7ff f8a7 	bl	8000ef4 <HAL_GetTick>
 8001da6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001da8:	e00e      	b.n	8001dc8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001daa:	f7ff f8a3 	bl	8000ef4 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b19      	cmp	r3, #25
 8001db6:	d907      	bls.n	8001dc8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001db8:	6a3b      	ldr	r3, [r7, #32]
 8001dba:	f043 0320 	orr.w	r3, r3, #32
 8001dbe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001dc6:	e006      	b.n	8001dd6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	f003 0320 	and.w	r3, r3, #32
 8001dd2:	2b20      	cmp	r3, #32
 8001dd4:	d1e9      	bne.n	8001daa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	f003 0320 	and.w	r3, r3, #32
 8001de0:	2b20      	cmp	r3, #32
 8001de2:	d003      	beq.n	8001dec <I2C_IsErrorOccurred+0xe0>
 8001de4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d0aa      	beq.n	8001d42 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001dec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d103      	bne.n	8001dfc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2220      	movs	r2, #32
 8001dfa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001dfc:	6a3b      	ldr	r3, [r7, #32]
 8001dfe:	f043 0304 	orr.w	r3, r3, #4
 8001e02:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d00b      	beq.n	8001e34 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001e1c:	6a3b      	ldr	r3, [r7, #32]
 8001e1e:	f043 0301 	orr.w	r3, r3, #1
 8001e22:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e2c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00b      	beq.n	8001e56 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001e3e:	6a3b      	ldr	r3, [r7, #32]
 8001e40:	f043 0308 	orr.w	r3, r3, #8
 8001e44:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e4e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d00b      	beq.n	8001e78 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001e60:	6a3b      	ldr	r3, [r7, #32]
 8001e62:	f043 0302 	orr.w	r3, r3, #2
 8001e66:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e70:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001e78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d01c      	beq.n	8001eba <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	f7ff fdaf 	bl	80019e4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	6859      	ldr	r1, [r3, #4]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	4b0d      	ldr	r3, [pc, #52]	@ (8001ec8 <I2C_IsErrorOccurred+0x1bc>)
 8001e92:	400b      	ands	r3, r1
 8001e94:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001e9a:	6a3b      	ldr	r3, [r7, #32]
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2220      	movs	r2, #32
 8001ea6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001eba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3728      	adds	r7, #40	@ 0x28
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	fe00e800 	.word	0xfe00e800

08001ecc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b087      	sub	sp, #28
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	607b      	str	r3, [r7, #4]
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	817b      	strh	r3, [r7, #10]
 8001eda:	4613      	mov	r3, r2
 8001edc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ede:	897b      	ldrh	r3, [r7, #10]
 8001ee0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001ee4:	7a7b      	ldrb	r3, [r7, #9]
 8001ee6:	041b      	lsls	r3, r3, #16
 8001ee8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001eec:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ef2:	6a3b      	ldr	r3, [r7, #32]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001efa:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	6a3b      	ldr	r3, [r7, #32]
 8001f04:	0d5b      	lsrs	r3, r3, #21
 8001f06:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001f0a:	4b08      	ldr	r3, [pc, #32]	@ (8001f2c <I2C_TransferConfig+0x60>)
 8001f0c:	430b      	orrs	r3, r1
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	ea02 0103 	and.w	r1, r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	697a      	ldr	r2, [r7, #20]
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001f1e:	bf00      	nop
 8001f20:	371c      	adds	r7, #28
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	03ff63ff 	.word	0x03ff63ff

08001f30 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b20      	cmp	r3, #32
 8001f44:	d138      	bne.n	8001fb8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d101      	bne.n	8001f54 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f50:	2302      	movs	r3, #2
 8001f52:	e032      	b.n	8001fba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2224      	movs	r2, #36	@ 0x24
 8001f60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f022 0201 	bic.w	r2, r2, #1
 8001f72:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001f82:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6819      	ldr	r1, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	430a      	orrs	r2, r1
 8001f92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f042 0201 	orr.w	r2, r2, #1
 8001fa2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2220      	movs	r2, #32
 8001fa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	e000      	b.n	8001fba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001fb8:	2302      	movs	r3, #2
  }
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b085      	sub	sp, #20
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
 8001fce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	2b20      	cmp	r3, #32
 8001fda:	d139      	bne.n	8002050 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d101      	bne.n	8001fea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	e033      	b.n	8002052 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2201      	movs	r2, #1
 8001fee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2224      	movs	r2, #36	@ 0x24
 8001ff6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 0201 	bic.w	r2, r2, #1
 8002008:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002018:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	021b      	lsls	r3, r3, #8
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	4313      	orrs	r3, r2
 8002022:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f042 0201 	orr.w	r2, r2, #1
 800203a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2220      	movs	r2, #32
 8002040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800204c:	2300      	movs	r3, #0
 800204e:	e000      	b.n	8002052 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002050:	2302      	movs	r3, #2
  }
}
 8002052:	4618      	mov	r0, r3
 8002054:	3714      	adds	r7, #20
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
	...

08002060 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b088      	sub	sp, #32
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d102      	bne.n	8002074 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	f000 bc28 	b.w	80028c4 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002074:	4b94      	ldr	r3, [pc, #592]	@ (80022c8 <HAL_RCC_OscConfig+0x268>)
 8002076:	69db      	ldr	r3, [r3, #28]
 8002078:	f003 0318 	and.w	r3, r3, #24
 800207c:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800207e:	4b92      	ldr	r3, [pc, #584]	@ (80022c8 <HAL_RCC_OscConfig+0x268>)
 8002080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0310 	and.w	r3, r3, #16
 8002090:	2b00      	cmp	r3, #0
 8002092:	d05b      	beq.n	800214c <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	2b08      	cmp	r3, #8
 8002098:	d005      	beq.n	80020a6 <HAL_RCC_OscConfig+0x46>
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	2b18      	cmp	r3, #24
 800209e:	d114      	bne.n	80020ca <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d111      	bne.n	80020ca <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d102      	bne.n	80020b4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	f000 bc08 	b.w	80028c4 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80020b4:	4b84      	ldr	r3, [pc, #528]	@ (80022c8 <HAL_RCC_OscConfig+0x268>)
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	041b      	lsls	r3, r3, #16
 80020c2:	4981      	ldr	r1, [pc, #516]	@ (80022c8 <HAL_RCC_OscConfig+0x268>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80020c8:	e040      	b.n	800214c <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d023      	beq.n	800211a <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80020d2:	4b7d      	ldr	r3, [pc, #500]	@ (80022c8 <HAL_RCC_OscConfig+0x268>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a7c      	ldr	r2, [pc, #496]	@ (80022c8 <HAL_RCC_OscConfig+0x268>)
 80020d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020de:	f7fe ff09 	bl	8000ef4 <HAL_GetTick>
 80020e2:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80020e4:	e008      	b.n	80020f8 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80020e6:	f7fe ff05 	bl	8000ef4 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e3e5      	b.n	80028c4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80020f8:	4b73      	ldr	r3, [pc, #460]	@ (80022c8 <HAL_RCC_OscConfig+0x268>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002100:	2b00      	cmp	r3, #0
 8002102:	d0f0      	beq.n	80020e6 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002104:	4b70      	ldr	r3, [pc, #448]	@ (80022c8 <HAL_RCC_OscConfig+0x268>)
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	041b      	lsls	r3, r3, #16
 8002112:	496d      	ldr	r1, [pc, #436]	@ (80022c8 <HAL_RCC_OscConfig+0x268>)
 8002114:	4313      	orrs	r3, r2
 8002116:	618b      	str	r3, [r1, #24]
 8002118:	e018      	b.n	800214c <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800211a:	4b6b      	ldr	r3, [pc, #428]	@ (80022c8 <HAL_RCC_OscConfig+0x268>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a6a      	ldr	r2, [pc, #424]	@ (80022c8 <HAL_RCC_OscConfig+0x268>)
 8002120:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002124:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002126:	f7fe fee5 	bl	8000ef4 <HAL_GetTick>
 800212a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800212c:	e008      	b.n	8002140 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800212e:	f7fe fee1 	bl	8000ef4 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e3c1      	b.n	80028c4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002140:	4b61      	ldr	r3, [pc, #388]	@ (80022c8 <HAL_RCC_OscConfig+0x268>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1f0      	bne.n	800212e <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	2b00      	cmp	r3, #0
 8002156:	f000 80a0 	beq.w	800229a <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	2b10      	cmp	r3, #16
 800215e:	d005      	beq.n	800216c <HAL_RCC_OscConfig+0x10c>
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	2b18      	cmp	r3, #24
 8002164:	d109      	bne.n	800217a <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	2b03      	cmp	r3, #3
 800216a:	d106      	bne.n	800217a <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	2b00      	cmp	r3, #0
 8002172:	f040 8092 	bne.w	800229a <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e3a4      	b.n	80028c4 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002182:	d106      	bne.n	8002192 <HAL_RCC_OscConfig+0x132>
 8002184:	4b50      	ldr	r3, [pc, #320]	@ (80022c8 <HAL_RCC_OscConfig+0x268>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a4f      	ldr	r2, [pc, #316]	@ (80022c8 <HAL_RCC_OscConfig+0x268>)
 800218a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800218e:	6013      	str	r3, [r2, #0]
 8002190:	e058      	b.n	8002244 <HAL_RCC_OscConfig+0x1e4>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d112      	bne.n	80021c0 <HAL_RCC_OscConfig+0x160>
 800219a:	4b4b      	ldr	r3, [pc, #300]	@ (80022c8 <HAL_RCC_OscConfig+0x268>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a4a      	ldr	r2, [pc, #296]	@ (80022c8 <HAL_RCC_OscConfig+0x268>)
 80021a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021a4:	6013      	str	r3, [r2, #0]
 80021a6:	4b48      	ldr	r3, [pc, #288]	@ (80022c8 <HAL_RCC_OscConfig+0x268>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a47      	ldr	r2, [pc, #284]	@ (80022c8 <HAL_RCC_OscConfig+0x268>)
 80021ac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80021b0:	6013      	str	r3, [r2, #0]
 80021b2:	4b45      	ldr	r3, [pc, #276]	@ (80022c8 <HAL_RCC_OscConfig+0x268>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a44      	ldr	r2, [pc, #272]	@ (80022c8 <HAL_RCC_OscConfig+0x268>)
 80021b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021bc:	6013      	str	r3, [r2, #0]
 80021be:	e041      	b.n	8002244 <HAL_RCC_OscConfig+0x1e4>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021c8:	d112      	bne.n	80021f0 <HAL_RCC_OscConfig+0x190>
 80021ca:	4b3f      	ldr	r3, [pc, #252]	@ (80022c8 <HAL_RCC_OscConfig+0x268>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a3e      	ldr	r2, [pc, #248]	@ (80022c8 <HAL_RCC_OscConfig+0x268>)
 80021d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	4b3c      	ldr	r3, [pc, #240]	@ (80022c8 <HAL_RCC_OscConfig+0x268>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a3b      	ldr	r2, [pc, #236]	@ (80022c8 <HAL_RCC_OscConfig+0x268>)
 80021dc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80021e0:	6013      	str	r3, [r2, #0]
 80021e2:	4b39      	ldr	r3, [pc, #228]	@ (80022c8 <HAL_RCC_OscConfig+0x268>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a38      	ldr	r2, [pc, #224]	@ (80022c8 <HAL_RCC_OscConfig+0x268>)
 80021e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021ec:	6013      	str	r3, [r2, #0]
 80021ee:	e029      	b.n	8002244 <HAL_RCC_OscConfig+0x1e4>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80021f8:	d112      	bne.n	8002220 <HAL_RCC_OscConfig+0x1c0>
 80021fa:	4b33      	ldr	r3, [pc, #204]	@ (80022c8 <HAL_RCC_OscConfig+0x268>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a32      	ldr	r2, [pc, #200]	@ (80022c8 <HAL_RCC_OscConfig+0x268>)
 8002200:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002204:	6013      	str	r3, [r2, #0]
 8002206:	4b30      	ldr	r3, [pc, #192]	@ (80022c8 <HAL_RCC_OscConfig+0x268>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a2f      	ldr	r2, [pc, #188]	@ (80022c8 <HAL_RCC_OscConfig+0x268>)
 800220c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002210:	6013      	str	r3, [r2, #0]
 8002212:	4b2d      	ldr	r3, [pc, #180]	@ (80022c8 <HAL_RCC_OscConfig+0x268>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a2c      	ldr	r2, [pc, #176]	@ (80022c8 <HAL_RCC_OscConfig+0x268>)
 8002218:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800221c:	6013      	str	r3, [r2, #0]
 800221e:	e011      	b.n	8002244 <HAL_RCC_OscConfig+0x1e4>
 8002220:	4b29      	ldr	r3, [pc, #164]	@ (80022c8 <HAL_RCC_OscConfig+0x268>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a28      	ldr	r2, [pc, #160]	@ (80022c8 <HAL_RCC_OscConfig+0x268>)
 8002226:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800222a:	6013      	str	r3, [r2, #0]
 800222c:	4b26      	ldr	r3, [pc, #152]	@ (80022c8 <HAL_RCC_OscConfig+0x268>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a25      	ldr	r2, [pc, #148]	@ (80022c8 <HAL_RCC_OscConfig+0x268>)
 8002232:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002236:	6013      	str	r3, [r2, #0]
 8002238:	4b23      	ldr	r3, [pc, #140]	@ (80022c8 <HAL_RCC_OscConfig+0x268>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a22      	ldr	r2, [pc, #136]	@ (80022c8 <HAL_RCC_OscConfig+0x268>)
 800223e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002242:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d013      	beq.n	8002274 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800224c:	f7fe fe52 	bl	8000ef4 <HAL_GetTick>
 8002250:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002254:	f7fe fe4e 	bl	8000ef4 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b64      	cmp	r3, #100	@ 0x64
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e32e      	b.n	80028c4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002266:	4b18      	ldr	r3, [pc, #96]	@ (80022c8 <HAL_RCC_OscConfig+0x268>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d0f0      	beq.n	8002254 <HAL_RCC_OscConfig+0x1f4>
 8002272:	e012      	b.n	800229a <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002274:	f7fe fe3e 	bl	8000ef4 <HAL_GetTick>
 8002278:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800227c:	f7fe fe3a 	bl	8000ef4 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b64      	cmp	r3, #100	@ 0x64
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e31a      	b.n	80028c4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800228e:	4b0e      	ldr	r3, [pc, #56]	@ (80022c8 <HAL_RCC_OscConfig+0x268>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1f0      	bne.n	800227c <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f000 809a 	beq.w	80023dc <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d005      	beq.n	80022ba <HAL_RCC_OscConfig+0x25a>
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	2b18      	cmp	r3, #24
 80022b2:	d149      	bne.n	8002348 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d146      	bne.n	8002348 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d104      	bne.n	80022cc <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e2fe      	b.n	80028c4 <HAL_RCC_OscConfig+0x864>
 80022c6:	bf00      	nop
 80022c8:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d11c      	bne.n	800230c <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80022d2:	4b9a      	ldr	r3, [pc, #616]	@ (800253c <HAL_RCC_OscConfig+0x4dc>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0218 	and.w	r2, r3, #24
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d014      	beq.n	800230c <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80022e2:	4b96      	ldr	r3, [pc, #600]	@ (800253c <HAL_RCC_OscConfig+0x4dc>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f023 0218 	bic.w	r2, r3, #24
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	4993      	ldr	r1, [pc, #588]	@ (800253c <HAL_RCC_OscConfig+0x4dc>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80022f4:	f000 fdd0 	bl	8002e98 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80022f8:	4b91      	ldr	r3, [pc, #580]	@ (8002540 <HAL_RCC_OscConfig+0x4e0>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7fe fd6f 	bl	8000de0 <HAL_InitTick>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e2db      	b.n	80028c4 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230c:	f7fe fdf2 	bl	8000ef4 <HAL_GetTick>
 8002310:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002314:	f7fe fdee 	bl	8000ef4 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e2ce      	b.n	80028c4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002326:	4b85      	ldr	r3, [pc, #532]	@ (800253c <HAL_RCC_OscConfig+0x4dc>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d0f0      	beq.n	8002314 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002332:	4b82      	ldr	r3, [pc, #520]	@ (800253c <HAL_RCC_OscConfig+0x4dc>)
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	041b      	lsls	r3, r3, #16
 8002340:	497e      	ldr	r1, [pc, #504]	@ (800253c <HAL_RCC_OscConfig+0x4dc>)
 8002342:	4313      	orrs	r3, r2
 8002344:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002346:	e049      	b.n	80023dc <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d02c      	beq.n	80023aa <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002350:	4b7a      	ldr	r3, [pc, #488]	@ (800253c <HAL_RCC_OscConfig+0x4dc>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f023 0218 	bic.w	r2, r3, #24
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	4977      	ldr	r1, [pc, #476]	@ (800253c <HAL_RCC_OscConfig+0x4dc>)
 800235e:	4313      	orrs	r3, r2
 8002360:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8002362:	4b76      	ldr	r3, [pc, #472]	@ (800253c <HAL_RCC_OscConfig+0x4dc>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a75      	ldr	r2, [pc, #468]	@ (800253c <HAL_RCC_OscConfig+0x4dc>)
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800236e:	f7fe fdc1 	bl	8000ef4 <HAL_GetTick>
 8002372:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002374:	e008      	b.n	8002388 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002376:	f7fe fdbd 	bl	8000ef4 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e29d      	b.n	80028c4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002388:	4b6c      	ldr	r3, [pc, #432]	@ (800253c <HAL_RCC_OscConfig+0x4dc>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d0f0      	beq.n	8002376 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002394:	4b69      	ldr	r3, [pc, #420]	@ (800253c <HAL_RCC_OscConfig+0x4dc>)
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	041b      	lsls	r3, r3, #16
 80023a2:	4966      	ldr	r1, [pc, #408]	@ (800253c <HAL_RCC_OscConfig+0x4dc>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	610b      	str	r3, [r1, #16]
 80023a8:	e018      	b.n	80023dc <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023aa:	4b64      	ldr	r3, [pc, #400]	@ (800253c <HAL_RCC_OscConfig+0x4dc>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a63      	ldr	r2, [pc, #396]	@ (800253c <HAL_RCC_OscConfig+0x4dc>)
 80023b0:	f023 0301 	bic.w	r3, r3, #1
 80023b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b6:	f7fe fd9d 	bl	8000ef4 <HAL_GetTick>
 80023ba:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023bc:	e008      	b.n	80023d0 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80023be:	f7fe fd99 	bl	8000ef4 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e279      	b.n	80028c4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023d0:	4b5a      	ldr	r3, [pc, #360]	@ (800253c <HAL_RCC_OscConfig+0x4dc>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1f0      	bne.n	80023be <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0308 	and.w	r3, r3, #8
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d03c      	beq.n	8002462 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d01c      	beq.n	800242a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023f0:	4b52      	ldr	r3, [pc, #328]	@ (800253c <HAL_RCC_OscConfig+0x4dc>)
 80023f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023f6:	4a51      	ldr	r2, [pc, #324]	@ (800253c <HAL_RCC_OscConfig+0x4dc>)
 80023f8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80023fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002400:	f7fe fd78 	bl	8000ef4 <HAL_GetTick>
 8002404:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002408:	f7fe fd74 	bl	8000ef4 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e254      	b.n	80028c4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800241a:	4b48      	ldr	r3, [pc, #288]	@ (800253c <HAL_RCC_OscConfig+0x4dc>)
 800241c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002420:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0ef      	beq.n	8002408 <HAL_RCC_OscConfig+0x3a8>
 8002428:	e01b      	b.n	8002462 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800242a:	4b44      	ldr	r3, [pc, #272]	@ (800253c <HAL_RCC_OscConfig+0x4dc>)
 800242c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002430:	4a42      	ldr	r2, [pc, #264]	@ (800253c <HAL_RCC_OscConfig+0x4dc>)
 8002432:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002436:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800243a:	f7fe fd5b 	bl	8000ef4 <HAL_GetTick>
 800243e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002440:	e008      	b.n	8002454 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002442:	f7fe fd57 	bl	8000ef4 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e237      	b.n	80028c4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002454:	4b39      	ldr	r3, [pc, #228]	@ (800253c <HAL_RCC_OscConfig+0x4dc>)
 8002456:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800245a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1ef      	bne.n	8002442 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0304 	and.w	r3, r3, #4
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 80d2 	beq.w	8002614 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002470:	4b34      	ldr	r3, [pc, #208]	@ (8002544 <HAL_RCC_OscConfig+0x4e4>)
 8002472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	2b00      	cmp	r3, #0
 800247a:	d118      	bne.n	80024ae <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800247c:	4b31      	ldr	r3, [pc, #196]	@ (8002544 <HAL_RCC_OscConfig+0x4e4>)
 800247e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002480:	4a30      	ldr	r2, [pc, #192]	@ (8002544 <HAL_RCC_OscConfig+0x4e4>)
 8002482:	f043 0301 	orr.w	r3, r3, #1
 8002486:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002488:	f7fe fd34 	bl	8000ef4 <HAL_GetTick>
 800248c:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002490:	f7fe fd30 	bl	8000ef4 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e210      	b.n	80028c4 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80024a2:	4b28      	ldr	r3, [pc, #160]	@ (8002544 <HAL_RCC_OscConfig+0x4e4>)
 80024a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d0f0      	beq.n	8002490 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d108      	bne.n	80024c8 <HAL_RCC_OscConfig+0x468>
 80024b6:	4b21      	ldr	r3, [pc, #132]	@ (800253c <HAL_RCC_OscConfig+0x4dc>)
 80024b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024bc:	4a1f      	ldr	r2, [pc, #124]	@ (800253c <HAL_RCC_OscConfig+0x4dc>)
 80024be:	f043 0301 	orr.w	r3, r3, #1
 80024c2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80024c6:	e074      	b.n	80025b2 <HAL_RCC_OscConfig+0x552>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d118      	bne.n	8002502 <HAL_RCC_OscConfig+0x4a2>
 80024d0:	4b1a      	ldr	r3, [pc, #104]	@ (800253c <HAL_RCC_OscConfig+0x4dc>)
 80024d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024d6:	4a19      	ldr	r2, [pc, #100]	@ (800253c <HAL_RCC_OscConfig+0x4dc>)
 80024d8:	f023 0301 	bic.w	r3, r3, #1
 80024dc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80024e0:	4b16      	ldr	r3, [pc, #88]	@ (800253c <HAL_RCC_OscConfig+0x4dc>)
 80024e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024e6:	4a15      	ldr	r2, [pc, #84]	@ (800253c <HAL_RCC_OscConfig+0x4dc>)
 80024e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80024ec:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80024f0:	4b12      	ldr	r3, [pc, #72]	@ (800253c <HAL_RCC_OscConfig+0x4dc>)
 80024f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024f6:	4a11      	ldr	r2, [pc, #68]	@ (800253c <HAL_RCC_OscConfig+0x4dc>)
 80024f8:	f023 0304 	bic.w	r3, r3, #4
 80024fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002500:	e057      	b.n	80025b2 <HAL_RCC_OscConfig+0x552>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	2b05      	cmp	r3, #5
 8002508:	d11e      	bne.n	8002548 <HAL_RCC_OscConfig+0x4e8>
 800250a:	4b0c      	ldr	r3, [pc, #48]	@ (800253c <HAL_RCC_OscConfig+0x4dc>)
 800250c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002510:	4a0a      	ldr	r2, [pc, #40]	@ (800253c <HAL_RCC_OscConfig+0x4dc>)
 8002512:	f043 0304 	orr.w	r3, r3, #4
 8002516:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800251a:	4b08      	ldr	r3, [pc, #32]	@ (800253c <HAL_RCC_OscConfig+0x4dc>)
 800251c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002520:	4a06      	ldr	r2, [pc, #24]	@ (800253c <HAL_RCC_OscConfig+0x4dc>)
 8002522:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002526:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800252a:	4b04      	ldr	r3, [pc, #16]	@ (800253c <HAL_RCC_OscConfig+0x4dc>)
 800252c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002530:	4a02      	ldr	r2, [pc, #8]	@ (800253c <HAL_RCC_OscConfig+0x4dc>)
 8002532:	f043 0301 	orr.w	r3, r3, #1
 8002536:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800253a:	e03a      	b.n	80025b2 <HAL_RCC_OscConfig+0x552>
 800253c:	44020c00 	.word	0x44020c00
 8002540:	20000004 	.word	0x20000004
 8002544:	44020800 	.word	0x44020800
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	2b85      	cmp	r3, #133	@ 0x85
 800254e:	d118      	bne.n	8002582 <HAL_RCC_OscConfig+0x522>
 8002550:	4ba2      	ldr	r3, [pc, #648]	@ (80027dc <HAL_RCC_OscConfig+0x77c>)
 8002552:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002556:	4aa1      	ldr	r2, [pc, #644]	@ (80027dc <HAL_RCC_OscConfig+0x77c>)
 8002558:	f043 0304 	orr.w	r3, r3, #4
 800255c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002560:	4b9e      	ldr	r3, [pc, #632]	@ (80027dc <HAL_RCC_OscConfig+0x77c>)
 8002562:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002566:	4a9d      	ldr	r2, [pc, #628]	@ (80027dc <HAL_RCC_OscConfig+0x77c>)
 8002568:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800256c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002570:	4b9a      	ldr	r3, [pc, #616]	@ (80027dc <HAL_RCC_OscConfig+0x77c>)
 8002572:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002576:	4a99      	ldr	r2, [pc, #612]	@ (80027dc <HAL_RCC_OscConfig+0x77c>)
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002580:	e017      	b.n	80025b2 <HAL_RCC_OscConfig+0x552>
 8002582:	4b96      	ldr	r3, [pc, #600]	@ (80027dc <HAL_RCC_OscConfig+0x77c>)
 8002584:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002588:	4a94      	ldr	r2, [pc, #592]	@ (80027dc <HAL_RCC_OscConfig+0x77c>)
 800258a:	f023 0301 	bic.w	r3, r3, #1
 800258e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002592:	4b92      	ldr	r3, [pc, #584]	@ (80027dc <HAL_RCC_OscConfig+0x77c>)
 8002594:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002598:	4a90      	ldr	r2, [pc, #576]	@ (80027dc <HAL_RCC_OscConfig+0x77c>)
 800259a:	f023 0304 	bic.w	r3, r3, #4
 800259e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80025a2:	4b8e      	ldr	r3, [pc, #568]	@ (80027dc <HAL_RCC_OscConfig+0x77c>)
 80025a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025a8:	4a8c      	ldr	r2, [pc, #560]	@ (80027dc <HAL_RCC_OscConfig+0x77c>)
 80025aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80025ae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d016      	beq.n	80025e8 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ba:	f7fe fc9b 	bl	8000ef4 <HAL_GetTick>
 80025be:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025c0:	e00a      	b.n	80025d8 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c2:	f7fe fc97 	bl	8000ef4 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e175      	b.n	80028c4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025d8:	4b80      	ldr	r3, [pc, #512]	@ (80027dc <HAL_RCC_OscConfig+0x77c>)
 80025da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d0ed      	beq.n	80025c2 <HAL_RCC_OscConfig+0x562>
 80025e6:	e015      	b.n	8002614 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e8:	f7fe fc84 	bl	8000ef4 <HAL_GetTick>
 80025ec:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025ee:	e00a      	b.n	8002606 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025f0:	f7fe fc80 	bl	8000ef4 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025fe:	4293      	cmp	r3, r2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e15e      	b.n	80028c4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002606:	4b75      	ldr	r3, [pc, #468]	@ (80027dc <HAL_RCC_OscConfig+0x77c>)
 8002608:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1ed      	bne.n	80025f0 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0320 	and.w	r3, r3, #32
 800261c:	2b00      	cmp	r3, #0
 800261e:	d036      	beq.n	800268e <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002624:	2b00      	cmp	r3, #0
 8002626:	d019      	beq.n	800265c <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002628:	4b6c      	ldr	r3, [pc, #432]	@ (80027dc <HAL_RCC_OscConfig+0x77c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a6b      	ldr	r2, [pc, #428]	@ (80027dc <HAL_RCC_OscConfig+0x77c>)
 800262e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002632:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002634:	f7fe fc5e 	bl	8000ef4 <HAL_GetTick>
 8002638:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800263c:	f7fe fc5a 	bl	8000ef4 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e13a      	b.n	80028c4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800264e:	4b63      	ldr	r3, [pc, #396]	@ (80027dc <HAL_RCC_OscConfig+0x77c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d0f0      	beq.n	800263c <HAL_RCC_OscConfig+0x5dc>
 800265a:	e018      	b.n	800268e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800265c:	4b5f      	ldr	r3, [pc, #380]	@ (80027dc <HAL_RCC_OscConfig+0x77c>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a5e      	ldr	r2, [pc, #376]	@ (80027dc <HAL_RCC_OscConfig+0x77c>)
 8002662:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002666:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002668:	f7fe fc44 	bl	8000ef4 <HAL_GetTick>
 800266c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002670:	f7fe fc40 	bl	8000ef4 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e120      	b.n	80028c4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002682:	4b56      	ldr	r3, [pc, #344]	@ (80027dc <HAL_RCC_OscConfig+0x77c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f0      	bne.n	8002670 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002692:	2b00      	cmp	r3, #0
 8002694:	f000 8115 	beq.w	80028c2 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	2b18      	cmp	r3, #24
 800269c:	f000 80af 	beq.w	80027fe <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	f040 8086 	bne.w	80027b6 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80026aa:	4b4c      	ldr	r3, [pc, #304]	@ (80027dc <HAL_RCC_OscConfig+0x77c>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a4b      	ldr	r2, [pc, #300]	@ (80027dc <HAL_RCC_OscConfig+0x77c>)
 80026b0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b6:	f7fe fc1d 	bl	8000ef4 <HAL_GetTick>
 80026ba:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80026bc:	e008      	b.n	80026d0 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80026be:	f7fe fc19 	bl	8000ef4 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e0f9      	b.n	80028c4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80026d0:	4b42      	ldr	r3, [pc, #264]	@ (80027dc <HAL_RCC_OscConfig+0x77c>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1f0      	bne.n	80026be <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80026dc:	4b3f      	ldr	r3, [pc, #252]	@ (80027dc <HAL_RCC_OscConfig+0x77c>)
 80026de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80026e4:	f023 0303 	bic.w	r3, r3, #3
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80026f0:	0212      	lsls	r2, r2, #8
 80026f2:	430a      	orrs	r2, r1
 80026f4:	4939      	ldr	r1, [pc, #228]	@ (80027dc <HAL_RCC_OscConfig+0x77c>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	628b      	str	r3, [r1, #40]	@ 0x28
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026fe:	3b01      	subs	r3, #1
 8002700:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002708:	3b01      	subs	r3, #1
 800270a:	025b      	lsls	r3, r3, #9
 800270c:	b29b      	uxth	r3, r3
 800270e:	431a      	orrs	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002714:	3b01      	subs	r3, #1
 8002716:	041b      	lsls	r3, r3, #16
 8002718:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800271c:	431a      	orrs	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002722:	3b01      	subs	r3, #1
 8002724:	061b      	lsls	r3, r3, #24
 8002726:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800272a:	492c      	ldr	r1, [pc, #176]	@ (80027dc <HAL_RCC_OscConfig+0x77c>)
 800272c:	4313      	orrs	r3, r2
 800272e:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002730:	4b2a      	ldr	r3, [pc, #168]	@ (80027dc <HAL_RCC_OscConfig+0x77c>)
 8002732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002734:	4a29      	ldr	r2, [pc, #164]	@ (80027dc <HAL_RCC_OscConfig+0x77c>)
 8002736:	f023 0310 	bic.w	r3, r3, #16
 800273a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002740:	4a26      	ldr	r2, [pc, #152]	@ (80027dc <HAL_RCC_OscConfig+0x77c>)
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002746:	4b25      	ldr	r3, [pc, #148]	@ (80027dc <HAL_RCC_OscConfig+0x77c>)
 8002748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800274a:	4a24      	ldr	r2, [pc, #144]	@ (80027dc <HAL_RCC_OscConfig+0x77c>)
 800274c:	f043 0310 	orr.w	r3, r3, #16
 8002750:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8002752:	4b22      	ldr	r3, [pc, #136]	@ (80027dc <HAL_RCC_OscConfig+0x77c>)
 8002754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002756:	f023 020c 	bic.w	r2, r3, #12
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800275e:	491f      	ldr	r1, [pc, #124]	@ (80027dc <HAL_RCC_OscConfig+0x77c>)
 8002760:	4313      	orrs	r3, r2
 8002762:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8002764:	4b1d      	ldr	r3, [pc, #116]	@ (80027dc <HAL_RCC_OscConfig+0x77c>)
 8002766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002768:	f023 0220 	bic.w	r2, r3, #32
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002770:	491a      	ldr	r1, [pc, #104]	@ (80027dc <HAL_RCC_OscConfig+0x77c>)
 8002772:	4313      	orrs	r3, r2
 8002774:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002776:	4b19      	ldr	r3, [pc, #100]	@ (80027dc <HAL_RCC_OscConfig+0x77c>)
 8002778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800277a:	4a18      	ldr	r2, [pc, #96]	@ (80027dc <HAL_RCC_OscConfig+0x77c>)
 800277c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002780:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8002782:	4b16      	ldr	r3, [pc, #88]	@ (80027dc <HAL_RCC_OscConfig+0x77c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a15      	ldr	r2, [pc, #84]	@ (80027dc <HAL_RCC_OscConfig+0x77c>)
 8002788:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800278c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278e:	f7fe fbb1 	bl	8000ef4 <HAL_GetTick>
 8002792:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002794:	e008      	b.n	80027a8 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002796:	f7fe fbad 	bl	8000ef4 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e08d      	b.n	80028c4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80027a8:	4b0c      	ldr	r3, [pc, #48]	@ (80027dc <HAL_RCC_OscConfig+0x77c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d0f0      	beq.n	8002796 <HAL_RCC_OscConfig+0x736>
 80027b4:	e085      	b.n	80028c2 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80027b6:	4b09      	ldr	r3, [pc, #36]	@ (80027dc <HAL_RCC_OscConfig+0x77c>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a08      	ldr	r2, [pc, #32]	@ (80027dc <HAL_RCC_OscConfig+0x77c>)
 80027bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c2:	f7fe fb97 	bl	8000ef4 <HAL_GetTick>
 80027c6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80027c8:	e00a      	b.n	80027e0 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80027ca:	f7fe fb93 	bl	8000ef4 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d903      	bls.n	80027e0 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e073      	b.n	80028c4 <HAL_RCC_OscConfig+0x864>
 80027dc:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80027e0:	4b3a      	ldr	r3, [pc, #232]	@ (80028cc <HAL_RCC_OscConfig+0x86c>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1ee      	bne.n	80027ca <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80027ec:	4b37      	ldr	r3, [pc, #220]	@ (80028cc <HAL_RCC_OscConfig+0x86c>)
 80027ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f0:	4a36      	ldr	r2, [pc, #216]	@ (80028cc <HAL_RCC_OscConfig+0x86c>)
 80027f2:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80027f6:	f023 0303 	bic.w	r3, r3, #3
 80027fa:	6293      	str	r3, [r2, #40]	@ 0x28
 80027fc:	e061      	b.n	80028c2 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80027fe:	4b33      	ldr	r3, [pc, #204]	@ (80028cc <HAL_RCC_OscConfig+0x86c>)
 8002800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002802:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002804:	4b31      	ldr	r3, [pc, #196]	@ (80028cc <HAL_RCC_OscConfig+0x86c>)
 8002806:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002808:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800280e:	2b01      	cmp	r3, #1
 8002810:	d031      	beq.n	8002876 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	f003 0203 	and.w	r2, r3, #3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800281c:	429a      	cmp	r2, r3
 800281e:	d12a      	bne.n	8002876 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	0a1b      	lsrs	r3, r3, #8
 8002824:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800282c:	429a      	cmp	r2, r3
 800282e:	d122      	bne.n	8002876 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800283a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800283c:	429a      	cmp	r2, r3
 800283e:	d11a      	bne.n	8002876 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	0a5b      	lsrs	r3, r3, #9
 8002844:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800284c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800284e:	429a      	cmp	r2, r3
 8002850:	d111      	bne.n	8002876 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	0c1b      	lsrs	r3, r3, #16
 8002856:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800285e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002860:	429a      	cmp	r2, r3
 8002862:	d108      	bne.n	8002876 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	0e1b      	lsrs	r3, r3, #24
 8002868:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002870:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002872:	429a      	cmp	r2, r3
 8002874:	d001      	beq.n	800287a <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e024      	b.n	80028c4 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800287a:	4b14      	ldr	r3, [pc, #80]	@ (80028cc <HAL_RCC_OscConfig+0x86c>)
 800287c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800287e:	08db      	lsrs	r3, r3, #3
 8002880:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002888:	429a      	cmp	r2, r3
 800288a:	d01a      	beq.n	80028c2 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800288c:	4b0f      	ldr	r3, [pc, #60]	@ (80028cc <HAL_RCC_OscConfig+0x86c>)
 800288e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002890:	4a0e      	ldr	r2, [pc, #56]	@ (80028cc <HAL_RCC_OscConfig+0x86c>)
 8002892:	f023 0310 	bic.w	r3, r3, #16
 8002896:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002898:	f7fe fb2c 	bl	8000ef4 <HAL_GetTick>
 800289c:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800289e:	bf00      	nop
 80028a0:	f7fe fb28 	bl	8000ef4 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d0f9      	beq.n	80028a0 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028b0:	4a06      	ldr	r2, [pc, #24]	@ (80028cc <HAL_RCC_OscConfig+0x86c>)
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80028b6:	4b05      	ldr	r3, [pc, #20]	@ (80028cc <HAL_RCC_OscConfig+0x86c>)
 80028b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ba:	4a04      	ldr	r2, [pc, #16]	@ (80028cc <HAL_RCC_OscConfig+0x86c>)
 80028bc:	f043 0310 	orr.w	r3, r3, #16
 80028c0:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3720      	adds	r7, #32
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	44020c00 	.word	0x44020c00

080028d0 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d101      	bne.n	80028e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e19e      	b.n	8002c22 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028e4:	4b83      	ldr	r3, [pc, #524]	@ (8002af4 <HAL_RCC_ClockConfig+0x224>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 030f 	and.w	r3, r3, #15
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d910      	bls.n	8002914 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f2:	4b80      	ldr	r3, [pc, #512]	@ (8002af4 <HAL_RCC_ClockConfig+0x224>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f023 020f 	bic.w	r2, r3, #15
 80028fa:	497e      	ldr	r1, [pc, #504]	@ (8002af4 <HAL_RCC_ClockConfig+0x224>)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	4313      	orrs	r3, r2
 8002900:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002902:	4b7c      	ldr	r3, [pc, #496]	@ (8002af4 <HAL_RCC_ClockConfig+0x224>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 030f 	and.w	r3, r3, #15
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	429a      	cmp	r2, r3
 800290e:	d001      	beq.n	8002914 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e186      	b.n	8002c22 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0310 	and.w	r3, r3, #16
 800291c:	2b00      	cmp	r3, #0
 800291e:	d012      	beq.n	8002946 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	695a      	ldr	r2, [r3, #20]
 8002924:	4b74      	ldr	r3, [pc, #464]	@ (8002af8 <HAL_RCC_ClockConfig+0x228>)
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	0a1b      	lsrs	r3, r3, #8
 800292a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800292e:	429a      	cmp	r2, r3
 8002930:	d909      	bls.n	8002946 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002932:	4b71      	ldr	r3, [pc, #452]	@ (8002af8 <HAL_RCC_ClockConfig+0x228>)
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	021b      	lsls	r3, r3, #8
 8002940:	496d      	ldr	r1, [pc, #436]	@ (8002af8 <HAL_RCC_ClockConfig+0x228>)
 8002942:	4313      	orrs	r3, r2
 8002944:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0308 	and.w	r3, r3, #8
 800294e:	2b00      	cmp	r3, #0
 8002950:	d012      	beq.n	8002978 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	691a      	ldr	r2, [r3, #16]
 8002956:	4b68      	ldr	r3, [pc, #416]	@ (8002af8 <HAL_RCC_ClockConfig+0x228>)
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	091b      	lsrs	r3, r3, #4
 800295c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002960:	429a      	cmp	r2, r3
 8002962:	d909      	bls.n	8002978 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002964:	4b64      	ldr	r3, [pc, #400]	@ (8002af8 <HAL_RCC_ClockConfig+0x228>)
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	011b      	lsls	r3, r3, #4
 8002972:	4961      	ldr	r1, [pc, #388]	@ (8002af8 <HAL_RCC_ClockConfig+0x228>)
 8002974:	4313      	orrs	r3, r2
 8002976:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0304 	and.w	r3, r3, #4
 8002980:	2b00      	cmp	r3, #0
 8002982:	d010      	beq.n	80029a6 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68da      	ldr	r2, [r3, #12]
 8002988:	4b5b      	ldr	r3, [pc, #364]	@ (8002af8 <HAL_RCC_ClockConfig+0x228>)
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002990:	429a      	cmp	r2, r3
 8002992:	d908      	bls.n	80029a6 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002994:	4b58      	ldr	r3, [pc, #352]	@ (8002af8 <HAL_RCC_ClockConfig+0x228>)
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	4955      	ldr	r1, [pc, #340]	@ (8002af8 <HAL_RCC_ClockConfig+0x228>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d010      	beq.n	80029d4 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689a      	ldr	r2, [r3, #8]
 80029b6:	4b50      	ldr	r3, [pc, #320]	@ (8002af8 <HAL_RCC_ClockConfig+0x228>)
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	f003 030f 	and.w	r3, r3, #15
 80029be:	429a      	cmp	r2, r3
 80029c0:	d908      	bls.n	80029d4 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80029c2:	4b4d      	ldr	r3, [pc, #308]	@ (8002af8 <HAL_RCC_ClockConfig+0x228>)
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	f023 020f 	bic.w	r2, r3, #15
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	494a      	ldr	r1, [pc, #296]	@ (8002af8 <HAL_RCC_ClockConfig+0x228>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f000 8093 	beq.w	8002b08 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	2b03      	cmp	r3, #3
 80029e8:	d107      	bne.n	80029fa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80029ea:	4b43      	ldr	r3, [pc, #268]	@ (8002af8 <HAL_RCC_ClockConfig+0x228>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d121      	bne.n	8002a3a <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e113      	b.n	8002c22 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d107      	bne.n	8002a12 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a02:	4b3d      	ldr	r3, [pc, #244]	@ (8002af8 <HAL_RCC_ClockConfig+0x228>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d115      	bne.n	8002a3a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e107      	b.n	8002c22 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d107      	bne.n	8002a2a <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002a1a:	4b37      	ldr	r3, [pc, #220]	@ (8002af8 <HAL_RCC_ClockConfig+0x228>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d109      	bne.n	8002a3a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e0fb      	b.n	8002c22 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a2a:	4b33      	ldr	r3, [pc, #204]	@ (8002af8 <HAL_RCC_ClockConfig+0x228>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e0f3      	b.n	8002c22 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8002a3a:	4b2f      	ldr	r3, [pc, #188]	@ (8002af8 <HAL_RCC_ClockConfig+0x228>)
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	f023 0203 	bic.w	r2, r3, #3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	492c      	ldr	r1, [pc, #176]	@ (8002af8 <HAL_RCC_ClockConfig+0x228>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a4c:	f7fe fa52 	bl	8000ef4 <HAL_GetTick>
 8002a50:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	2b03      	cmp	r3, #3
 8002a58:	d112      	bne.n	8002a80 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a5a:	e00a      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002a5c:	f7fe fa4a 	bl	8000ef4 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e0d7      	b.n	8002c22 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a72:	4b21      	ldr	r3, [pc, #132]	@ (8002af8 <HAL_RCC_ClockConfig+0x228>)
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	f003 0318 	and.w	r3, r3, #24
 8002a7a:	2b18      	cmp	r3, #24
 8002a7c:	d1ee      	bne.n	8002a5c <HAL_RCC_ClockConfig+0x18c>
 8002a7e:	e043      	b.n	8002b08 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d112      	bne.n	8002aae <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a88:	e00a      	b.n	8002aa0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002a8a:	f7fe fa33 	bl	8000ef4 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e0c0      	b.n	8002c22 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002aa0:	4b15      	ldr	r3, [pc, #84]	@ (8002af8 <HAL_RCC_ClockConfig+0x228>)
 8002aa2:	69db      	ldr	r3, [r3, #28]
 8002aa4:	f003 0318 	and.w	r3, r3, #24
 8002aa8:	2b10      	cmp	r3, #16
 8002aaa:	d1ee      	bne.n	8002a8a <HAL_RCC_ClockConfig+0x1ba>
 8002aac:	e02c      	b.n	8002b08 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d122      	bne.n	8002afc <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002ab6:	e00a      	b.n	8002ace <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002ab8:	f7fe fa1c 	bl	8000ef4 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e0a9      	b.n	8002c22 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002ace:	4b0a      	ldr	r3, [pc, #40]	@ (8002af8 <HAL_RCC_ClockConfig+0x228>)
 8002ad0:	69db      	ldr	r3, [r3, #28]
 8002ad2:	f003 0318 	and.w	r3, r3, #24
 8002ad6:	2b08      	cmp	r3, #8
 8002ad8:	d1ee      	bne.n	8002ab8 <HAL_RCC_ClockConfig+0x1e8>
 8002ada:	e015      	b.n	8002b08 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002adc:	f7fe fa0a 	bl	8000ef4 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d906      	bls.n	8002afc <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e097      	b.n	8002c22 <HAL_RCC_ClockConfig+0x352>
 8002af2:	bf00      	nop
 8002af4:	40022000 	.word	0x40022000
 8002af8:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002afc:	4b4b      	ldr	r3, [pc, #300]	@ (8002c2c <HAL_RCC_ClockConfig+0x35c>)
 8002afe:	69db      	ldr	r3, [r3, #28]
 8002b00:	f003 0318 	and.w	r3, r3, #24
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1e9      	bne.n	8002adc <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d010      	beq.n	8002b36 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	4b44      	ldr	r3, [pc, #272]	@ (8002c2c <HAL_RCC_ClockConfig+0x35c>)
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	f003 030f 	and.w	r3, r3, #15
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d208      	bcs.n	8002b36 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002b24:	4b41      	ldr	r3, [pc, #260]	@ (8002c2c <HAL_RCC_ClockConfig+0x35c>)
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	f023 020f 	bic.w	r2, r3, #15
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	493e      	ldr	r1, [pc, #248]	@ (8002c2c <HAL_RCC_ClockConfig+0x35c>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b36:	4b3e      	ldr	r3, [pc, #248]	@ (8002c30 <HAL_RCC_ClockConfig+0x360>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d210      	bcs.n	8002b66 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b44:	4b3a      	ldr	r3, [pc, #232]	@ (8002c30 <HAL_RCC_ClockConfig+0x360>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f023 020f 	bic.w	r2, r3, #15
 8002b4c:	4938      	ldr	r1, [pc, #224]	@ (8002c30 <HAL_RCC_ClockConfig+0x360>)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b54:	4b36      	ldr	r3, [pc, #216]	@ (8002c30 <HAL_RCC_ClockConfig+0x360>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 030f 	and.w	r3, r3, #15
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d001      	beq.n	8002b66 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e05d      	b.n	8002c22 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0304 	and.w	r3, r3, #4
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d010      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68da      	ldr	r2, [r3, #12]
 8002b76:	4b2d      	ldr	r3, [pc, #180]	@ (8002c2c <HAL_RCC_ClockConfig+0x35c>)
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d208      	bcs.n	8002b94 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002b82:	4b2a      	ldr	r3, [pc, #168]	@ (8002c2c <HAL_RCC_ClockConfig+0x35c>)
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	4927      	ldr	r1, [pc, #156]	@ (8002c2c <HAL_RCC_ClockConfig+0x35c>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0308 	and.w	r3, r3, #8
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d012      	beq.n	8002bc6 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	691a      	ldr	r2, [r3, #16]
 8002ba4:	4b21      	ldr	r3, [pc, #132]	@ (8002c2c <HAL_RCC_ClockConfig+0x35c>)
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	091b      	lsrs	r3, r3, #4
 8002baa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d209      	bcs.n	8002bc6 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002bb2:	4b1e      	ldr	r3, [pc, #120]	@ (8002c2c <HAL_RCC_ClockConfig+0x35c>)
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	011b      	lsls	r3, r3, #4
 8002bc0:	491a      	ldr	r1, [pc, #104]	@ (8002c2c <HAL_RCC_ClockConfig+0x35c>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0310 	and.w	r3, r3, #16
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d012      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	695a      	ldr	r2, [r3, #20]
 8002bd6:	4b15      	ldr	r3, [pc, #84]	@ (8002c2c <HAL_RCC_ClockConfig+0x35c>)
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	0a1b      	lsrs	r3, r3, #8
 8002bdc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d209      	bcs.n	8002bf8 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002be4:	4b11      	ldr	r3, [pc, #68]	@ (8002c2c <HAL_RCC_ClockConfig+0x35c>)
 8002be6:	6a1b      	ldr	r3, [r3, #32]
 8002be8:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	021b      	lsls	r3, r3, #8
 8002bf2:	490e      	ldr	r1, [pc, #56]	@ (8002c2c <HAL_RCC_ClockConfig+0x35c>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002bf8:	f000 f822 	bl	8002c40 <HAL_RCC_GetSysClockFreq>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8002c2c <HAL_RCC_ClockConfig+0x35c>)
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	f003 030f 	and.w	r3, r3, #15
 8002c06:	490b      	ldr	r1, [pc, #44]	@ (8002c34 <HAL_RCC_ClockConfig+0x364>)
 8002c08:	5ccb      	ldrb	r3, [r1, r3]
 8002c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c0e:	4a0a      	ldr	r2, [pc, #40]	@ (8002c38 <HAL_RCC_ClockConfig+0x368>)
 8002c10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002c12:	4b0a      	ldr	r3, [pc, #40]	@ (8002c3c <HAL_RCC_ClockConfig+0x36c>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7fe f8e2 	bl	8000de0 <HAL_InitTick>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8002c20:	7afb      	ldrb	r3, [r7, #11]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	44020c00 	.word	0x44020c00
 8002c30:	40022000 	.word	0x40022000
 8002c34:	08005ccc 	.word	0x08005ccc
 8002c38:	20000000 	.word	0x20000000
 8002c3c:	20000004 	.word	0x20000004

08002c40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b089      	sub	sp, #36	@ 0x24
 8002c44:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8002c46:	4b8c      	ldr	r3, [pc, #560]	@ (8002e78 <HAL_RCC_GetSysClockFreq+0x238>)
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	f003 0318 	and.w	r3, r3, #24
 8002c4e:	2b08      	cmp	r3, #8
 8002c50:	d102      	bne.n	8002c58 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002c52:	4b8a      	ldr	r3, [pc, #552]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0x23c>)
 8002c54:	61fb      	str	r3, [r7, #28]
 8002c56:	e107      	b.n	8002e68 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c58:	4b87      	ldr	r3, [pc, #540]	@ (8002e78 <HAL_RCC_GetSysClockFreq+0x238>)
 8002c5a:	69db      	ldr	r3, [r3, #28]
 8002c5c:	f003 0318 	and.w	r3, r3, #24
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d112      	bne.n	8002c8a <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002c64:	4b84      	ldr	r3, [pc, #528]	@ (8002e78 <HAL_RCC_GetSysClockFreq+0x238>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0320 	and.w	r3, r3, #32
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d009      	beq.n	8002c84 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002c70:	4b81      	ldr	r3, [pc, #516]	@ (8002e78 <HAL_RCC_GetSysClockFreq+0x238>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	08db      	lsrs	r3, r3, #3
 8002c76:	f003 0303 	and.w	r3, r3, #3
 8002c7a:	4a81      	ldr	r2, [pc, #516]	@ (8002e80 <HAL_RCC_GetSysClockFreq+0x240>)
 8002c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c80:	61fb      	str	r3, [r7, #28]
 8002c82:	e0f1      	b.n	8002e68 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8002c84:	4b7e      	ldr	r3, [pc, #504]	@ (8002e80 <HAL_RCC_GetSysClockFreq+0x240>)
 8002c86:	61fb      	str	r3, [r7, #28]
 8002c88:	e0ee      	b.n	8002e68 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c8a:	4b7b      	ldr	r3, [pc, #492]	@ (8002e78 <HAL_RCC_GetSysClockFreq+0x238>)
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	f003 0318 	and.w	r3, r3, #24
 8002c92:	2b10      	cmp	r3, #16
 8002c94:	d102      	bne.n	8002c9c <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c96:	4b7b      	ldr	r3, [pc, #492]	@ (8002e84 <HAL_RCC_GetSysClockFreq+0x244>)
 8002c98:	61fb      	str	r3, [r7, #28]
 8002c9a:	e0e5      	b.n	8002e68 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c9c:	4b76      	ldr	r3, [pc, #472]	@ (8002e78 <HAL_RCC_GetSysClockFreq+0x238>)
 8002c9e:	69db      	ldr	r3, [r3, #28]
 8002ca0:	f003 0318 	and.w	r3, r3, #24
 8002ca4:	2b18      	cmp	r3, #24
 8002ca6:	f040 80dd 	bne.w	8002e64 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002caa:	4b73      	ldr	r3, [pc, #460]	@ (8002e78 <HAL_RCC_GetSysClockFreq+0x238>)
 8002cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002cb4:	4b70      	ldr	r3, [pc, #448]	@ (8002e78 <HAL_RCC_GetSysClockFreq+0x238>)
 8002cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cb8:	0a1b      	lsrs	r3, r3, #8
 8002cba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cbe:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002cc0:	4b6d      	ldr	r3, [pc, #436]	@ (8002e78 <HAL_RCC_GetSysClockFreq+0x238>)
 8002cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc4:	091b      	lsrs	r3, r3, #4
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002ccc:	4b6a      	ldr	r3, [pc, #424]	@ (8002e78 <HAL_RCC_GetSysClockFreq+0x238>)
 8002cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8002cd0:	08db      	lsrs	r3, r3, #3
 8002cd2:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	fb02 f303 	mul.w	r3, r2, r3
 8002cdc:	ee07 3a90 	vmov	s15, r3
 8002ce0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ce4:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f000 80b7 	beq.w	8002e5e <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d003      	beq.n	8002cfe <HAL_RCC_GetSysClockFreq+0xbe>
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	2b03      	cmp	r3, #3
 8002cfa:	d056      	beq.n	8002daa <HAL_RCC_GetSysClockFreq+0x16a>
 8002cfc:	e077      	b.n	8002dee <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002cfe:	4b5e      	ldr	r3, [pc, #376]	@ (8002e78 <HAL_RCC_GetSysClockFreq+0x238>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0320 	and.w	r3, r3, #32
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d02d      	beq.n	8002d66 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002d0a:	4b5b      	ldr	r3, [pc, #364]	@ (8002e78 <HAL_RCC_GetSysClockFreq+0x238>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	08db      	lsrs	r3, r3, #3
 8002d10:	f003 0303 	and.w	r3, r3, #3
 8002d14:	4a5a      	ldr	r2, [pc, #360]	@ (8002e80 <HAL_RCC_GetSysClockFreq+0x240>)
 8002d16:	fa22 f303 	lsr.w	r3, r2, r3
 8002d1a:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	ee07 3a90 	vmov	s15, r3
 8002d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	ee07 3a90 	vmov	s15, r3
 8002d2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d34:	4b50      	ldr	r3, [pc, #320]	@ (8002e78 <HAL_RCC_GetSysClockFreq+0x238>)
 8002d36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d3c:	ee07 3a90 	vmov	s15, r3
 8002d40:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d44:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d48:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8002e88 <HAL_RCC_GetSysClockFreq+0x248>
 8002d4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d50:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d54:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d58:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d60:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8002d64:	e065      	b.n	8002e32 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	ee07 3a90 	vmov	s15, r3
 8002d6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d70:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002e8c <HAL_RCC_GetSysClockFreq+0x24c>
 8002d74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d78:	4b3f      	ldr	r3, [pc, #252]	@ (8002e78 <HAL_RCC_GetSysClockFreq+0x238>)
 8002d7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d80:	ee07 3a90 	vmov	s15, r3
 8002d84:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d88:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d8c:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8002e88 <HAL_RCC_GetSysClockFreq+0x248>
 8002d90:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d94:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d98:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002da0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002da4:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002da8:	e043      	b.n	8002e32 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	ee07 3a90 	vmov	s15, r3
 8002db0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002db4:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8002e90 <HAL_RCC_GetSysClockFreq+0x250>
 8002db8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dbc:	4b2e      	ldr	r3, [pc, #184]	@ (8002e78 <HAL_RCC_GetSysClockFreq+0x238>)
 8002dbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dc4:	ee07 3a90 	vmov	s15, r3
 8002dc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002dcc:	ed97 6a02 	vldr	s12, [r7, #8]
 8002dd0:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8002e88 <HAL_RCC_GetSysClockFreq+0x248>
 8002dd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002dd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ddc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002de0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002de4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002de8:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8002dec:	e021      	b.n	8002e32 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	ee07 3a90 	vmov	s15, r3
 8002df4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002df8:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002e94 <HAL_RCC_GetSysClockFreq+0x254>
 8002dfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e00:	4b1d      	ldr	r3, [pc, #116]	@ (8002e78 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e08:	ee07 3a90 	vmov	s15, r3
 8002e0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e10:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e14:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8002e88 <HAL_RCC_GetSysClockFreq+0x248>
 8002e18:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e20:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e24:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e2c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002e30:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8002e32:	4b11      	ldr	r3, [pc, #68]	@ (8002e78 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e36:	0a5b      	lsrs	r3, r3, #9
 8002e38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	ee07 3a90 	vmov	s15, r3
 8002e46:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e4a:	edd7 6a06 	vldr	s13, [r7, #24]
 8002e4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e56:	ee17 3a90 	vmov	r3, s15
 8002e5a:	61fb      	str	r3, [r7, #28]
 8002e5c:	e004      	b.n	8002e68 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	61fb      	str	r3, [r7, #28]
 8002e62:	e001      	b.n	8002e68 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8002e64:	4b06      	ldr	r3, [pc, #24]	@ (8002e80 <HAL_RCC_GetSysClockFreq+0x240>)
 8002e66:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8002e68:	69fb      	ldr	r3, [r7, #28]
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3724      	adds	r7, #36	@ 0x24
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	44020c00 	.word	0x44020c00
 8002e7c:	003d0900 	.word	0x003d0900
 8002e80:	03d09000 	.word	0x03d09000
 8002e84:	017d7840 	.word	0x017d7840
 8002e88:	46000000 	.word	0x46000000
 8002e8c:	4c742400 	.word	0x4c742400
 8002e90:	4bbebc20 	.word	0x4bbebc20
 8002e94:	4a742400 	.word	0x4a742400

08002e98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002e9c:	f7ff fed0 	bl	8002c40 <HAL_RCC_GetSysClockFreq>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	4b08      	ldr	r3, [pc, #32]	@ (8002ec4 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002ea6:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002eaa:	4907      	ldr	r1, [pc, #28]	@ (8002ec8 <HAL_RCC_GetHCLKFreq+0x30>)
 8002eac:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002eae:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8002eb6:	4a05      	ldr	r2, [pc, #20]	@ (8002ecc <HAL_RCC_GetHCLKFreq+0x34>)
 8002eb8:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8002eba:	4b04      	ldr	r3, [pc, #16]	@ (8002ecc <HAL_RCC_GetHCLKFreq+0x34>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	44020c00 	.word	0x44020c00
 8002ec8:	08005ccc 	.word	0x08005ccc
 8002ecc:	20000000 	.word	0x20000000

08002ed0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8002ed4:	f7ff ffe0 	bl	8002e98 <HAL_RCC_GetHCLKFreq>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	4b06      	ldr	r3, [pc, #24]	@ (8002ef4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	091b      	lsrs	r3, r3, #4
 8002ee0:	f003 0307 	and.w	r3, r3, #7
 8002ee4:	4904      	ldr	r1, [pc, #16]	@ (8002ef8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ee6:	5ccb      	ldrb	r3, [r1, r3]
 8002ee8:	f003 031f 	and.w	r3, r3, #31
 8002eec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	44020c00 	.word	0x44020c00
 8002ef8:	08005cdc 	.word	0x08005cdc

08002efc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8002f00:	f7ff ffca 	bl	8002e98 <HAL_RCC_GetHCLKFreq>
 8002f04:	4602      	mov	r2, r0
 8002f06:	4b06      	ldr	r3, [pc, #24]	@ (8002f20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	0a1b      	lsrs	r3, r3, #8
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	4904      	ldr	r1, [pc, #16]	@ (8002f24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f12:	5ccb      	ldrb	r3, [r1, r3]
 8002f14:	f003 031f 	and.w	r3, r3, #31
 8002f18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	44020c00 	.word	0x44020c00
 8002f24:	08005cdc 	.word	0x08005cdc

08002f28 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8002f2c:	f7ff ffb4 	bl	8002e98 <HAL_RCC_GetHCLKFreq>
 8002f30:	4602      	mov	r2, r0
 8002f32:	4b06      	ldr	r3, [pc, #24]	@ (8002f4c <HAL_RCC_GetPCLK3Freq+0x24>)
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	0b1b      	lsrs	r3, r3, #12
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	4904      	ldr	r1, [pc, #16]	@ (8002f50 <HAL_RCC_GetPCLK3Freq+0x28>)
 8002f3e:	5ccb      	ldrb	r3, [r1, r3]
 8002f40:	f003 031f 	and.w	r3, r3, #31
 8002f44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	44020c00 	.word	0x44020c00
 8002f50:	08005cdc 	.word	0x08005cdc

08002f54 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002f54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f58:	b0aa      	sub	sp, #168	@ 0xa8
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f60:	2300      	movs	r3, #0
 8002f62:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f66:	2300      	movs	r3, #0
 8002f68:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002f6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f74:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8002f78:	2500      	movs	r5, #0
 8002f7a:	ea54 0305 	orrs.w	r3, r4, r5
 8002f7e:	d00b      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8002f80:	4bb8      	ldr	r3, [pc, #736]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002f86:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8002f8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f90:	4ab4      	ldr	r2, [pc, #720]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f92:	430b      	orrs	r3, r1
 8002f94:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f98:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa0:	f002 0801 	and.w	r8, r2, #1
 8002fa4:	f04f 0900 	mov.w	r9, #0
 8002fa8:	ea58 0309 	orrs.w	r3, r8, r9
 8002fac:	d038      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8002fae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002fb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fb4:	2b05      	cmp	r3, #5
 8002fb6:	d819      	bhi.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002fb8:	a201      	add	r2, pc, #4	@ (adr r2, 8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8002fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fbe:	bf00      	nop
 8002fc0:	08002ff5 	.word	0x08002ff5
 8002fc4:	08002fd9 	.word	0x08002fd9
 8002fc8:	08002fed 	.word	0x08002fed
 8002fcc:	08002ff5 	.word	0x08002ff5
 8002fd0:	08002ff5 	.word	0x08002ff5
 8002fd4:	08002ff5 	.word	0x08002ff5
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002fd8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002fdc:	3308      	adds	r3, #8
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f001 fff2 	bl	8004fc8 <RCCEx_PLL2_Config>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART1 clock source config set later after clock selection check */
        break;
 8002fea:	e004      	b.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002ff2:	e000      	b.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        break;
 8002ff4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ff6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d10c      	bne.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002ffe:	4b99      	ldr	r3, [pc, #612]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003000:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003004:	f023 0107 	bic.w	r1, r3, #7
 8003008:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800300c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800300e:	4a95      	ldr	r2, [pc, #596]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003010:	430b      	orrs	r3, r1
 8003012:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003016:	e003      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003018:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800301c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003020:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003028:	f002 0a02 	and.w	sl, r2, #2
 800302c:	f04f 0b00 	mov.w	fp, #0
 8003030:	ea5a 030b 	orrs.w	r3, sl, fp
 8003034:	d03c      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8003036:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800303a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800303c:	2b28      	cmp	r3, #40	@ 0x28
 800303e:	d01b      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x124>
 8003040:	2b28      	cmp	r3, #40	@ 0x28
 8003042:	d815      	bhi.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8003044:	2b20      	cmp	r3, #32
 8003046:	d019      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x128>
 8003048:	2b20      	cmp	r3, #32
 800304a:	d811      	bhi.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 800304c:	2b18      	cmp	r3, #24
 800304e:	d017      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8003050:	2b18      	cmp	r3, #24
 8003052:	d80d      	bhi.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8003054:	2b00      	cmp	r3, #0
 8003056:	d015      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8003058:	2b08      	cmp	r3, #8
 800305a:	d109      	bne.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x11c>
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800305c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003060:	3308      	adds	r3, #8
 8003062:	4618      	mov	r0, r3
 8003064:	f001 ffb0 	bl	8004fc8 <RCCEx_PLL2_Config>
 8003068:	4603      	mov	r3, r0
 800306a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART2 clock source config set later after clock selection check */
        break;
 800306e:	e00a      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x132>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003076:	e006      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8003078:	bf00      	nop
 800307a:	e004      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 800307c:	bf00      	nop
 800307e:	e002      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8003080:	bf00      	nop
 8003082:	e000      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8003084:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003086:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d10c      	bne.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800308e:	4b75      	ldr	r3, [pc, #468]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003090:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003094:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003098:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800309c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800309e:	4a71      	ldr	r2, [pc, #452]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80030a0:	430b      	orrs	r3, r1
 80030a2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80030a6:	e003      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030a8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80030ac:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80030b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b8:	f002 0304 	and.w	r3, r2, #4
 80030bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80030c0:	2300      	movs	r3, #0
 80030c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80030c6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80030ca:	460b      	mov	r3, r1
 80030cc:	4313      	orrs	r3, r2
 80030ce:	d040      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80030d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80030d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030d6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80030da:	d01e      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 80030dc:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80030e0:	d817      	bhi.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80030e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030e6:	d01a      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 80030e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030ec:	d811      	bhi.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80030ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80030f0:	d017      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80030f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80030f4:	d80d      	bhi.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d015      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 80030fa:	2b40      	cmp	r3, #64	@ 0x40
 80030fc:	d109      	bne.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80030fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003102:	3308      	adds	r3, #8
 8003104:	4618      	mov	r0, r3
 8003106:	f001 ff5f 	bl	8004fc8 <RCCEx_PLL2_Config>
 800310a:	4603      	mov	r3, r0
 800310c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART3 clock source config set later after clock selection check */
        break;
 8003110:	e00a      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003118:	e006      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800311a:	bf00      	nop
 800311c:	e004      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800311e:	bf00      	nop
 8003120:	e002      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8003122:	bf00      	nop
 8003124:	e000      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8003126:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003128:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800312c:	2b00      	cmp	r3, #0
 800312e:	d10c      	bne.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003130:	4b4c      	ldr	r3, [pc, #304]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003132:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003136:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800313a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800313e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003140:	4a48      	ldr	r2, [pc, #288]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003142:	430b      	orrs	r3, r1
 8003144:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003148:	e003      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800314a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800314e:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003152:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800315a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800315e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003162:	2300      	movs	r3, #0
 8003164:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003168:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800316c:	460b      	mov	r3, r1
 800316e:	4313      	orrs	r3, r2
 8003170:	d043      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8003172:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003178:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800317c:	d021      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800317e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003182:	d81a      	bhi.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x266>
 8003184:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003188:	d01d      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x272>
 800318a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800318e:	d814      	bhi.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x266>
 8003190:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003194:	d019      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x276>
 8003196:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800319a:	d80e      	bhi.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x266>
 800319c:	2b00      	cmp	r3, #0
 800319e:	d016      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x27a>
 80031a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031a4:	d109      	bne.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x266>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80031a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80031aa:	3308      	adds	r3, #8
 80031ac:	4618      	mov	r0, r3
 80031ae:	f001 ff0b 	bl	8004fc8 <RCCEx_PLL2_Config>
 80031b2:	4603      	mov	r3, r0
 80031b4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80031b8:	e00a      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80031c0:	e006      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80031c2:	bf00      	nop
 80031c4:	e004      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80031c6:	bf00      	nop
 80031c8:	e002      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80031ca:	bf00      	nop
 80031cc:	e000      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80031ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031d0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d10c      	bne.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80031d8:	4b22      	ldr	r3, [pc, #136]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80031da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031de:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80031e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80031e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e8:	4a1e      	ldr	r2, [pc, #120]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80031ea:	430b      	orrs	r3, r1
 80031ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80031f0:	e003      	b.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031f2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80031f6:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80031fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003202:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003206:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003208:	2300      	movs	r3, #0
 800320a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800320c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003210:	460b      	mov	r3, r1
 8003212:	4313      	orrs	r3, r2
 8003214:	d03e      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8003216:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800321a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800321c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003220:	d01b      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x306>
 8003222:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003226:	d814      	bhi.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8003228:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800322c:	d017      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x30a>
 800322e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003232:	d80e      	bhi.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8003234:	2b00      	cmp	r3, #0
 8003236:	d017      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8003238:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800323c:	d109      	bne.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800323e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003242:	3308      	adds	r3, #8
 8003244:	4618      	mov	r0, r3
 8003246:	f001 febf 	bl	8004fc8 <RCCEx_PLL2_Config>
 800324a:	4603      	mov	r3, r0
 800324c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8003250:	e00b      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x316>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003258:	e007      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 800325a:	bf00      	nop
 800325c:	e005      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 800325e:	bf00      	nop
 8003260:	e003      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x316>
 8003262:	bf00      	nop
 8003264:	44020c00 	.word	0x44020c00
        break;
 8003268:	bf00      	nop
    }

    if (ret == HAL_OK)
 800326a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10c      	bne.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x338>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003272:	4ba5      	ldr	r3, [pc, #660]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003274:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003278:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800327c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003282:	4aa1      	ldr	r2, [pc, #644]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003284:	430b      	orrs	r3, r1
 8003286:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800328a:	e003      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x340>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800328c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003290:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003294:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800329c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80032a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80032a2:	2300      	movs	r3, #0
 80032a4:	677b      	str	r3, [r7, #116]	@ 0x74
 80032a6:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80032aa:	460b      	mov	r3, r1
 80032ac:	4313      	orrs	r3, r2
 80032ae:	d03b      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 80032b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032b6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80032ba:	d01b      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 80032bc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80032c0:	d814      	bhi.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x398>
 80032c2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80032c6:	d017      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80032c8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80032cc:	d80e      	bhi.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x398>
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d014      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 80032d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80032d6:	d109      	bne.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x398>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80032d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032dc:	3308      	adds	r3, #8
 80032de:	4618      	mov	r0, r3
 80032e0:	f001 fe72 	bl	8004fc8 <RCCEx_PLL2_Config>
 80032e4:	4603      	mov	r3, r0
 80032e6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 80032ea:	e008      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80032f2:	e004      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 80032f4:	bf00      	nop
 80032f6:	e002      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 80032f8:	bf00      	nop
 80032fa:	e000      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 80032fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032fe:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10c      	bne.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003306:	4b80      	ldr	r3, [pc, #512]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003308:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800330c:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8003310:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003314:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003316:	4a7c      	ldr	r2, [pc, #496]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003318:	430b      	orrs	r3, r1
 800331a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800331e:	e003      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003320:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003324:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8003328:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800332c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003330:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003334:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003336:	2300      	movs	r3, #0
 8003338:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800333a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800333e:	460b      	mov	r3, r1
 8003340:	4313      	orrs	r3, r2
 8003342:	d033      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8003344:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800334a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800334e:	d015      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x428>
 8003350:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003354:	d80e      	bhi.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003356:	2b00      	cmp	r3, #0
 8003358:	d012      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800335a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800335e:	d109      	bne.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x420>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003360:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003364:	3308      	adds	r3, #8
 8003366:	4618      	mov	r0, r3
 8003368:	f001 fe2e 	bl	8004fc8 <RCCEx_PLL2_Config>
 800336c:	4603      	mov	r3, r0
 800336e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8003372:	e006      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800337a:	e002      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 800337c:	bf00      	nop
 800337e:	e000      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8003380:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003382:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10c      	bne.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 800338a:	4b5f      	ldr	r3, [pc, #380]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800338c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003390:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8003394:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800339a:	4a5b      	ldr	r2, [pc, #364]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800339c:	430b      	orrs	r3, r1
 800339e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80033a2:	e003      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033a4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80033a8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 80033ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b4:	2100      	movs	r1, #0
 80033b6:	6639      	str	r1, [r7, #96]	@ 0x60
 80033b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033bc:	667b      	str	r3, [r7, #100]	@ 0x64
 80033be:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80033c2:	460b      	mov	r3, r1
 80033c4:	4313      	orrs	r3, r2
 80033c6:	d033      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 80033c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80033d2:	d015      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 80033d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80033d8:	d80e      	bhi.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d012      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80033de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80033e2:	d109      	bne.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80033e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033e8:	3308      	adds	r3, #8
 80033ea:	4618      	mov	r0, r3
 80033ec:	f001 fdec 	bl	8004fc8 <RCCEx_PLL2_Config>
 80033f0:	4603      	mov	r3, r0
 80033f2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 80033f6:	e006      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80033fe:	e002      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8003400:	bf00      	nop
 8003402:	e000      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8003404:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003406:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d10c      	bne.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 800340e:	4b3e      	ldr	r3, [pc, #248]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003410:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003414:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003418:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800341c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800341e:	4a3a      	ldr	r2, [pc, #232]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003420:	430b      	orrs	r3, r1
 8003422:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003426:	e003      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003428:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800342c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003430:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003438:	2100      	movs	r1, #0
 800343a:	65b9      	str	r1, [r7, #88]	@ 0x58
 800343c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003440:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003442:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003446:	460b      	mov	r3, r1
 8003448:	4313      	orrs	r3, r2
 800344a:	d00e      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 800344c:	4b2e      	ldr	r3, [pc, #184]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800344e:	69db      	ldr	r3, [r3, #28]
 8003450:	4a2d      	ldr	r2, [pc, #180]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003452:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003456:	61d3      	str	r3, [r2, #28]
 8003458:	4b2b      	ldr	r3, [pc, #172]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800345a:	69d9      	ldr	r1, [r3, #28]
 800345c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003460:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003464:	4a28      	ldr	r2, [pc, #160]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003466:	430b      	orrs	r3, r1
 8003468:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800346a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800346e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003472:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003476:	653b      	str	r3, [r7, #80]	@ 0x50
 8003478:	2300      	movs	r3, #0
 800347a:	657b      	str	r3, [r7, #84]	@ 0x54
 800347c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003480:	460b      	mov	r3, r1
 8003482:	4313      	orrs	r3, r2
 8003484:	d046      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8003486:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800348a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800348c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003490:	d021      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003492:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003496:	d81a      	bhi.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003498:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800349c:	d01d      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x586>
 800349e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034a2:	d814      	bhi.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80034a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80034a8:	d019      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x58a>
 80034aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80034ae:	d80e      	bhi.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d016      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x58e>
 80034b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034b8:	d109      	bne.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x57a>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80034ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034be:	3308      	adds	r3, #8
 80034c0:	4618      	mov	r0, r3
 80034c2:	f001 fd81 	bl	8004fc8 <RCCEx_PLL2_Config>
 80034c6:	4603      	mov	r3, r0
 80034c8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80034cc:	e00a      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x590>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80034d4:	e006      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 80034d6:	bf00      	nop
 80034d8:	e004      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 80034da:	bf00      	nop
 80034dc:	e002      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 80034de:	bf00      	nop
 80034e0:	e000      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 80034e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034e4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d10f      	bne.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80034ec:	4b06      	ldr	r3, [pc, #24]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80034ee:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80034f2:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80034f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034fc:	4a02      	ldr	r2, [pc, #8]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80034fe:	430b      	orrs	r3, r1
 8003500:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003504:	e006      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003506:	bf00      	nop
 8003508:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800350c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003510:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003514:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800351c:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003520:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003522:	2300      	movs	r3, #0
 8003524:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003526:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800352a:	460b      	mov	r3, r1
 800352c:	4313      	orrs	r3, r2
 800352e:	d043      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x664>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8003530:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003536:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800353a:	d021      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 800353c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003540:	d81a      	bhi.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8003542:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003546:	d01d      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x630>
 8003548:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800354c:	d814      	bhi.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x624>
 800354e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003552:	d019      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x634>
 8003554:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003558:	d80e      	bhi.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x624>
 800355a:	2b00      	cmp	r3, #0
 800355c:	d016      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x638>
 800355e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003562:	d109      	bne.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x624>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003564:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003568:	3308      	adds	r3, #8
 800356a:	4618      	mov	r0, r3
 800356c:	f001 fd2c 	bl	8004fc8 <RCCEx_PLL2_Config>
 8003570:	4603      	mov	r3, r0
 8003572:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8003576:	e00a      	b.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x63a>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800357e:	e006      	b.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8003580:	bf00      	nop
 8003582:	e004      	b.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8003584:	bf00      	nop
 8003586:	e002      	b.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8003588:	bf00      	nop
 800358a:	e000      	b.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 800358c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800358e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10c      	bne.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003596:	4bb6      	ldr	r3, [pc, #728]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003598:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800359c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80035a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035a6:	4ab2      	ldr	r2, [pc, #712]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80035a8:	430b      	orrs	r3, r1
 80035aa:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80035ae:	e003      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035b0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80035b4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80035b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80035c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80035c6:	2300      	movs	r3, #0
 80035c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80035ca:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80035ce:	460b      	mov	r3, r1
 80035d0:	4313      	orrs	r3, r2
 80035d2:	d030      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80035d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035da:	2b05      	cmp	r3, #5
 80035dc:	d80f      	bhi.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 80035de:	2b03      	cmp	r3, #3
 80035e0:	d211      	bcs.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d911      	bls.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d109      	bne.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80035ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035ee:	3308      	adds	r3, #8
 80035f0:	4618      	mov	r0, r3
 80035f2:	f001 fce9 	bl	8004fc8 <RCCEx_PLL2_Config>
 80035f6:	4603      	mov	r3, r0
 80035f8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80035fc:	e006      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003604:	e002      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8003606:	bf00      	nop
 8003608:	e000      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 800360a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800360c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003610:	2b00      	cmp	r3, #0
 8003612:	d10c      	bne.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003614:	4b96      	ldr	r3, [pc, #600]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003616:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800361a:	f023 0107 	bic.w	r1, r3, #7
 800361e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003622:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003624:	4a92      	ldr	r2, [pc, #584]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003626:	430b      	orrs	r3, r1
 8003628:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800362c:	e003      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800362e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003632:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8003636:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800363a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800363e:	2100      	movs	r1, #0
 8003640:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003642:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003646:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003648:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800364c:	460b      	mov	r3, r1
 800364e:	4313      	orrs	r3, r2
 8003650:	d022      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x744>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8003652:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003656:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003658:	2b00      	cmp	r3, #0
 800365a:	d005      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x714>
 800365c:	2b08      	cmp	r3, #8
 800365e:	d005      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x718>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003666:	e002      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8003668:	bf00      	nop
 800366a:	e000      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 800366c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800366e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10c      	bne.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8003676:	4b7e      	ldr	r3, [pc, #504]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003678:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800367c:	f023 0108 	bic.w	r1, r3, #8
 8003680:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003684:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003686:	4a7a      	ldr	r2, [pc, #488]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003688:	430b      	orrs	r3, r1
 800368a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800368e:	e003      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x744>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003690:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003694:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003698:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800369c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80036a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80036a6:	2300      	movs	r3, #0
 80036a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80036aa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80036ae:	460b      	mov	r3, r1
 80036b0:	4313      	orrs	r3, r2
 80036b2:	f000 80b0 	beq.w	8003816 <HAL_RCCEx_PeriphCLKConfig+0x8c2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80036b6:	4b6f      	ldr	r3, [pc, #444]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 80036b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ba:	4a6e      	ldr	r2, [pc, #440]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 80036bc:	f043 0301 	orr.w	r3, r3, #1
 80036c0:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036c2:	f7fd fc17 	bl	8000ef4 <HAL_GetTick>
 80036c6:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80036ca:	e00b      	b.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x790>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036cc:	f7fd fc12 	bl	8000ef4 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d903      	bls.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x790>
      {
        ret = HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80036e2:	e005      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80036e4:	4b63      	ldr	r3, [pc, #396]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 80036e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d0ed      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x778>
      }
    }

    if (ret == HAL_OK)
 80036f0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f040 808a 	bne.w	800380e <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80036fa:	4b5d      	ldr	r3, [pc, #372]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80036fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003700:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003704:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003708:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800370c:	2b00      	cmp	r3, #0
 800370e:	d022      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x802>
 8003710:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003714:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003716:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800371a:	429a      	cmp	r2, r3
 800371c:	d01b      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x802>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800371e:	4b54      	ldr	r3, [pc, #336]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003720:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003724:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003728:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800372c:	4b50      	ldr	r3, [pc, #320]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800372e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003732:	4a4f      	ldr	r2, [pc, #316]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003734:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003738:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800373c:	4b4c      	ldr	r3, [pc, #304]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800373e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003742:	4a4b      	ldr	r2, [pc, #300]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003744:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003748:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800374c:	4a48      	ldr	r2, [pc, #288]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800374e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003752:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003756:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b00      	cmp	r3, #0
 8003760:	d019      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x842>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003762:	f7fd fbc7 	bl	8000ef4 <HAL_GetTick>
 8003766:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800376a:	e00d      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800376c:	f7fd fbc2 	bl	8000ef4 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	f241 3288 	movw	r2, #5000	@ 0x1388
 800377c:	4293      	cmp	r3, r2
 800377e:	d903      	bls.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x834>
          {
            ret = HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
            break;
 8003786:	e006      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003788:	4b39      	ldr	r3, [pc, #228]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800378a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d0ea      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x818>
          }
        }
      }

      if (ret == HAL_OK)
 8003796:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d132      	bne.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800379e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037ac:	d10f      	bne.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x87a>
 80037ae:	4b30      	ldr	r3, [pc, #192]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80037b0:	69db      	ldr	r3, [r3, #28]
 80037b2:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80037b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037bc:	091b      	lsrs	r3, r3, #4
 80037be:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80037c2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80037c6:	4a2a      	ldr	r2, [pc, #168]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80037c8:	430b      	orrs	r3, r1
 80037ca:	61d3      	str	r3, [r2, #28]
 80037cc:	e005      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x886>
 80037ce:	4b28      	ldr	r3, [pc, #160]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80037d0:	69db      	ldr	r3, [r3, #28]
 80037d2:	4a27      	ldr	r2, [pc, #156]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80037d4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80037d8:	61d3      	str	r3, [r2, #28]
 80037da:	4b25      	ldr	r3, [pc, #148]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80037dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80037e0:	4a23      	ldr	r2, [pc, #140]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80037e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037e6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80037ea:	4b21      	ldr	r3, [pc, #132]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80037ec:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 80037f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037fa:	4a1d      	ldr	r2, [pc, #116]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80037fc:	430b      	orrs	r3, r1
 80037fe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003802:	e008      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003804:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003808:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
 800380c:	e003      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800380e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003812:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003816:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800381a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800381e:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8003822:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003824:	2300      	movs	r3, #0
 8003826:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003828:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800382c:	460b      	mov	r3, r1
 800382e:	4313      	orrs	r3, r2
 8003830:	d038      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x950>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8003832:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003836:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003838:	2b30      	cmp	r3, #48	@ 0x30
 800383a:	d014      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x912>
 800383c:	2b30      	cmp	r3, #48	@ 0x30
 800383e:	d80e      	bhi.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8003840:	2b20      	cmp	r3, #32
 8003842:	d012      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x916>
 8003844:	2b20      	cmp	r3, #32
 8003846:	d80a      	bhi.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8003848:	2b00      	cmp	r3, #0
 800384a:	d015      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800384c:	2b10      	cmp	r3, #16
 800384e:	d106      	bne.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x90a>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003850:	4b07      	ldr	r3, [pc, #28]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003854:	4a06      	ldr	r2, [pc, #24]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003856:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800385a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 800385c:	e00d      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x926>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003864:	e009      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8003866:	bf00      	nop
 8003868:	e007      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 800386a:	bf00      	nop
 800386c:	e005      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x926>
 800386e:	bf00      	nop
 8003870:	44020c00 	.word	0x44020c00
 8003874:	44020800 	.word	0x44020800
        break;
 8003878:	bf00      	nop
    }

    if (ret == HAL_OK)
 800387a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d10c      	bne.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8003882:	4bb5      	ldr	r3, [pc, #724]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003884:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003888:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800388c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003890:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003892:	49b1      	ldr	r1, [pc, #708]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003894:	4313      	orrs	r3, r2
 8003896:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 800389a:	e003      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800389c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80038a0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80038a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80038a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ac:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80038b0:	623b      	str	r3, [r7, #32]
 80038b2:	2300      	movs	r3, #0
 80038b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80038b6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80038ba:	460b      	mov	r3, r1
 80038bc:	4313      	orrs	r3, r2
 80038be:	d03c      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80038c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80038c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038c6:	2b04      	cmp	r3, #4
 80038c8:	d81d      	bhi.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 80038ca:	a201      	add	r2, pc, #4	@ (adr r2, 80038d0 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 80038cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d0:	080038e5 	.word	0x080038e5
 80038d4:	080038f3 	.word	0x080038f3
 80038d8:	08003907 	.word	0x08003907
 80038dc:	0800390f 	.word	0x0800390f
 80038e0:	0800390f 	.word	0x0800390f
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038e4:	4b9c      	ldr	r3, [pc, #624]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80038e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038e8:	4a9b      	ldr	r2, [pc, #620]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80038ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038ee:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80038f0:	e00e      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x9bc>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80038f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80038f6:	3308      	adds	r3, #8
 80038f8:	4618      	mov	r0, r3
 80038fa:	f001 fb65 	bl	8004fc8 <RCCEx_PLL2_Config>
 80038fe:	4603      	mov	r3, r0
 8003900:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003904:	e004      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800390c:	e000      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        break;
 800390e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003910:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10c      	bne.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x9de>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8003918:	4b8f      	ldr	r3, [pc, #572]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800391a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800391e:	f023 0207 	bic.w	r2, r3, #7
 8003922:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003926:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003928:	498b      	ldr	r1, [pc, #556]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800392a:	4313      	orrs	r3, r2
 800392c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003930:	e003      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003932:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003936:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800393a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800393e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003942:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003946:	61bb      	str	r3, [r7, #24]
 8003948:	2300      	movs	r3, #0
 800394a:	61fb      	str	r3, [r7, #28]
 800394c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003950:	460b      	mov	r3, r1
 8003952:	4313      	orrs	r3, r2
 8003954:	d03c      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8003956:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800395a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800395c:	2b20      	cmp	r3, #32
 800395e:	d01f      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8003960:	2b20      	cmp	r3, #32
 8003962:	d819      	bhi.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8003964:	2b18      	cmp	r3, #24
 8003966:	d01d      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8003968:	2b18      	cmp	r3, #24
 800396a:	d815      	bhi.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 800396c:	2b00      	cmp	r3, #0
 800396e:	d002      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0xa22>
 8003970:	2b08      	cmp	r3, #8
 8003972:	d007      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003974:	e010      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0xa44>
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003976:	4b78      	ldr	r3, [pc, #480]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800397a:	4a77      	ldr	r2, [pc, #476]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800397c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003980:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003982:	e010      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0xa52>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003984:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003988:	3308      	adds	r3, #8
 800398a:	4618      	mov	r0, r3
 800398c:	f001 fb1c 	bl	8004fc8 <RCCEx_PLL2_Config>
 8003990:	4603      	mov	r3, r0
 8003992:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003996:	e006      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800399e:	e002      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 80039a0:	bf00      	nop
 80039a2:	e000      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 80039a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039a6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d10c      	bne.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80039ae:	4b6a      	ldr	r3, [pc, #424]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80039b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039b4:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80039b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80039bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039be:	4966      	ldr	r1, [pc, #408]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80039c6:	e003      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039c8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80039cc:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80039d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80039d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80039dc:	613b      	str	r3, [r7, #16]
 80039de:	2300      	movs	r3, #0
 80039e0:	617b      	str	r3, [r7, #20]
 80039e2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80039e6:	460b      	mov	r3, r1
 80039e8:	4313      	orrs	r3, r2
 80039ea:	d03e      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 80039ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80039f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039f6:	d020      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0xae6>
 80039f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039fc:	d819      	bhi.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0xade>
 80039fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a00:	d01d      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8003a02:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a04:	d815      	bhi.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0xade>
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d002      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0xabc>
 8003a0a:	2b40      	cmp	r3, #64	@ 0x40
 8003a0c:	d007      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8003a0e:	e010      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a10:	4b51      	ldr	r3, [pc, #324]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a14:	4a50      	ldr	r2, [pc, #320]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003a16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a1a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003a1c:	e010      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0xaec>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003a1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a22:	3308      	adds	r3, #8
 8003a24:	4618      	mov	r0, r3
 8003a26:	f001 facf 	bl	8004fc8 <RCCEx_PLL2_Config>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003a30:	e006      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003a38:	e002      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8003a3a:	bf00      	nop
 8003a3c:	e000      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8003a3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a40:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d10c      	bne.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8003a48:	4b43      	ldr	r3, [pc, #268]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a4e:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8003a52:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a58:	493f      	ldr	r1, [pc, #252]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003a60:	e003      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a62:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003a66:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a72:	2100      	movs	r1, #0
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	f003 0304 	and.w	r3, r3, #4
 8003a7a:	60fb      	str	r3, [r7, #12]
 8003a7c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003a80:	460b      	mov	r3, r1
 8003a82:	4313      	orrs	r3, r2
 8003a84:	d038      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8003a86:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a90:	d00e      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 8003a92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a96:	d815      	bhi.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xb70>
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d017      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0xb78>
 8003a9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003aa0:	d110      	bne.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xb70>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003aa2:	4b2d      	ldr	r3, [pc, #180]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aa6:	4a2c      	ldr	r2, [pc, #176]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003aa8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003aac:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003aae:	e00e      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ab0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ab4:	3308      	adds	r3, #8
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f001 fa86 	bl	8004fc8 <RCCEx_PLL2_Config>
 8003abc:	4603      	mov	r3, r0
 8003abe:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003ac2:	e004      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      default:
        ret = HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003aca:	e000      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        break;
 8003acc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ace:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10c      	bne.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8003ad6:	4b20      	ldr	r3, [pc, #128]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003ad8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003adc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ae0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ae4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ae6:	491c      	ldr	r1, [pc, #112]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8003aee:	e003      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003af0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003af4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003af8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b00:	2100      	movs	r1, #0
 8003b02:	6039      	str	r1, [r7, #0]
 8003b04:	f003 0310 	and.w	r3, r3, #16
 8003b08:	607b      	str	r3, [r7, #4]
 8003b0a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003b0e:	460b      	mov	r3, r1
 8003b10:	4313      	orrs	r3, r2
 8003b12:	d039      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0xc34>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8003b14:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b18:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b1a:	2b30      	cmp	r3, #48	@ 0x30
 8003b1c:	d01e      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8003b1e:	2b30      	cmp	r3, #48	@ 0x30
 8003b20:	d815      	bhi.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 8003b22:	2b10      	cmp	r3, #16
 8003b24:	d002      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 8003b26:	2b20      	cmp	r3, #32
 8003b28:	d007      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 8003b2a:	e010      	b.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0xbfa>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b30:	4a09      	ldr	r2, [pc, #36]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003b32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b36:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8003b38:	e011      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003b3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b3e:	3308      	adds	r3, #8
 8003b40:	4618      	mov	r0, r3
 8003b42:	f001 fa41 	bl	8004fc8 <RCCEx_PLL2_Config>
 8003b46:	4603      	mov	r3, r0
 8003b48:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8003b4c:	e007      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003b54:	e003      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 8003b56:	bf00      	nop
 8003b58:	44020c00 	.word	0x44020c00
        break;
 8003b5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b5e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10c      	bne.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8003b66:	4b0c      	ldr	r3, [pc, #48]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003b68:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003b6c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003b70:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b76:	4908      	ldr	r1, [pc, #32]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8003b7e:	e003      	b.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b80:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003b84:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);

  }
#endif /* CEC */

  return status;
 8003b88:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	37a8      	adds	r7, #168	@ 0xa8
 8003b90:	46bd      	mov	sp, r7
 8003b92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b96:	bf00      	nop
 8003b98:	44020c00 	.word	0x44020c00

08003b9c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b08b      	sub	sp, #44	@ 0x2c
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8003ba4:	4bae      	ldr	r3, [pc, #696]	@ (8003e60 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003ba6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ba8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bac:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003bae:	4bac      	ldr	r3, [pc, #688]	@ (8003e60 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bb2:	f003 0303 	and.w	r3, r3, #3
 8003bb6:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8003bb8:	4ba9      	ldr	r3, [pc, #676]	@ (8003e60 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bbc:	0a1b      	lsrs	r3, r3, #8
 8003bbe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bc2:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003bc4:	4ba6      	ldr	r3, [pc, #664]	@ (8003e60 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bc8:	091b      	lsrs	r3, r3, #4
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003bd0:	4ba3      	ldr	r3, [pc, #652]	@ (8003e60 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bd4:	08db      	lsrs	r3, r3, #3
 8003bd6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	fb02 f303 	mul.w	r3, r2, r3
 8003be0:	ee07 3a90 	vmov	s15, r3
 8003be4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003be8:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f000 8126 	beq.w	8003e40 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	2b03      	cmp	r3, #3
 8003bf8:	d053      	beq.n	8003ca2 <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	2b03      	cmp	r3, #3
 8003bfe:	d86f      	bhi.n	8003ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d003      	beq.n	8003c0e <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d02b      	beq.n	8003c64 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8003c0c:	e068      	b.n	8003ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003c0e:	4b94      	ldr	r3, [pc, #592]	@ (8003e60 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	08db      	lsrs	r3, r3, #3
 8003c14:	f003 0303 	and.w	r3, r3, #3
 8003c18:	4a92      	ldr	r2, [pc, #584]	@ (8003e64 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8003c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c1e:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	ee07 3a90 	vmov	s15, r3
 8003c26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	ee07 3a90 	vmov	s15, r3
 8003c30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c38:	6a3b      	ldr	r3, [r7, #32]
 8003c3a:	ee07 3a90 	vmov	s15, r3
 8003c3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c42:	ed97 6a04 	vldr	s12, [r7, #16]
 8003c46:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8003e68 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003c4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c5e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8003c62:	e068      	b.n	8003d36 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	ee07 3a90 	vmov	s15, r3
 8003c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c6e:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8003e6c <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8003c72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c76:	6a3b      	ldr	r3, [r7, #32]
 8003c78:	ee07 3a90 	vmov	s15, r3
 8003c7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c80:	ed97 6a04 	vldr	s12, [r7, #16]
 8003c84:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003e68 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003c88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c90:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c9c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8003ca0:	e049      	b.n	8003d36 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	ee07 3a90 	vmov	s15, r3
 8003ca8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cac:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8003e70 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8003cb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cb4:	6a3b      	ldr	r3, [r7, #32]
 8003cb6:	ee07 3a90 	vmov	s15, r3
 8003cba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cbe:	ed97 6a04 	vldr	s12, [r7, #16]
 8003cc2:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8003e68 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003cc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003cd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cda:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8003cde:	e02a      	b.n	8003d36 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003ce0:	4b5f      	ldr	r3, [pc, #380]	@ (8003e60 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	08db      	lsrs	r3, r3, #3
 8003ce6:	f003 0303 	and.w	r3, r3, #3
 8003cea:	4a5e      	ldr	r2, [pc, #376]	@ (8003e64 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8003cec:	fa22 f303 	lsr.w	r3, r2, r3
 8003cf0:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	ee07 3a90 	vmov	s15, r3
 8003cf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	ee07 3a90 	vmov	s15, r3
 8003d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d0a:	6a3b      	ldr	r3, [r7, #32]
 8003d0c:	ee07 3a90 	vmov	s15, r3
 8003d10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d14:	ed97 6a04 	vldr	s12, [r7, #16]
 8003d18:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8003e68 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003d1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d24:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d30:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8003d34:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003d36:	4b4a      	ldr	r3, [pc, #296]	@ (8003e60 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d42:	d121      	bne.n	8003d88 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8003d44:	4b46      	ldr	r3, [pc, #280]	@ (8003e60 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d017      	beq.n	8003d80 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003d50:	4b43      	ldr	r3, [pc, #268]	@ (8003e60 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003d52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d54:	0a5b      	lsrs	r3, r3, #9
 8003d56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d5a:	ee07 3a90 	vmov	s15, r3
 8003d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8003d62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d66:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8003d6a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003d6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d76:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	601a      	str	r2, [r3, #0]
 8003d7e:	e006      	b.n	8003d8e <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	601a      	str	r2, [r3, #0]
 8003d86:	e002      	b.n	8003d8e <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003d8e:	4b34      	ldr	r3, [pc, #208]	@ (8003e60 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d96:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d9a:	d121      	bne.n	8003de0 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8003d9c:	4b30      	ldr	r3, [pc, #192]	@ (8003e60 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d017      	beq.n	8003dd8 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003da8:	4b2d      	ldr	r3, [pc, #180]	@ (8003e60 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003daa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dac:	0c1b      	lsrs	r3, r3, #16
 8003dae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003db2:	ee07 3a90 	vmov	s15, r3
 8003db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8003dba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003dbe:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8003dc2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003dc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dce:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	605a      	str	r2, [r3, #4]
 8003dd6:	e006      	b.n	8003de6 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	605a      	str	r2, [r3, #4]
 8003dde:	e002      	b.n	8003de6 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003de6:	4b1e      	ldr	r3, [pc, #120]	@ (8003e60 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003df2:	d121      	bne.n	8003e38 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8003df4:	4b1a      	ldr	r3, [pc, #104]	@ (8003e60 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d017      	beq.n	8003e30 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003e00:	4b17      	ldr	r3, [pc, #92]	@ (8003e60 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003e02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e04:	0e1b      	lsrs	r3, r3, #24
 8003e06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e0a:	ee07 3a90 	vmov	s15, r3
 8003e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8003e12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e16:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8003e1a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003e1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e26:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8003e2e:	e010      	b.n	8003e52 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	609a      	str	r2, [r3, #8]
}
 8003e36:	e00c      	b.n	8003e52 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	609a      	str	r2, [r3, #8]
}
 8003e3e:	e008      	b.n	8003e52 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	609a      	str	r2, [r3, #8]
}
 8003e52:	bf00      	nop
 8003e54:	372c      	adds	r7, #44	@ 0x2c
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	44020c00 	.word	0x44020c00
 8003e64:	03d09000 	.word	0x03d09000
 8003e68:	46000000 	.word	0x46000000
 8003e6c:	4a742400 	.word	0x4a742400
 8003e70:	4bbebc20 	.word	0x4bbebc20

08003e74 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b08b      	sub	sp, #44	@ 0x2c
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8003e7c:	4bae      	ldr	r3, [pc, #696]	@ (8004138 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003e7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e84:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8003e86:	4bac      	ldr	r3, [pc, #688]	@ (8004138 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e8a:	f003 0303 	and.w	r3, r3, #3
 8003e8e:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8003e90:	4ba9      	ldr	r3, [pc, #676]	@ (8004138 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e94:	0a1b      	lsrs	r3, r3, #8
 8003e96:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e9a:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8003e9c:	4ba6      	ldr	r3, [pc, #664]	@ (8004138 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea0:	091b      	lsrs	r3, r3, #4
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8003ea8:	4ba3      	ldr	r3, [pc, #652]	@ (8004138 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eac:	08db      	lsrs	r3, r3, #3
 8003eae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	fb02 f303 	mul.w	r3, r2, r3
 8003eb8:	ee07 3a90 	vmov	s15, r3
 8003ebc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ec0:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f000 8126 	beq.w	8004118 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	2b03      	cmp	r3, #3
 8003ed0:	d053      	beq.n	8003f7a <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	2b03      	cmp	r3, #3
 8003ed6:	d86f      	bhi.n	8003fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d003      	beq.n	8003ee6 <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d02b      	beq.n	8003f3c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8003ee4:	e068      	b.n	8003fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003ee6:	4b94      	ldr	r3, [pc, #592]	@ (8004138 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	08db      	lsrs	r3, r3, #3
 8003eec:	f003 0303 	and.w	r3, r3, #3
 8003ef0:	4a92      	ldr	r2, [pc, #584]	@ (800413c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8003ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ef6:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	ee07 3a90 	vmov	s15, r3
 8003efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	ee07 3a90 	vmov	s15, r3
 8003f08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f10:	6a3b      	ldr	r3, [r7, #32]
 8003f12:	ee07 3a90 	vmov	s15, r3
 8003f16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f1a:	ed97 6a04 	vldr	s12, [r7, #16]
 8003f1e:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8004140 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8003f22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f36:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8003f3a:	e068      	b.n	800400e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	ee07 3a90 	vmov	s15, r3
 8003f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f46:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8004144 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8003f4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f4e:	6a3b      	ldr	r3, [r7, #32]
 8003f50:	ee07 3a90 	vmov	s15, r3
 8003f54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f58:	ed97 6a04 	vldr	s12, [r7, #16]
 8003f5c:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004140 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8003f60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f68:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f74:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8003f78:	e049      	b.n	800400e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	ee07 3a90 	vmov	s15, r3
 8003f80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f84:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8004148 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8003f88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f8c:	6a3b      	ldr	r3, [r7, #32]
 8003f8e:	ee07 3a90 	vmov	s15, r3
 8003f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f96:	ed97 6a04 	vldr	s12, [r7, #16]
 8003f9a:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8004140 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8003f9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fa6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003faa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fb2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8003fb6:	e02a      	b.n	800400e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003fb8:	4b5f      	ldr	r3, [pc, #380]	@ (8004138 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	08db      	lsrs	r3, r3, #3
 8003fbe:	f003 0303 	and.w	r3, r3, #3
 8003fc2:	4a5e      	ldr	r2, [pc, #376]	@ (800413c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8003fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8003fc8:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	ee07 3a90 	vmov	s15, r3
 8003fd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	ee07 3a90 	vmov	s15, r3
 8003fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fe2:	6a3b      	ldr	r3, [r7, #32]
 8003fe4:	ee07 3a90 	vmov	s15, r3
 8003fe8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fec:	ed97 6a04 	vldr	s12, [r7, #16]
 8003ff0:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8004140 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8003ff4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ff8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ffc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004000:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004004:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004008:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800400c:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800400e:	4b4a      	ldr	r3, [pc, #296]	@ (8004138 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004016:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800401a:	d121      	bne.n	8004060 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800401c:	4b46      	ldr	r3, [pc, #280]	@ (8004138 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800401e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004020:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d017      	beq.n	8004058 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004028:	4b43      	ldr	r3, [pc, #268]	@ (8004138 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800402a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800402c:	0a5b      	lsrs	r3, r3, #9
 800402e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004032:	ee07 3a90 	vmov	s15, r3
 8004036:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 800403a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800403e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8004042:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004046:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800404a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800404e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	601a      	str	r2, [r3, #0]
 8004056:	e006      	b.n	8004066 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	e002      	b.n	8004066 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004066:	4b34      	ldr	r3, [pc, #208]	@ (8004138 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800406e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004072:	d121      	bne.n	80040b8 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8004074:	4b30      	ldr	r3, [pc, #192]	@ (8004138 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004078:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d017      	beq.n	80040b0 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004080:	4b2d      	ldr	r3, [pc, #180]	@ (8004138 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004082:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004084:	0c1b      	lsrs	r3, r3, #16
 8004086:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800408a:	ee07 3a90 	vmov	s15, r3
 800408e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8004092:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004096:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800409a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800409e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040a6:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	605a      	str	r2, [r3, #4]
 80040ae:	e006      	b.n	80040be <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	605a      	str	r2, [r3, #4]
 80040b6:	e002      	b.n	80040be <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80040be:	4b1e      	ldr	r3, [pc, #120]	@ (8004138 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80040c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040ca:	d121      	bne.n	8004110 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80040cc:	4b1a      	ldr	r3, [pc, #104]	@ (8004138 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80040ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d017      	beq.n	8004108 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80040d8:	4b17      	ldr	r3, [pc, #92]	@ (8004138 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80040da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040dc:	0e1b      	lsrs	r3, r3, #24
 80040de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040e2:	ee07 3a90 	vmov	s15, r3
 80040e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80040ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80040ee:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80040f2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80040f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040fe:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004106:	e010      	b.n	800412a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	609a      	str	r2, [r3, #8]
}
 800410e:	e00c      	b.n	800412a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	609a      	str	r2, [r3, #8]
}
 8004116:	e008      	b.n	800412a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	609a      	str	r2, [r3, #8]
}
 800412a:	bf00      	nop
 800412c:	372c      	adds	r7, #44	@ 0x2c
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	44020c00 	.word	0x44020c00
 800413c:	03d09000 	.word	0x03d09000
 8004140:	46000000 	.word	0x46000000
 8004144:	4a742400 	.word	0x4a742400
 8004148:	4bbebc20 	.word	0x4bbebc20

0800414c <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b08c      	sub	sp, #48	@ 0x30
 8004150:	af00      	add	r7, sp, #0
 8004152:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8004156:	e9d7 2300 	ldrd	r2, r3, [r7]
 800415a:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800415e:	430b      	orrs	r3, r1
 8004160:	d14b      	bne.n	80041fa <HAL_RCCEx_GetPeriphCLKFreq+0xae>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004162:	4bc4      	ldr	r3, [pc, #784]	@ (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004164:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004168:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800416c:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800416e:	4bc1      	ldr	r3, [pc, #772]	@ (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004170:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b02      	cmp	r3, #2
 800417a:	d108      	bne.n	800418e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800417c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800417e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004182:	d104      	bne.n	800418e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8004184:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004188:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800418a:	f000 bf14 	b.w	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800418e:	4bb9      	ldr	r3, [pc, #740]	@ (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004190:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004194:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004198:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800419c:	d108      	bne.n	80041b0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800419e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041a4:	d104      	bne.n	80041b0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 80041a6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80041aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041ac:	f000 bf03 	b.w	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 80041b0:	4bb0      	ldr	r3, [pc, #704]	@ (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041bc:	d119      	bne.n	80041f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80041be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041c4:	d115      	bne.n	80041f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80041c6:	4bab      	ldr	r3, [pc, #684]	@ (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80041c8:	69db      	ldr	r3, [r3, #28]
 80041ca:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 80041ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041d2:	d30a      	bcc.n	80041ea <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 80041d4:	4ba7      	ldr	r3, [pc, #668]	@ (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80041d6:	69db      	ldr	r3, [r3, #28]
 80041d8:	0a1b      	lsrs	r3, r3, #8
 80041da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041de:	4aa6      	ldr	r2, [pc, #664]	@ (8004478 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 80041e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80041e6:	f000 bee6 	b.w	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
      }
      else
      {
        frequency = 0U;
 80041ea:	2300      	movs	r3, #0
 80041ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80041ee:	f000 bee2 	b.w	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80041f2:	2300      	movs	r3, #0
 80041f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041f6:	f000 bede 	b.w	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80041fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041fe:	f5a3 5180 	sub.w	r1, r3, #4096	@ 0x1000
 8004202:	ea52 0301 	orrs.w	r3, r2, r1
 8004206:	f000 838e 	beq.w	8004926 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 800420a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800420e:	2a01      	cmp	r2, #1
 8004210:	f573 5380 	sbcs.w	r3, r3, #4096	@ 0x1000
 8004214:	f080 86cc 	bcs.w	8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004218:	e9d7 2300 	ldrd	r2, r3, [r7]
 800421c:	f5a3 7100 	sub.w	r1, r3, #512	@ 0x200
 8004220:	ea52 0301 	orrs.w	r3, r2, r1
 8004224:	f000 82aa 	beq.w	800477c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8004228:	e9d7 2300 	ldrd	r2, r3, [r7]
 800422c:	2a01      	cmp	r2, #1
 800422e:	f573 7300 	sbcs.w	r3, r3, #512	@ 0x200
 8004232:	f080 86bd 	bcs.w	8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004236:	e9d7 2300 	ldrd	r2, r3, [r7]
 800423a:	f1a3 0110 	sub.w	r1, r3, #16
 800423e:	ea52 0301 	orrs.w	r3, r2, r1
 8004242:	f000 8681 	beq.w	8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 8004246:	e9d7 2300 	ldrd	r2, r3, [r7]
 800424a:	2a01      	cmp	r2, #1
 800424c:	f173 0310 	sbcs.w	r3, r3, #16
 8004250:	f080 86ae 	bcs.w	8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004254:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004258:	1f19      	subs	r1, r3, #4
 800425a:	ea52 0301 	orrs.w	r3, r2, r1
 800425e:	f000 84b1 	beq.w	8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8004262:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004266:	2a01      	cmp	r2, #1
 8004268:	f173 0304 	sbcs.w	r3, r3, #4
 800426c:	f080 86a0 	bcs.w	8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004270:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004274:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 8004278:	430b      	orrs	r3, r1
 800427a:	f000 85aa 	beq.w	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xc86>
 800427e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004282:	497e      	ldr	r1, [pc, #504]	@ (800447c <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8004284:	428a      	cmp	r2, r1
 8004286:	f173 0300 	sbcs.w	r3, r3, #0
 800428a:	f080 8691 	bcs.w	8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800428e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004292:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8004296:	430b      	orrs	r3, r1
 8004298:	f000 8532 	beq.w	8004d00 <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
 800429c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042a0:	4977      	ldr	r1, [pc, #476]	@ (8004480 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 80042a2:	428a      	cmp	r2, r1
 80042a4:	f173 0300 	sbcs.w	r3, r3, #0
 80042a8:	f080 8682 	bcs.w	8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80042ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042b0:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 80042b4:	430b      	orrs	r3, r1
 80042b6:	f000 84bc 	beq.w	8004c32 <HAL_RCCEx_GetPeriphCLKFreq+0xae6>
 80042ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042be:	4971      	ldr	r1, [pc, #452]	@ (8004484 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 80042c0:	428a      	cmp	r2, r1
 80042c2:	f173 0300 	sbcs.w	r3, r3, #0
 80042c6:	f080 8673 	bcs.w	8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80042ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042ce:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 80042d2:	430b      	orrs	r3, r1
 80042d4:	f000 85f2 	beq.w	8004ebc <HAL_RCCEx_GetPeriphCLKFreq+0xd70>
 80042d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042dc:	496a      	ldr	r1, [pc, #424]	@ (8004488 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 80042de:	428a      	cmp	r2, r1
 80042e0:	f173 0300 	sbcs.w	r3, r3, #0
 80042e4:	f080 8664 	bcs.w	8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80042e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042ec:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 80042f0:	430b      	orrs	r3, r1
 80042f2:	f000 81e5 	beq.w	80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 80042f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042fa:	4964      	ldr	r1, [pc, #400]	@ (800448c <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
 80042fc:	428a      	cmp	r2, r1
 80042fe:	f173 0300 	sbcs.w	r3, r3, #0
 8004302:	f080 8655 	bcs.w	8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004306:	e9d7 2300 	ldrd	r2, r3, [r7]
 800430a:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800430e:	430b      	orrs	r3, r1
 8004310:	f000 83cc 	beq.w	8004aac <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8004314:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004318:	495d      	ldr	r1, [pc, #372]	@ (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 800431a:	428a      	cmp	r2, r1
 800431c:	f173 0300 	sbcs.w	r3, r3, #0
 8004320:	f080 8646 	bcs.w	8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004324:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004328:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800432c:	430b      	orrs	r3, r1
 800432e:	f000 8331 	beq.w	8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
 8004332:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004336:	4957      	ldr	r1, [pc, #348]	@ (8004494 <HAL_RCCEx_GetPeriphCLKFreq+0x348>)
 8004338:	428a      	cmp	r2, r1
 800433a:	f173 0300 	sbcs.w	r3, r3, #0
 800433e:	f080 8637 	bcs.w	8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004342:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004346:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800434a:	430b      	orrs	r3, r1
 800434c:	f000 82bb 	beq.w	80048c6 <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
 8004350:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004354:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 8004358:	f173 0300 	sbcs.w	r3, r3, #0
 800435c:	f080 8628 	bcs.w	8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004360:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004364:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8004368:	430b      	orrs	r3, r1
 800436a:	f000 826d 	beq.w	8004848 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
 800436e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004372:	f244 0101 	movw	r1, #16385	@ 0x4001
 8004376:	428a      	cmp	r2, r1
 8004378:	f173 0300 	sbcs.w	r3, r3, #0
 800437c:	f080 8618 	bcs.w	8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004380:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004384:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8004388:	430b      	orrs	r3, r1
 800438a:	f000 821e 	beq.w	80047ca <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 800438e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004392:	f242 0101 	movw	r1, #8193	@ 0x2001
 8004396:	428a      	cmp	r2, r1
 8004398:	f173 0300 	sbcs.w	r3, r3, #0
 800439c:	f080 8608 	bcs.w	8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80043a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043a4:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80043a8:	430b      	orrs	r3, r1
 80043aa:	f000 8137 	beq.w	800461c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80043ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043b2:	f241 0101 	movw	r1, #4097	@ 0x1001
 80043b6:	428a      	cmp	r2, r1
 80043b8:	f173 0300 	sbcs.w	r3, r3, #0
 80043bc:	f080 85f8 	bcs.w	8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80043c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043c4:	1f11      	subs	r1, r2, #4
 80043c6:	430b      	orrs	r3, r1
 80043c8:	f000 80d2 	beq.w	8004570 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 80043cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043d0:	2a05      	cmp	r2, #5
 80043d2:	f173 0300 	sbcs.w	r3, r3, #0
 80043d6:	f080 85eb 	bcs.w	8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80043da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043de:	1e51      	subs	r1, r2, #1
 80043e0:	430b      	orrs	r3, r1
 80043e2:	d006      	beq.n	80043f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 80043e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043e8:	1e91      	subs	r1, r2, #2
 80043ea:	430b      	orrs	r3, r1
 80043ec:	d06c      	beq.n	80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 80043ee:	f000 bddf 	b.w	8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80043f2:	4b20      	ldr	r3, [pc, #128]	@ (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80043f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80043f8:	f003 0307 	and.w	r3, r3, #7
 80043fc:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80043fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004400:	2b00      	cmp	r3, #0
 8004402:	d104      	bne.n	800440e <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8004404:	f7fe fd7a 	bl	8002efc <HAL_RCC_GetPCLK2Freq>
 8004408:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800440a:	f000 bdd4 	b.w	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 800440e:	4b19      	ldr	r3, [pc, #100]	@ (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004416:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800441a:	d10a      	bne.n	8004432 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
 800441c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800441e:	2b01      	cmp	r3, #1
 8004420:	d107      	bne.n	8004432 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004422:	f107 030c 	add.w	r3, r7, #12
 8004426:	4618      	mov	r0, r3
 8004428:	f7ff fd24 	bl	8003e74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004430:	e048      	b.n	80044c4 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8004432:	4b10      	ldr	r3, [pc, #64]	@ (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b02      	cmp	r3, #2
 800443c:	d10c      	bne.n	8004458 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 800443e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004440:	2b03      	cmp	r3, #3
 8004442:	d109      	bne.n	8004458 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004444:	4b0b      	ldr	r3, [pc, #44]	@ (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	08db      	lsrs	r3, r3, #3
 800444a:	f003 0303 	and.w	r3, r3, #3
 800444e:	4a12      	ldr	r2, [pc, #72]	@ (8004498 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004450:	fa22 f303 	lsr.w	r3, r2, r3
 8004454:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004456:	e035      	b.n	80044c4 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8004458:	4b06      	ldr	r3, [pc, #24]	@ (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004460:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004464:	d11c      	bne.n	80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8004466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004468:	2b04      	cmp	r3, #4
 800446a:	d119      	bne.n	80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
          frequency = CSI_VALUE;
 800446c:	4b0b      	ldr	r3, [pc, #44]	@ (800449c <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 800446e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004470:	e028      	b.n	80044c4 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8004472:	bf00      	nop
 8004474:	44020c00 	.word	0x44020c00
 8004478:	017d7840 	.word	0x017d7840
 800447c:	20000001 	.word	0x20000001
 8004480:	10000001 	.word	0x10000001
 8004484:	08000001 	.word	0x08000001
 8004488:	04000001 	.word	0x04000001
 800448c:	00200001 	.word	0x00200001
 8004490:	00040001 	.word	0x00040001
 8004494:	00020001 	.word	0x00020001
 8004498:	03d09000 	.word	0x03d09000
 800449c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80044a0:	4b9f      	ldr	r3, [pc, #636]	@ (8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80044a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d106      	bne.n	80044bc <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80044ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044b0:	2b05      	cmp	r3, #5
 80044b2:	d103      	bne.n	80044bc <HAL_RCCEx_GetPeriphCLKFreq+0x370>
          frequency = LSE_VALUE;
 80044b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044ba:	e003      	b.n	80044c4 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
          frequency = 0U;
 80044bc:	2300      	movs	r3, #0
 80044be:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80044c0:	f000 bd79 	b.w	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80044c4:	f000 bd77 	b.w	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80044c8:	4b95      	ldr	r3, [pc, #596]	@ (8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80044ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80044ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80044d2:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80044d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d104      	bne.n	80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80044da:	f7fe fcf9 	bl	8002ed0 <HAL_RCC_GetPCLK1Freq>
 80044de:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 80044e0:	f000 bd69 	b.w	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 80044e4:	4b8e      	ldr	r3, [pc, #568]	@ (8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044f0:	d10a      	bne.n	8004508 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 80044f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044f4:	2b08      	cmp	r3, #8
 80044f6:	d107      	bne.n	8004508 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80044f8:	f107 030c 	add.w	r3, r7, #12
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7ff fcb9 	bl	8003e74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004506:	e031      	b.n	800456c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8004508:	4b85      	ldr	r3, [pc, #532]	@ (8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	2b02      	cmp	r3, #2
 8004512:	d10c      	bne.n	800452e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8004514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004516:	2b18      	cmp	r3, #24
 8004518:	d109      	bne.n	800452e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800451a:	4b81      	ldr	r3, [pc, #516]	@ (8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	08db      	lsrs	r3, r3, #3
 8004520:	f003 0303 	and.w	r3, r3, #3
 8004524:	4a7f      	ldr	r2, [pc, #508]	@ (8004724 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8004526:	fa22 f303 	lsr.w	r3, r2, r3
 800452a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800452c:	e01e      	b.n	800456c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800452e:	4b7c      	ldr	r3, [pc, #496]	@ (8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004536:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800453a:	d105      	bne.n	8004548 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 800453c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800453e:	2b20      	cmp	r3, #32
 8004540:	d102      	bne.n	8004548 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
          frequency = CSI_VALUE;
 8004542:	4b79      	ldr	r3, [pc, #484]	@ (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8004544:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004546:	e011      	b.n	800456c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8004548:	4b75      	ldr	r3, [pc, #468]	@ (8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800454a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	2b02      	cmp	r3, #2
 8004554:	d106      	bne.n	8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8004556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004558:	2b28      	cmp	r3, #40	@ 0x28
 800455a:	d103      	bne.n	8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = LSE_VALUE;
 800455c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004560:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004562:	e003      	b.n	800456c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
          frequency = 0U;
 8004564:	2300      	movs	r3, #0
 8004566:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004568:	f000 bd25 	b.w	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800456c:	f000 bd23 	b.w	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004570:	4b6b      	ldr	r3, [pc, #428]	@ (8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004572:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004576:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800457a:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800457c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800457e:	2b00      	cmp	r3, #0
 8004580:	d104      	bne.n	800458c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004582:	f7fe fca5 	bl	8002ed0 <HAL_RCC_GetPCLK1Freq>
 8004586:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8004588:	f000 bd15 	b.w	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 800458c:	4b64      	ldr	r3, [pc, #400]	@ (8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004594:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004598:	d10a      	bne.n	80045b0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
 800459a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800459c:	2b40      	cmp	r3, #64	@ 0x40
 800459e:	d107      	bne.n	80045b0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80045a0:	f107 030c 	add.w	r3, r7, #12
 80045a4:	4618      	mov	r0, r3
 80045a6:	f7ff fc65 	bl	8003e74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045ae:	e033      	b.n	8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80045b0:	4b5b      	ldr	r3, [pc, #364]	@ (8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0302 	and.w	r3, r3, #2
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d10c      	bne.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80045bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045be:	2bc0      	cmp	r3, #192	@ 0xc0
 80045c0:	d109      	bne.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80045c2:	4b57      	ldr	r3, [pc, #348]	@ (8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	08db      	lsrs	r3, r3, #3
 80045c8:	f003 0303 	and.w	r3, r3, #3
 80045cc:	4a55      	ldr	r2, [pc, #340]	@ (8004724 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80045ce:	fa22 f303 	lsr.w	r3, r2, r3
 80045d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045d4:	e020      	b.n	8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 80045d6:	4b52      	ldr	r3, [pc, #328]	@ (8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045e2:	d106      	bne.n	80045f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 80045e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045ea:	d102      	bne.n	80045f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          frequency = CSI_VALUE;
 80045ec:	4b4e      	ldr	r3, [pc, #312]	@ (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 80045ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045f0:	e012      	b.n	8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80045f2:	4b4b      	ldr	r3, [pc, #300]	@ (8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80045f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d107      	bne.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8004600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004602:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004606:	d103      	bne.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
          frequency = LSE_VALUE;
 8004608:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800460c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800460e:	e003      	b.n	8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          frequency = 0U;
 8004610:	2300      	movs	r3, #0
 8004612:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004614:	f000 bccf 	b.w	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004618:	f000 bccd 	b.w	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800461c:	4b40      	ldr	r3, [pc, #256]	@ (8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800461e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004622:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8004626:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8004628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800462a:	2b00      	cmp	r3, #0
 800462c:	d104      	bne.n	8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800462e:	f7fe fc7b 	bl	8002f28 <HAL_RCC_GetPCLK3Freq>
 8004632:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004634:	f000 bcbf 	b.w	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8004638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800463a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800463e:	d108      	bne.n	8004652 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004640:	f107 030c 	add.w	r3, r7, #12
 8004644:	4618      	mov	r0, r3
 8004646:	f7ff fc15 	bl	8003e74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800464e:	f000 bcb2 	b.w	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8004652:	4b33      	ldr	r3, [pc, #204]	@ (8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b02      	cmp	r3, #2
 800465c:	d10d      	bne.n	800467a <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 800465e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004660:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004664:	d109      	bne.n	800467a <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004666:	4b2e      	ldr	r3, [pc, #184]	@ (8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	08db      	lsrs	r3, r3, #3
 800466c:	f003 0303 	and.w	r3, r3, #3
 8004670:	4a2c      	ldr	r2, [pc, #176]	@ (8004724 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8004672:	fa22 f303 	lsr.w	r3, r2, r3
 8004676:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004678:	e020      	b.n	80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 800467a:	4b29      	ldr	r3, [pc, #164]	@ (8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004682:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004686:	d106      	bne.n	8004696 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 8004688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800468a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800468e:	d102      	bne.n	8004696 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = CSI_VALUE;
 8004690:	4b25      	ldr	r3, [pc, #148]	@ (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8004692:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004694:	e012      	b.n	80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8004696:	4b22      	ldr	r3, [pc, #136]	@ (8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004698:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800469c:	f003 0302 	and.w	r3, r3, #2
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d107      	bne.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 80046a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046a6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80046aa:	d103      	bne.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
          frequency = LSE_VALUE;
 80046ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046b2:	e003      	b.n	80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x570>
          frequency = 0U;
 80046b4:	2300      	movs	r3, #0
 80046b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80046b8:	f000 bc7d 	b.w	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80046bc:	f000 bc7b 	b.w	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80046c0:	4b17      	ldr	r3, [pc, #92]	@ (8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80046c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80046c6:	f003 0307 	and.w	r3, r3, #7
 80046ca:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80046cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d104      	bne.n	80046dc <HAL_RCCEx_GetPeriphCLKFreq+0x590>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 80046d2:	f7fe fbe1 	bl	8002e98 <HAL_RCC_GetHCLKFreq>
 80046d6:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 80046d8:	f000 bc6d 	b.w	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80046dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d104      	bne.n	80046ec <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          frequency = HAL_RCC_GetSysClockFreq();
 80046e2:	f7fe faad 	bl	8002c40 <HAL_RCC_GetSysClockFreq>
 80046e6:	62f8      	str	r0, [r7, #44]	@ 0x2c
        break;
 80046e8:	f000 bc65 	b.w	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 80046ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d108      	bne.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80046f2:	f107 030c 	add.w	r3, r7, #12
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7ff fbbc 	bl	8003e74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004700:	f000 bc59 	b.w	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8004704:	4b06      	ldr	r3, [pc, #24]	@ (8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800470c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004710:	d10e      	bne.n	8004730 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8004712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004714:	2b03      	cmp	r3, #3
 8004716:	d10b      	bne.n	8004730 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
          frequency = HSE_VALUE;
 8004718:	4b04      	ldr	r3, [pc, #16]	@ (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800471a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800471c:	e02c      	b.n	8004778 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
 800471e:	bf00      	nop
 8004720:	44020c00 	.word	0x44020c00
 8004724:	03d09000 	.word	0x03d09000
 8004728:	003d0900 	.word	0x003d0900
 800472c:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8004730:	4b95      	ldr	r3, [pc, #596]	@ (8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0302 	and.w	r3, r3, #2
 8004738:	2b02      	cmp	r3, #2
 800473a:	d10c      	bne.n	8004756 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
 800473c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800473e:	2b04      	cmp	r3, #4
 8004740:	d109      	bne.n	8004756 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004742:	4b91      	ldr	r3, [pc, #580]	@ (8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	08db      	lsrs	r3, r3, #3
 8004748:	f003 0303 	and.w	r3, r3, #3
 800474c:	4a8f      	ldr	r2, [pc, #572]	@ (800498c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800474e:	fa22 f303 	lsr.w	r3, r2, r3
 8004752:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004754:	e010      	b.n	8004778 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8004756:	4b8c      	ldr	r3, [pc, #560]	@ (8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800475e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004762:	d105      	bne.n	8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8004764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004766:	2b05      	cmp	r3, #5
 8004768:	d102      	bne.n	8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          frequency = CSI_VALUE;
 800476a:	4b89      	ldr	r3, [pc, #548]	@ (8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800476c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800476e:	e003      	b.n	8004778 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
          frequency = 0U;
 8004770:	2300      	movs	r3, #0
 8004772:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004774:	f000 bc1f 	b.w	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004778:	f000 bc1d 	b.w	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 800477c:	4b82      	ldr	r3, [pc, #520]	@ (8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800477e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004782:	f003 0308 	and.w	r3, r3, #8
 8004786:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8004788:	4b7f      	ldr	r3, [pc, #508]	@ (8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800478a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b02      	cmp	r3, #2
 8004794:	d106      	bne.n	80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8004796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004798:	2b00      	cmp	r3, #0
 800479a:	d103      	bne.n	80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        {
          frequency = LSE_VALUE;
 800479c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047a2:	e011      	b.n	80047c8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 80047a4:	4b78      	ldr	r3, [pc, #480]	@ (8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80047a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80047aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80047b2:	d106      	bne.n	80047c2 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
 80047b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047b6:	2b08      	cmp	r3, #8
 80047b8:	d103      	bne.n	80047c2 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
        {
          frequency = LSI_VALUE;
 80047ba:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80047be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047c0:	e002      	b.n	80047c8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 80047c2:	2300      	movs	r3, #0
 80047c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 80047c6:	e3f6      	b.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80047c8:	e3f5      	b.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80047ca:	4b6f      	ldr	r3, [pc, #444]	@ (8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80047cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80047d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80047d4:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80047d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d103      	bne.n	80047e4 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80047dc:	f7fe fb78 	bl	8002ed0 <HAL_RCC_GetPCLK1Freq>
 80047e0:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80047e2:	e3e8      	b.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL2R)
 80047e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047ea:	d107      	bne.n	80047fc <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80047ec:	f107 030c 	add.w	r3, r7, #12
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7ff fb3f 	bl	8003e74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80047fa:	e3dc      	b.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80047fc:	4b62      	ldr	r3, [pc, #392]	@ (8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0302 	and.w	r3, r3, #2
 8004804:	2b02      	cmp	r3, #2
 8004806:	d10d      	bne.n	8004824 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8004808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800480a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800480e:	d109      	bne.n	8004824 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004810:	4b5d      	ldr	r3, [pc, #372]	@ (8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	08db      	lsrs	r3, r3, #3
 8004816:	f003 0303 	and.w	r3, r3, #3
 800481a:	4a5c      	ldr	r2, [pc, #368]	@ (800498c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800481c:	fa22 f303 	lsr.w	r3, r2, r3
 8004820:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004822:	e010      	b.n	8004846 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8004824:	4b58      	ldr	r3, [pc, #352]	@ (8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800482c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004830:	d106      	bne.n	8004840 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8004832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004834:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004838:	d102      	bne.n	8004840 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
          frequency = CSI_VALUE;
 800483a:	4b55      	ldr	r3, [pc, #340]	@ (8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800483c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800483e:	e002      	b.n	8004846 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
          frequency = 0U;
 8004840:	2300      	movs	r3, #0
 8004842:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004844:	e3b7      	b.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004846:	e3b6      	b.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004848:	4b4f      	ldr	r3, [pc, #316]	@ (8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800484a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800484e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004852:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8004854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004856:	2b00      	cmp	r3, #0
 8004858:	d103      	bne.n	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800485a:	f7fe fb39 	bl	8002ed0 <HAL_RCC_GetPCLK1Freq>
 800485e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004860:	e3a9      	b.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL2R)
 8004862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004864:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004868:	d107      	bne.n	800487a <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800486a:	f107 030c 	add.w	r3, r7, #12
 800486e:	4618      	mov	r0, r3
 8004870:	f7ff fb00 	bl	8003e74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004878:	e39d      	b.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800487a:	4b43      	ldr	r3, [pc, #268]	@ (8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b02      	cmp	r3, #2
 8004884:	d10d      	bne.n	80048a2 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8004886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004888:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800488c:	d109      	bne.n	80048a2 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800488e:	4b3e      	ldr	r3, [pc, #248]	@ (8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	08db      	lsrs	r3, r3, #3
 8004894:	f003 0303 	and.w	r3, r3, #3
 8004898:	4a3c      	ldr	r2, [pc, #240]	@ (800498c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800489a:	fa22 f303 	lsr.w	r3, r2, r3
 800489e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048a0:	e010      	b.n	80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 80048a2:	4b39      	ldr	r3, [pc, #228]	@ (8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048ae:	d106      	bne.n	80048be <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 80048b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048b2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80048b6:	d102      	bne.n	80048be <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          frequency = CSI_VALUE;
 80048b8:	4b35      	ldr	r3, [pc, #212]	@ (8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80048ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048bc:	e002      	b.n	80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = 0U;
 80048be:	2300      	movs	r3, #0
 80048c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80048c2:	e378      	b.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80048c4:	e377      	b.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 80048c6:	4b30      	ldr	r3, [pc, #192]	@ (8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80048c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80048cc:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80048d0:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 80048d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d103      	bne.n	80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80048d8:	f7fe fafa 	bl	8002ed0 <HAL_RCC_GetPCLK1Freq>
 80048dc:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80048de:	e36a      	b.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL2R)
 80048e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80048e6:	d107      	bne.n	80048f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80048e8:	f107 030c 	add.w	r3, r7, #12
 80048ec:	4618      	mov	r0, r3
 80048ee:	f7ff fac1 	bl	8003e74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80048f6:	e35e      	b.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 80048f8:	4b23      	ldr	r3, [pc, #140]	@ (8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0302 	and.w	r3, r3, #2
 8004900:	2b02      	cmp	r3, #2
 8004902:	d10d      	bne.n	8004920 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
 8004904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004906:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800490a:	d109      	bne.n	8004920 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800490c:	4b1e      	ldr	r3, [pc, #120]	@ (8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	08db      	lsrs	r3, r3, #3
 8004912:	f003 0303 	and.w	r3, r3, #3
 8004916:	4a1d      	ldr	r2, [pc, #116]	@ (800498c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004918:	fa22 f303 	lsr.w	r3, r2, r3
 800491c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800491e:	e34a      	b.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8004920:	2300      	movs	r3, #0
 8004922:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004924:	e347      	b.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8004926:	4b18      	ldr	r3, [pc, #96]	@ (8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004928:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800492c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8004930:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8004932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004934:	2b00      	cmp	r3, #0
 8004936:	d103      	bne.n	8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8004938:	f7fe faf6 	bl	8002f28 <HAL_RCC_GetPCLK3Freq>
 800493c:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800493e:	e33a      	b.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL2R)
 8004940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004942:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004946:	d107      	bne.n	8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004948:	f107 030c 	add.w	r3, r7, #12
 800494c:	4618      	mov	r0, r3
 800494e:	f7ff fa91 	bl	8003e74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004956:	e32e      	b.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8004958:	4b0b      	ldr	r3, [pc, #44]	@ (8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0302 	and.w	r3, r3, #2
 8004960:	2b02      	cmp	r3, #2
 8004962:	d10d      	bne.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 8004964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004966:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800496a:	d109      	bne.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800496c:	4b06      	ldr	r3, [pc, #24]	@ (8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	08db      	lsrs	r3, r3, #3
 8004972:	f003 0303 	and.w	r3, r3, #3
 8004976:	4a05      	ldr	r2, [pc, #20]	@ (800498c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004978:	fa22 f303 	lsr.w	r3, r2, r3
 800497c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800497e:	e31a      	b.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8004980:	2300      	movs	r3, #0
 8004982:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004984:	e317      	b.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004986:	bf00      	nop
 8004988:	44020c00 	.word	0x44020c00
 800498c:	03d09000 	.word	0x03d09000
 8004990:	003d0900 	.word	0x003d0900
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004994:	4b9b      	ldr	r3, [pc, #620]	@ (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004996:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800499a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800499e:	62bb      	str	r3, [r7, #40]	@ 0x28

        switch (srcclk)
 80049a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049a2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80049a6:	d044      	beq.n	8004a32 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80049a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049aa:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80049ae:	d879      	bhi.n	8004aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 80049b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049b6:	d02d      	beq.n	8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 80049b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049be:	d871      	bhi.n	8004aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 80049c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049c6:	d017      	beq.n	80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 80049c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049ce:	d869      	bhi.n	8004aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 80049d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d004      	beq.n	80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 80049d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049dc:	d004      	beq.n	80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 80049de:	e061      	b.n	8004aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80049e0:	f7fe faa2 	bl	8002f28 <HAL_RCC_GetPCLK3Freq>
 80049e4:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 80049e6:	e060      	b.n	8004aaa <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80049e8:	f107 030c 	add.w	r3, r7, #12
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7ff fa41 	bl	8003e74 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80049f6:	e058      	b.n	8004aaa <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
            break;
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80049f8:	4b82      	ldr	r3, [pc, #520]	@ (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80049fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d103      	bne.n	8004a0e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
            {
              frequency = LSE_VALUE;
 8004a06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004a0c:	e04d      	b.n	8004aaa <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004a12:	e04a      	b.n	8004aaa <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004a14:	4b7b      	ldr	r3, [pc, #492]	@ (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004a16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a1a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a22:	d103      	bne.n	8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
            {
              frequency = LSI_VALUE;
 8004a24:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004a2a:	e03e      	b.n	8004aaa <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004a30:	e03b      	b.n	8004aaa <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004a32:	4b74      	ldr	r3, [pc, #464]	@ (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004a34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004a38:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004a3c:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004a3e:	4b71      	ldr	r3, [pc, #452]	@ (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0302 	and.w	r3, r3, #2
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d10c      	bne.n	8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d109      	bne.n	8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004a50:	4b6c      	ldr	r3, [pc, #432]	@ (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	08db      	lsrs	r3, r3, #3
 8004a56:	f003 0303 	and.w	r3, r3, #3
 8004a5a:	4a6b      	ldr	r2, [pc, #428]	@ (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8004a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a62:	e01e      	b.n	8004aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004a64:	4b67      	ldr	r3, [pc, #412]	@ (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a70:	d106      	bne.n	8004a80 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8004a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a78:	d102      	bne.n	8004a80 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004a7a:	4b64      	ldr	r3, [pc, #400]	@ (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8004a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a7e:	e010      	b.n	8004aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004a80:	4b60      	ldr	r3, [pc, #384]	@ (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a8c:	d106      	bne.n	8004a9c <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 8004a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a94:	d102      	bne.n	8004a9c <HAL_RCCEx_GetPeriphCLKFreq+0x950>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004a96:	4b5e      	ldr	r3, [pc, #376]	@ (8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8004a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a9a:	e002      	b.n	8004aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8004aa0:	e003      	b.n	8004aaa <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
 8004aa2:	e002      	b.n	8004aaa <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          default :
          {
            frequency = 0U;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004aa8:	bf00      	nop
          }
        }
        break;
 8004aaa:	e284      	b.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004aac:	4b55      	ldr	r3, [pc, #340]	@ (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004aae:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004ab2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8004ab6:	62bb      	str	r3, [r7, #40]	@ 0x28

        switch (srcclk)
 8004ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aba:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004abe:	d044      	beq.n	8004b4a <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8004ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ac2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004ac6:	d879      	bhi.n	8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8004ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ace:	d02d      	beq.n	8004b2c <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 8004ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ad6:	d871      	bhi.n	8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8004ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ada:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004ade:	d017      	beq.n	8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 8004ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ae2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004ae6:	d869      	bhi.n	8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8004ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d004      	beq.n	8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
 8004aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004af0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004af4:	d004      	beq.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8004af6:	e061      	b.n	8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8004af8:	f7fe f9ea 	bl	8002ed0 <HAL_RCC_GetPCLK1Freq>
 8004afc:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 8004afe:	e060      	b.n	8004bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b00:	f107 030c 	add.w	r3, r7, #12
 8004b04:	4618      	mov	r0, r3
 8004b06:	f7ff f9b5 	bl	8003e74 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004b0e:	e058      	b.n	8004bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
            break;
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004b10:	4b3c      	ldr	r3, [pc, #240]	@ (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004b12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d103      	bne.n	8004b26 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            {
              frequency = LSE_VALUE;
 8004b1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004b24:	e04d      	b.n	8004bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8004b26:	2300      	movs	r3, #0
 8004b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004b2a:	e04a      	b.n	8004bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004b2c:	4b35      	ldr	r3, [pc, #212]	@ (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004b2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b32:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b3a:	d103      	bne.n	8004b44 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
            {
              frequency = LSI_VALUE;
 8004b3c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004b42:	e03e      	b.n	8004bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8004b44:	2300      	movs	r3, #0
 8004b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004b48:	e03b      	b.n	8004bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004b4a:	4b2e      	ldr	r3, [pc, #184]	@ (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004b4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004b50:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004b54:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004b56:	4b2b      	ldr	r3, [pc, #172]	@ (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0302 	and.w	r3, r3, #2
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d10c      	bne.n	8004b7c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
 8004b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d109      	bne.n	8004b7c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004b68:	4b26      	ldr	r3, [pc, #152]	@ (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	08db      	lsrs	r3, r3, #3
 8004b6e:	f003 0303 	and.w	r3, r3, #3
 8004b72:	4a25      	ldr	r2, [pc, #148]	@ (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8004b74:	fa22 f303 	lsr.w	r3, r2, r3
 8004b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b7a:	e01e      	b.n	8004bba <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004b7c:	4b21      	ldr	r3, [pc, #132]	@ (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b88:	d106      	bne.n	8004b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b90:	d102      	bne.n	8004b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004b92:	4b1e      	ldr	r3, [pc, #120]	@ (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8004b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b96:	e010      	b.n	8004bba <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004b98:	4b1a      	ldr	r3, [pc, #104]	@ (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ba0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ba4:	d106      	bne.n	8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004bac:	d102      	bne.n	8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004bae:	4b18      	ldr	r3, [pc, #96]	@ (8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8004bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bb2:	e002      	b.n	8004bba <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8004bb8:	e003      	b.n	8004bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8004bba:	e002      	b.n	8004bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          default :
          {
            frequency = 0U;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004bc0:	bf00      	nop
          }
        }
        break;
 8004bc2:	e1f8      	b.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8004bc4:	4b0f      	ldr	r3, [pc, #60]	@ (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004bc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004bca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bce:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8004bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bd8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004bdc:	d105      	bne.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8004bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d102      	bne.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
        {
          frequency = HSE_VALUE;
 8004be4:	4b0a      	ldr	r3, [pc, #40]	@ (8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8004be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8004be8:	e1e5      	b.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8004bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bf0:	d110      	bne.n	8004c14 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004bf2:	f107 0318 	add.w	r3, r7, #24
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f7fe ffd0 	bl	8003b9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004c00:	e1d9      	b.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004c02:	bf00      	nop
 8004c04:	44020c00 	.word	0x44020c00
 8004c08:	03d09000 	.word	0x03d09000
 8004c0c:	003d0900 	.word	0x003d0900
 8004c10:	017d7840 	.word	0x017d7840
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8004c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c1a:	d107      	bne.n	8004c2c <HAL_RCCEx_GetPeriphCLKFreq+0xae0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c1c:	f107 030c 	add.w	r3, r7, #12
 8004c20:	4618      	mov	r0, r3
 8004c22:	f7ff f927 	bl	8003e74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004c2a:	e1c4      	b.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004c30:	e1c1      	b.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8004c32:	4b9d      	ldr	r3, [pc, #628]	@ (8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c38:	f003 0307 	and.w	r3, r3, #7
 8004c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
        switch (srcclk)
 8004c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c40:	2b04      	cmp	r3, #4
 8004c42:	d859      	bhi.n	8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 8004c44:	a201      	add	r2, pc, #4	@ (adr r2, 8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c4a:	bf00      	nop
 8004c4c:	08004c61 	.word	0x08004c61
 8004c50:	08004c71 	.word	0x08004c71
 8004c54:	08004cf9 	.word	0x08004cf9
 8004c58:	08004c81 	.word	0x08004c81
 8004c5c:	08004c87 	.word	0x08004c87
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004c60:	f107 0318 	add.w	r3, r7, #24
 8004c64:	4618      	mov	r0, r3
 8004c66:	f7fe ff99 	bl	8003b9c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004c6e:	e046      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c70:	f107 030c 	add.w	r3, r7, #12
 8004c74:	4618      	mov	r0, r3
 8004c76:	f7ff f8fd 	bl	8003e74 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004c7e:	e03e      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
            break;
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8004c80:	4b8a      	ldr	r3, [pc, #552]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8004c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004c84:	e03b      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004c86:	4b88      	ldr	r3, [pc, #544]	@ (8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004c88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004c8c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004c90:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004c92:	4b85      	ldr	r3, [pc, #532]	@ (8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d10c      	bne.n	8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d109      	bne.n	8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004ca4:	4b80      	ldr	r3, [pc, #512]	@ (8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	08db      	lsrs	r3, r3, #3
 8004caa:	f003 0303 	and.w	r3, r3, #3
 8004cae:	4a80      	ldr	r2, [pc, #512]	@ (8004eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8004cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8004cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cb6:	e01e      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004cb8:	4b7b      	ldr	r3, [pc, #492]	@ (8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cc4:	d106      	bne.n	8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 8004cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ccc:	d102      	bne.n	8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004cce:	4b79      	ldr	r3, [pc, #484]	@ (8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8004cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cd2:	e010      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004cd4:	4b74      	ldr	r3, [pc, #464]	@ (8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cdc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ce0:	d106      	bne.n	8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ce8:	d102      	bne.n	8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004cea:	4b73      	ldr	r3, [pc, #460]	@ (8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8004cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cee:	e002      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8004cf4:	e003      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
 8004cf6:	e002      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          default:
          {
            frequency = 0;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004cfc:	bf00      	nop
          }
        }
        break;
 8004cfe:	e15a      	b.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8004d00:	4b69      	ldr	r3, [pc, #420]	@ (8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
        switch (srcclk)
 8004d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d0e:	2b20      	cmp	r3, #32
 8004d10:	d022      	beq.n	8004d58 <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
 8004d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d14:	2b20      	cmp	r3, #32
 8004d16:	d858      	bhi.n	8004dca <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8004d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d1a:	2b18      	cmp	r3, #24
 8004d1c:	d019      	beq.n	8004d52 <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
 8004d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d20:	2b18      	cmp	r3, #24
 8004d22:	d852      	bhi.n	8004dca <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8004d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d003      	beq.n	8004d32 <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8004d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d2c:	2b08      	cmp	r3, #8
 8004d2e:	d008      	beq.n	8004d42 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8004d30:	e04b      	b.n	8004dca <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004d32:	f107 0318 	add.w	r3, r7, #24
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7fe ff30 	bl	8003b9c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004d40:	e046      	b.n	8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d42:	f107 030c 	add.w	r3, r7, #12
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7ff f894 	bl	8003e74 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004d50:	e03e      	b.n	8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
            break;
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8004d52:	4b56      	ldr	r3, [pc, #344]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8004d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004d56:	e03b      	b.n	8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004d58:	4b53      	ldr	r3, [pc, #332]	@ (8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004d5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004d5e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004d62:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004d64:	4b50      	ldr	r3, [pc, #320]	@ (8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0302 	and.w	r3, r3, #2
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d10c      	bne.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8004d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d109      	bne.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004d76:	4b4c      	ldr	r3, [pc, #304]	@ (8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	08db      	lsrs	r3, r3, #3
 8004d7c:	f003 0303 	and.w	r3, r3, #3
 8004d80:	4a4b      	ldr	r2, [pc, #300]	@ (8004eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8004d82:	fa22 f303 	lsr.w	r3, r2, r3
 8004d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d88:	e01e      	b.n	8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004d8a:	4b47      	ldr	r3, [pc, #284]	@ (8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d96:	d106      	bne.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8004d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d9e:	d102      	bne.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004da0:	4b44      	ldr	r3, [pc, #272]	@ (8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8004da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004da4:	e010      	b.n	8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004da6:	4b40      	ldr	r3, [pc, #256]	@ (8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004db2:	d106      	bne.n	8004dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
 8004db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004dba:	d102      	bne.n	8004dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004dbc:	4b3e      	ldr	r3, [pc, #248]	@ (8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8004dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dc0:	e002      	b.n	8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8004dc6:	e003      	b.n	8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8004dc8:	e002      	b.n	8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          default:
          {
            frequency = 0;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004dce:	bf00      	nop
          }
        }
        break;
 8004dd0:	e0f1      	b.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8004dd2:	4b35      	ldr	r3, [pc, #212]	@ (8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004dd8:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8004ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
        switch (srcclk)
 8004dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004de0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004de4:	d023      	beq.n	8004e2e <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 8004de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004de8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004dec:	d858      	bhi.n	8004ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8004dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004df0:	2bc0      	cmp	r3, #192	@ 0xc0
 8004df2:	d019      	beq.n	8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
 8004df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004df6:	2bc0      	cmp	r3, #192	@ 0xc0
 8004df8:	d852      	bhi.n	8004ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8004dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d003      	beq.n	8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>
 8004e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e02:	2b40      	cmp	r3, #64	@ 0x40
 8004e04:	d008      	beq.n	8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0xccc>
 8004e06:	e04b      	b.n	8004ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e08:	f107 0318 	add.w	r3, r7, #24
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f7fe fec5 	bl	8003b9c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004e16:	e046      	b.n	8004ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e18:	f107 030c 	add.w	r3, r7, #12
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f7ff f829 	bl	8003e74 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004e26:	e03e      	b.n	8004ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
            break;
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8004e28:	4b20      	ldr	r3, [pc, #128]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8004e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004e2c:	e03b      	b.n	8004ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004e2e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004e30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004e34:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004e38:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004e3a:	4b1b      	ldr	r3, [pc, #108]	@ (8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d10c      	bne.n	8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8004e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d109      	bne.n	8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004e4c:	4b16      	ldr	r3, [pc, #88]	@ (8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	08db      	lsrs	r3, r3, #3
 8004e52:	f003 0303 	and.w	r3, r3, #3
 8004e56:	4a16      	ldr	r2, [pc, #88]	@ (8004eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8004e58:	fa22 f303 	lsr.w	r3, r2, r3
 8004e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e5e:	e01e      	b.n	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004e60:	4b11      	ldr	r3, [pc, #68]	@ (8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e6c:	d106      	bne.n	8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e74:	d102      	bne.n	8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004e76:	4b0f      	ldr	r3, [pc, #60]	@ (8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8004e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e7a:	e010      	b.n	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e88:	d106      	bne.n	8004e98 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
 8004e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e90:	d102      	bne.n	8004e98 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004e92:	4b09      	ldr	r3, [pc, #36]	@ (8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8004e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e96:	e002      	b.n	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8004e9c:	e003      	b.n	8004ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8004e9e:	e002      	b.n	8004ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          default:
          {
            frequency = 0;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004ea4:	bf00      	nop
          }
        }
        break;
 8004ea6:	e086      	b.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004ea8:	44020c00 	.word	0x44020c00
 8004eac:	00bb8000 	.word	0x00bb8000
 8004eb0:	03d09000 	.word	0x03d09000
 8004eb4:	003d0900 	.word	0x003d0900
 8004eb8:	017d7840 	.word	0x017d7840
        break;
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8004ebc:	4b40      	ldr	r3, [pc, #256]	@ (8004fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004ebe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004ec2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004ec6:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8004ec8:	4b3d      	ldr	r3, [pc, #244]	@ (8004fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ed0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ed4:	d105      	bne.n	8004ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
 8004ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d102      	bne.n	8004ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
        {
          frequency = HSI48_VALUE;
 8004edc:	4b39      	ldr	r3, [pc, #228]	@ (8004fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 8004ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ee0:	e031      	b.n	8004f46 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8004ee2:	4b37      	ldr	r3, [pc, #220]	@ (8004fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004eee:	d10a      	bne.n	8004f06 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8004ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ef2:	2b10      	cmp	r3, #16
 8004ef4:	d107      	bne.n	8004f06 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ef6:	f107 0318 	add.w	r3, r7, #24
 8004efa:	4618      	mov	r0, r3
 8004efc:	f7fe fe4e 	bl	8003b9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f04:	e01f      	b.n	8004f46 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8004f06:	4b2e      	ldr	r3, [pc, #184]	@ (8004fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004f08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f0c:	f003 0302 	and.w	r3, r3, #2
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d106      	bne.n	8004f22 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
 8004f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f16:	2b20      	cmp	r3, #32
 8004f18:	d103      	bne.n	8004f22 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
        {
          frequency = LSE_VALUE;
 8004f1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f20:	e011      	b.n	8004f46 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8004f22:	4b27      	ldr	r3, [pc, #156]	@ (8004fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004f24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f30:	d106      	bne.n	8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
 8004f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f34:	2b30      	cmp	r3, #48	@ 0x30
 8004f36:	d103      	bne.n	8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
        {
          frequency = LSI_VALUE;
 8004f38:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f3e:	e002      	b.n	8004f46 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8004f40:	2300      	movs	r3, #0
 8004f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 8004f44:	e037      	b.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004f46:	e036      	b.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8004f48:	4b1d      	ldr	r3, [pc, #116]	@ (8004fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004f4a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004f4e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004f52:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8004f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f56:	2b10      	cmp	r3, #16
 8004f58:	d107      	bne.n	8004f6a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f5a:	f107 0318 	add.w	r3, r7, #24
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7fe fe1c 	bl	8003b9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break;
 8004f68:	e025      	b.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
          frequency = pll3_clocks.PLL3_Q_Frequency;
        }
#else
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL2Q))
 8004f6a:	4b15      	ldr	r3, [pc, #84]	@ (8004fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f76:	d10a      	bne.n	8004f8e <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
 8004f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f7a:	2b20      	cmp	r3, #32
 8004f7c:	d107      	bne.n	8004f8e <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f7e:	f107 030c 	add.w	r3, r7, #12
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7fe ff76 	bl	8003e74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f8c:	e00f      	b.n	8004fae <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8004f8e:	4b0c      	ldr	r3, [pc, #48]	@ (8004fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f9a:	d105      	bne.n	8004fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 8004f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f9e:	2b30      	cmp	r3, #48	@ 0x30
 8004fa0:	d102      	bne.n	8004fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
        {
          frequency = HSI48_VALUE;
 8004fa2:	4b08      	ldr	r3, [pc, #32]	@ (8004fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 8004fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fa6:	e002      	b.n	8004fae <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        break;
 8004fac:	e003      	b.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004fae:	e002      	b.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      default:
        frequency = 0U;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004fb4:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 8004fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3730      	adds	r7, #48	@ 0x30
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	44020c00 	.word	0x44020c00
 8004fc4:	02dc6c00 	.word	0x02dc6c00

08004fc8 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8004fd0:	4b48      	ldr	r3, [pc, #288]	@ (80050f4 <RCCEx_PLL2_Config+0x12c>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a47      	ldr	r2, [pc, #284]	@ (80050f4 <RCCEx_PLL2_Config+0x12c>)
 8004fd6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004fda:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004fdc:	f7fb ff8a 	bl	8000ef4 <HAL_GetTick>
 8004fe0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004fe2:	e008      	b.n	8004ff6 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004fe4:	f7fb ff86 	bl	8000ef4 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d901      	bls.n	8004ff6 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e07a      	b.n	80050ec <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ff6:	4b3f      	ldr	r3, [pc, #252]	@ (80050f4 <RCCEx_PLL2_Config+0x12c>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1f0      	bne.n	8004fe4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005002:	4b3c      	ldr	r3, [pc, #240]	@ (80050f4 <RCCEx_PLL2_Config+0x12c>)
 8005004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005006:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800500a:	f023 0303 	bic.w	r3, r3, #3
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	6811      	ldr	r1, [r2, #0]
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	6852      	ldr	r2, [r2, #4]
 8005016:	0212      	lsls	r2, r2, #8
 8005018:	430a      	orrs	r2, r1
 800501a:	4936      	ldr	r1, [pc, #216]	@ (80050f4 <RCCEx_PLL2_Config+0x12c>)
 800501c:	4313      	orrs	r3, r2
 800501e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	3b01      	subs	r3, #1
 8005026:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	3b01      	subs	r3, #1
 8005030:	025b      	lsls	r3, r3, #9
 8005032:	b29b      	uxth	r3, r3
 8005034:	431a      	orrs	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	3b01      	subs	r3, #1
 800503c:	041b      	lsls	r3, r3, #16
 800503e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005042:	431a      	orrs	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	695b      	ldr	r3, [r3, #20]
 8005048:	3b01      	subs	r3, #1
 800504a:	061b      	lsls	r3, r3, #24
 800504c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005050:	4928      	ldr	r1, [pc, #160]	@ (80050f4 <RCCEx_PLL2_Config+0x12c>)
 8005052:	4313      	orrs	r3, r2
 8005054:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8005056:	4b27      	ldr	r3, [pc, #156]	@ (80050f4 <RCCEx_PLL2_Config+0x12c>)
 8005058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800505a:	f023 020c 	bic.w	r2, r3, #12
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	699b      	ldr	r3, [r3, #24]
 8005062:	4924      	ldr	r1, [pc, #144]	@ (80050f4 <RCCEx_PLL2_Config+0x12c>)
 8005064:	4313      	orrs	r3, r2
 8005066:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8005068:	4b22      	ldr	r3, [pc, #136]	@ (80050f4 <RCCEx_PLL2_Config+0x12c>)
 800506a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800506c:	f023 0220 	bic.w	r2, r3, #32
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	69db      	ldr	r3, [r3, #28]
 8005074:	491f      	ldr	r1, [pc, #124]	@ (80050f4 <RCCEx_PLL2_Config+0x12c>)
 8005076:	4313      	orrs	r3, r2
 8005078:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800507a:	4b1e      	ldr	r3, [pc, #120]	@ (80050f4 <RCCEx_PLL2_Config+0x12c>)
 800507c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005082:	491c      	ldr	r1, [pc, #112]	@ (80050f4 <RCCEx_PLL2_Config+0x12c>)
 8005084:	4313      	orrs	r3, r2
 8005086:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8005088:	4b1a      	ldr	r3, [pc, #104]	@ (80050f4 <RCCEx_PLL2_Config+0x12c>)
 800508a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800508c:	4a19      	ldr	r2, [pc, #100]	@ (80050f4 <RCCEx_PLL2_Config+0x12c>)
 800508e:	f023 0310 	bic.w	r3, r3, #16
 8005092:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8005094:	4b17      	ldr	r3, [pc, #92]	@ (80050f4 <RCCEx_PLL2_Config+0x12c>)
 8005096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005098:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800509c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	6a12      	ldr	r2, [r2, #32]
 80050a4:	00d2      	lsls	r2, r2, #3
 80050a6:	4913      	ldr	r1, [pc, #76]	@ (80050f4 <RCCEx_PLL2_Config+0x12c>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 80050ac:	4b11      	ldr	r3, [pc, #68]	@ (80050f4 <RCCEx_PLL2_Config+0x12c>)
 80050ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b0:	4a10      	ldr	r2, [pc, #64]	@ (80050f4 <RCCEx_PLL2_Config+0x12c>)
 80050b2:	f043 0310 	orr.w	r3, r3, #16
 80050b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 80050b8:	4b0e      	ldr	r3, [pc, #56]	@ (80050f4 <RCCEx_PLL2_Config+0x12c>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a0d      	ldr	r2, [pc, #52]	@ (80050f4 <RCCEx_PLL2_Config+0x12c>)
 80050be:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80050c2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80050c4:	f7fb ff16 	bl	8000ef4 <HAL_GetTick>
 80050c8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80050ca:	e008      	b.n	80050de <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80050cc:	f7fb ff12 	bl	8000ef4 <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d901      	bls.n	80050de <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e006      	b.n	80050ec <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80050de:	4b05      	ldr	r3, [pc, #20]	@ (80050f4 <RCCEx_PLL2_Config+0x12c>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d0f0      	beq.n	80050cc <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 80050ea:	2300      	movs	r3, #0

}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3710      	adds	r7, #16
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	44020c00 	.word	0x44020c00

080050f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d101      	bne.n	800510a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e042      	b.n	8005190 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005110:	2b00      	cmp	r3, #0
 8005112:	d106      	bne.n	8005122 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f7fb fd03 	bl	8000b28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2224      	movs	r2, #36	@ 0x24
 8005126:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f022 0201 	bic.w	r2, r2, #1
 8005138:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800513e:	2b00      	cmp	r3, #0
 8005140:	d002      	beq.n	8005148 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 fa44 	bl	80055d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 f8c3 	bl	80052d4 <UART_SetConfig>
 800514e:	4603      	mov	r3, r0
 8005150:	2b01      	cmp	r3, #1
 8005152:	d101      	bne.n	8005158 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e01b      	b.n	8005190 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	685a      	ldr	r2, [r3, #4]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005166:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	689a      	ldr	r2, [r3, #8]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005176:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f042 0201 	orr.w	r2, r2, #1
 8005186:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 fac3 	bl	8005714 <UART_CheckIdleState>
 800518e:	4603      	mov	r3, r0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3708      	adds	r7, #8
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b08a      	sub	sp, #40	@ 0x28
 800519c:	af02      	add	r7, sp, #8
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	603b      	str	r3, [r7, #0]
 80051a4:	4613      	mov	r3, r2
 80051a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ae:	2b20      	cmp	r3, #32
 80051b0:	f040 808b 	bne.w	80052ca <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d002      	beq.n	80051c0 <HAL_UART_Transmit+0x28>
 80051ba:	88fb      	ldrh	r3, [r7, #6]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d101      	bne.n	80051c4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e083      	b.n	80052cc <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051ce:	2b80      	cmp	r3, #128	@ 0x80
 80051d0:	d107      	bne.n	80051e2 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	689a      	ldr	r2, [r3, #8]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80051e0:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2221      	movs	r2, #33	@ 0x21
 80051ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051f2:	f7fb fe7f 	bl	8000ef4 <HAL_GetTick>
 80051f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	88fa      	ldrh	r2, [r7, #6]
 80051fc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	88fa      	ldrh	r2, [r7, #6]
 8005204:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005210:	d108      	bne.n	8005224 <HAL_UART_Transmit+0x8c>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d104      	bne.n	8005224 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800521a:	2300      	movs	r3, #0
 800521c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	61bb      	str	r3, [r7, #24]
 8005222:	e003      	b.n	800522c <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005228:	2300      	movs	r3, #0
 800522a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800522c:	e030      	b.n	8005290 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	9300      	str	r3, [sp, #0]
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	2200      	movs	r2, #0
 8005236:	2180      	movs	r1, #128	@ 0x80
 8005238:	68f8      	ldr	r0, [r7, #12]
 800523a:	f000 fb15 	bl	8005868 <UART_WaitOnFlagUntilTimeout>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d005      	beq.n	8005250 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2220      	movs	r2, #32
 8005248:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e03d      	b.n	80052cc <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d10b      	bne.n	800526e <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	881b      	ldrh	r3, [r3, #0]
 800525a:	461a      	mov	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005264:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	3302      	adds	r3, #2
 800526a:	61bb      	str	r3, [r7, #24]
 800526c:	e007      	b.n	800527e <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	781a      	ldrb	r2, [r3, #0]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	3301      	adds	r3, #1
 800527c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005284:	b29b      	uxth	r3, r3
 8005286:	3b01      	subs	r3, #1
 8005288:	b29a      	uxth	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005296:	b29b      	uxth	r3, r3
 8005298:	2b00      	cmp	r3, #0
 800529a:	d1c8      	bne.n	800522e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	9300      	str	r3, [sp, #0]
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	2200      	movs	r2, #0
 80052a4:	2140      	movs	r1, #64	@ 0x40
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f000 fade 	bl	8005868 <UART_WaitOnFlagUntilTimeout>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d005      	beq.n	80052be <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2220      	movs	r2, #32
 80052b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e006      	b.n	80052cc <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2220      	movs	r2, #32
 80052c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80052c6:	2300      	movs	r3, #0
 80052c8:	e000      	b.n	80052cc <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 80052ca:	2302      	movs	r3, #2
  }
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3720      	adds	r7, #32
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052d8:	b094      	sub	sp, #80	@ 0x50
 80052da:	af00      	add	r7, sp, #0
 80052dc:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052de:	2300      	movs	r3, #0
 80052e0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052e6:	689a      	ldr	r2, [r3, #8]
 80052e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	431a      	orrs	r2, r3
 80052ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	431a      	orrs	r2, r3
 80052f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052f6:	69db      	ldr	r3, [r3, #28]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	498a      	ldr	r1, [pc, #552]	@ (800552c <UART_SetConfig+0x258>)
 8005304:	4019      	ands	r1, r3
 8005306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800530c:	430b      	orrs	r3, r1
 800530e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800531a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800531c:	68d9      	ldr	r1, [r3, #12]
 800531e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	ea40 0301 	orr.w	r3, r0, r1
 8005326:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800532e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	4b7f      	ldr	r3, [pc, #508]	@ (8005530 <UART_SetConfig+0x25c>)
 8005334:	429a      	cmp	r2, r3
 8005336:	d004      	beq.n	8005342 <UART_SetConfig+0x6e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800533a:	6a1a      	ldr	r2, [r3, #32]
 800533c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800533e:	4313      	orrs	r3, r2
 8005340:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800534c:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8005350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005356:	430b      	orrs	r3, r1
 8005358:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800535a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005360:	f023 000f 	bic.w	r0, r3, #15
 8005364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005366:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	ea40 0301 	orr.w	r3, r0, r1
 8005370:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	4b6f      	ldr	r3, [pc, #444]	@ (8005534 <UART_SetConfig+0x260>)
 8005378:	429a      	cmp	r2, r3
 800537a:	d102      	bne.n	8005382 <UART_SetConfig+0xae>
 800537c:	2301      	movs	r3, #1
 800537e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005380:	e01a      	b.n	80053b8 <UART_SetConfig+0xe4>
 8005382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	4b6c      	ldr	r3, [pc, #432]	@ (8005538 <UART_SetConfig+0x264>)
 8005388:	429a      	cmp	r2, r3
 800538a:	d102      	bne.n	8005392 <UART_SetConfig+0xbe>
 800538c:	2302      	movs	r3, #2
 800538e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005390:	e012      	b.n	80053b8 <UART_SetConfig+0xe4>
 8005392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	4b69      	ldr	r3, [pc, #420]	@ (800553c <UART_SetConfig+0x268>)
 8005398:	429a      	cmp	r2, r3
 800539a:	d102      	bne.n	80053a2 <UART_SetConfig+0xce>
 800539c:	2304      	movs	r3, #4
 800539e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053a0:	e00a      	b.n	80053b8 <UART_SetConfig+0xe4>
 80053a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	4b62      	ldr	r3, [pc, #392]	@ (8005530 <UART_SetConfig+0x25c>)
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d103      	bne.n	80053b4 <UART_SetConfig+0xe0>
 80053ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80053b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053b2:	e001      	b.n	80053b8 <UART_SetConfig+0xe4>
 80053b4:	2300      	movs	r3, #0
 80053b6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80053b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	4b5c      	ldr	r3, [pc, #368]	@ (8005530 <UART_SetConfig+0x25c>)
 80053be:	429a      	cmp	r2, r3
 80053c0:	d171      	bne.n	80054a6 <UART_SetConfig+0x1d2>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80053c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053c4:	2200      	movs	r2, #0
 80053c6:	623b      	str	r3, [r7, #32]
 80053c8:	627a      	str	r2, [r7, #36]	@ 0x24
 80053ca:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80053ce:	f7fe febd 	bl	800414c <HAL_RCCEx_GetPeriphCLKFreq>
 80053d2:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80053d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	f000 80e2 	beq.w	80055a0 <UART_SetConfig+0x2cc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80053dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053e0:	4a57      	ldr	r2, [pc, #348]	@ (8005540 <UART_SetConfig+0x26c>)
 80053e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053e6:	461a      	mov	r2, r3
 80053e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80053ee:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80053f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053f2:	685a      	ldr	r2, [r3, #4]
 80053f4:	4613      	mov	r3, r2
 80053f6:	005b      	lsls	r3, r3, #1
 80053f8:	4413      	add	r3, r2
 80053fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d305      	bcc.n	800540c <UART_SetConfig+0x138>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005406:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005408:	429a      	cmp	r2, r3
 800540a:	d903      	bls.n	8005414 <UART_SetConfig+0x140>
      {
        ret = HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005412:	e0c5      	b.n	80055a0 <UART_SetConfig+0x2cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005414:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005416:	2200      	movs	r2, #0
 8005418:	61bb      	str	r3, [r7, #24]
 800541a:	61fa      	str	r2, [r7, #28]
 800541c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800541e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005420:	4a47      	ldr	r2, [pc, #284]	@ (8005540 <UART_SetConfig+0x26c>)
 8005422:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005426:	b29b      	uxth	r3, r3
 8005428:	2200      	movs	r2, #0
 800542a:	613b      	str	r3, [r7, #16]
 800542c:	617a      	str	r2, [r7, #20]
 800542e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005432:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005436:	f7fa ff2f 	bl	8000298 <__aeabi_uldivmod>
 800543a:	4602      	mov	r2, r0
 800543c:	460b      	mov	r3, r1
 800543e:	4610      	mov	r0, r2
 8005440:	4619      	mov	r1, r3
 8005442:	f04f 0200 	mov.w	r2, #0
 8005446:	f04f 0300 	mov.w	r3, #0
 800544a:	020b      	lsls	r3, r1, #8
 800544c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005450:	0202      	lsls	r2, r0, #8
 8005452:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005454:	6849      	ldr	r1, [r1, #4]
 8005456:	0849      	lsrs	r1, r1, #1
 8005458:	2000      	movs	r0, #0
 800545a:	460c      	mov	r4, r1
 800545c:	4605      	mov	r5, r0
 800545e:	eb12 0804 	adds.w	r8, r2, r4
 8005462:	eb43 0905 	adc.w	r9, r3, r5
 8005466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	60bb      	str	r3, [r7, #8]
 800546e:	60fa      	str	r2, [r7, #12]
 8005470:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005474:	4640      	mov	r0, r8
 8005476:	4649      	mov	r1, r9
 8005478:	f7fa ff0e 	bl	8000298 <__aeabi_uldivmod>
 800547c:	4602      	mov	r2, r0
 800547e:	460b      	mov	r3, r1
 8005480:	4613      	mov	r3, r2
 8005482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005484:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005486:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800548a:	d308      	bcc.n	800549e <UART_SetConfig+0x1ca>
 800548c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800548e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005492:	d204      	bcs.n	800549e <UART_SetConfig+0x1ca>
        {
          huart->Instance->BRR = usartdiv;
 8005494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800549a:	60da      	str	r2, [r3, #12]
 800549c:	e080      	b.n	80055a0 <UART_SetConfig+0x2cc>
        }
        else
        {
          ret = HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80054a4:	e07c      	b.n	80055a0 <UART_SetConfig+0x2cc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054a8:	69db      	ldr	r3, [r3, #28]
 80054aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054ae:	d149      	bne.n	8005544 <UART_SetConfig+0x270>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80054b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054b2:	2200      	movs	r2, #0
 80054b4:	603b      	str	r3, [r7, #0]
 80054b6:	607a      	str	r2, [r7, #4]
 80054b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054bc:	f7fe fe46 	bl	800414c <HAL_RCCEx_GetPeriphCLKFreq>
 80054c0:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d06b      	beq.n	80055a0 <UART_SetConfig+0x2cc>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054cc:	4a1c      	ldr	r2, [pc, #112]	@ (8005540 <UART_SetConfig+0x26c>)
 80054ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054d2:	461a      	mov	r2, r3
 80054d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80054da:	005a      	lsls	r2, r3, #1
 80054dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	085b      	lsrs	r3, r3, #1
 80054e2:	441a      	add	r2, r3
 80054e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054f0:	2b0f      	cmp	r3, #15
 80054f2:	d916      	bls.n	8005522 <UART_SetConfig+0x24e>
 80054f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054fa:	d212      	bcs.n	8005522 <UART_SetConfig+0x24e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054fe:	b29b      	uxth	r3, r3
 8005500:	f023 030f 	bic.w	r3, r3, #15
 8005504:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005506:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005508:	085b      	lsrs	r3, r3, #1
 800550a:	b29b      	uxth	r3, r3
 800550c:	f003 0307 	and.w	r3, r3, #7
 8005510:	b29a      	uxth	r2, r3
 8005512:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005514:	4313      	orrs	r3, r2
 8005516:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8005518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800551e:	60da      	str	r2, [r3, #12]
 8005520:	e03e      	b.n	80055a0 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005528:	e03a      	b.n	80055a0 <UART_SetConfig+0x2cc>
 800552a:	bf00      	nop
 800552c:	cfff69f3 	.word	0xcfff69f3
 8005530:	44002400 	.word	0x44002400
 8005534:	40013800 	.word	0x40013800
 8005538:	40004400 	.word	0x40004400
 800553c:	40004800 	.word	0x40004800
 8005540:	08005ce4 	.word	0x08005ce4
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005544:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005546:	2200      	movs	r2, #0
 8005548:	469a      	mov	sl, r3
 800554a:	4693      	mov	fp, r2
 800554c:	4650      	mov	r0, sl
 800554e:	4659      	mov	r1, fp
 8005550:	f7fe fdfc 	bl	800414c <HAL_RCCEx_GetPeriphCLKFreq>
 8005554:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8005556:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005558:	2b00      	cmp	r3, #0
 800555a:	d021      	beq.n	80055a0 <UART_SetConfig+0x2cc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800555c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800555e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005560:	4a1a      	ldr	r2, [pc, #104]	@ (80055cc <UART_SetConfig+0x2f8>)
 8005562:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005566:	461a      	mov	r2, r3
 8005568:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800556a:	fbb3 f2f2 	udiv	r2, r3, r2
 800556e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	085b      	lsrs	r3, r3, #1
 8005574:	441a      	add	r2, r3
 8005576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	fbb2 f3f3 	udiv	r3, r2, r3
 800557e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005580:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005582:	2b0f      	cmp	r3, #15
 8005584:	d909      	bls.n	800559a <UART_SetConfig+0x2c6>
 8005586:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005588:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800558c:	d205      	bcs.n	800559a <UART_SetConfig+0x2c6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800558e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005590:	b29a      	uxth	r2, r3
 8005592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	60da      	str	r2, [r3, #12]
 8005598:	e002      	b.n	80055a0 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80055a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055a2:	2201      	movs	r2, #1
 80055a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80055a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055aa:	2201      	movs	r2, #1
 80055ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055b2:	2200      	movs	r2, #0
 80055b4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80055b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055b8:	2200      	movs	r2, #0
 80055ba:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80055bc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3750      	adds	r7, #80	@ 0x50
 80055c4:	46bd      	mov	sp, r7
 80055c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055ca:	bf00      	nop
 80055cc:	08005ce4 	.word	0x08005ce4

080055d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055dc:	f003 0308 	and.w	r3, r3, #8
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d00a      	beq.n	80055fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	430a      	orrs	r2, r1
 80055f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055fe:	f003 0301 	and.w	r3, r3, #1
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00a      	beq.n	800561c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	430a      	orrs	r2, r1
 800561a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005620:	f003 0302 	and.w	r3, r3, #2
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00a      	beq.n	800563e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	430a      	orrs	r2, r1
 800563c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005642:	f003 0304 	and.w	r3, r3, #4
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00a      	beq.n	8005660 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	430a      	orrs	r2, r1
 800565e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005664:	f003 0310 	and.w	r3, r3, #16
 8005668:	2b00      	cmp	r3, #0
 800566a:	d00a      	beq.n	8005682 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	430a      	orrs	r2, r1
 8005680:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005686:	f003 0320 	and.w	r3, r3, #32
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00a      	beq.n	80056a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	430a      	orrs	r2, r1
 80056a2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d01a      	beq.n	80056e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	430a      	orrs	r2, r1
 80056c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056ce:	d10a      	bne.n	80056e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	430a      	orrs	r2, r1
 80056e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00a      	beq.n	8005708 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	430a      	orrs	r2, r1
 8005706:	605a      	str	r2, [r3, #4]
  }
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b098      	sub	sp, #96	@ 0x60
 8005718:	af02      	add	r7, sp, #8
 800571a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005724:	f7fb fbe6 	bl	8000ef4 <HAL_GetTick>
 8005728:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 0308 	and.w	r3, r3, #8
 8005734:	2b08      	cmp	r3, #8
 8005736:	d12f      	bne.n	8005798 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005738:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800573c:	9300      	str	r3, [sp, #0]
 800573e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005740:	2200      	movs	r2, #0
 8005742:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 f88e 	bl	8005868 <UART_WaitOnFlagUntilTimeout>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d022      	beq.n	8005798 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800575a:	e853 3f00 	ldrex	r3, [r3]
 800575e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005762:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005766:	653b      	str	r3, [r7, #80]	@ 0x50
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	461a      	mov	r2, r3
 800576e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005770:	647b      	str	r3, [r7, #68]	@ 0x44
 8005772:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005774:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005776:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005778:	e841 2300 	strex	r3, r2, [r1]
 800577c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800577e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005780:	2b00      	cmp	r3, #0
 8005782:	d1e6      	bne.n	8005752 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2220      	movs	r2, #32
 8005788:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e063      	b.n	8005860 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 0304 	and.w	r3, r3, #4
 80057a2:	2b04      	cmp	r3, #4
 80057a4:	d149      	bne.n	800583a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057a6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80057aa:	9300      	str	r3, [sp, #0]
 80057ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057ae:	2200      	movs	r2, #0
 80057b0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 f857 	bl	8005868 <UART_WaitOnFlagUntilTimeout>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d03c      	beq.n	800583a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c8:	e853 3f00 	ldrex	r3, [r3]
 80057cc:	623b      	str	r3, [r7, #32]
   return(result);
 80057ce:	6a3b      	ldr	r3, [r7, #32]
 80057d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	461a      	mov	r2, r3
 80057dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057de:	633b      	str	r3, [r7, #48]	@ 0x30
 80057e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057e6:	e841 2300 	strex	r3, r2, [r1]
 80057ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80057ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1e6      	bne.n	80057c0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	3308      	adds	r3, #8
 80057f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	e853 3f00 	ldrex	r3, [r3]
 8005800:	60fb      	str	r3, [r7, #12]
   return(result);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f023 0301 	bic.w	r3, r3, #1
 8005808:	64bb      	str	r3, [r7, #72]	@ 0x48
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	3308      	adds	r3, #8
 8005810:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005812:	61fa      	str	r2, [r7, #28]
 8005814:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005816:	69b9      	ldr	r1, [r7, #24]
 8005818:	69fa      	ldr	r2, [r7, #28]
 800581a:	e841 2300 	strex	r3, r2, [r1]
 800581e:	617b      	str	r3, [r7, #20]
   return(result);
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1e5      	bne.n	80057f2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2220      	movs	r2, #32
 800582a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	e012      	b.n	8005860 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2220      	movs	r2, #32
 800583e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2220      	movs	r2, #32
 8005846:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	3758      	adds	r7, #88	@ 0x58
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	603b      	str	r3, [r7, #0]
 8005874:	4613      	mov	r3, r2
 8005876:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005878:	e04f      	b.n	800591a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005880:	d04b      	beq.n	800591a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005882:	f7fb fb37 	bl	8000ef4 <HAL_GetTick>
 8005886:	4602      	mov	r2, r0
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	1ad3      	subs	r3, r2, r3
 800588c:	69ba      	ldr	r2, [r7, #24]
 800588e:	429a      	cmp	r2, r3
 8005890:	d302      	bcc.n	8005898 <UART_WaitOnFlagUntilTimeout+0x30>
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d101      	bne.n	800589c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e04e      	b.n	800593a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0304 	and.w	r3, r3, #4
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d037      	beq.n	800591a <UART_WaitOnFlagUntilTimeout+0xb2>
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	2b80      	cmp	r3, #128	@ 0x80
 80058ae:	d034      	beq.n	800591a <UART_WaitOnFlagUntilTimeout+0xb2>
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	2b40      	cmp	r3, #64	@ 0x40
 80058b4:	d031      	beq.n	800591a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	69db      	ldr	r3, [r3, #28]
 80058bc:	f003 0308 	and.w	r3, r3, #8
 80058c0:	2b08      	cmp	r3, #8
 80058c2:	d110      	bne.n	80058e6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2208      	movs	r2, #8
 80058ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f000 f838 	bl	8005942 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2208      	movs	r2, #8
 80058d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e029      	b.n	800593a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	69db      	ldr	r3, [r3, #28]
 80058ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058f4:	d111      	bne.n	800591a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80058fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005900:	68f8      	ldr	r0, [r7, #12]
 8005902:	f000 f81e 	bl	8005942 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2220      	movs	r2, #32
 800590a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e00f      	b.n	800593a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	69da      	ldr	r2, [r3, #28]
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	4013      	ands	r3, r2
 8005924:	68ba      	ldr	r2, [r7, #8]
 8005926:	429a      	cmp	r2, r3
 8005928:	bf0c      	ite	eq
 800592a:	2301      	moveq	r3, #1
 800592c:	2300      	movne	r3, #0
 800592e:	b2db      	uxtb	r3, r3
 8005930:	461a      	mov	r2, r3
 8005932:	79fb      	ldrb	r3, [r7, #7]
 8005934:	429a      	cmp	r2, r3
 8005936:	d0a0      	beq.n	800587a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	3710      	adds	r7, #16
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}

08005942 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005942:	b480      	push	{r7}
 8005944:	b095      	sub	sp, #84	@ 0x54
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005952:	e853 3f00 	ldrex	r3, [r3]
 8005956:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800595a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800595e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	461a      	mov	r2, r3
 8005966:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005968:	643b      	str	r3, [r7, #64]	@ 0x40
 800596a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800596e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005970:	e841 2300 	strex	r3, r2, [r1]
 8005974:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005978:	2b00      	cmp	r3, #0
 800597a:	d1e6      	bne.n	800594a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	3308      	adds	r3, #8
 8005982:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005984:	6a3b      	ldr	r3, [r7, #32]
 8005986:	e853 3f00 	ldrex	r3, [r3]
 800598a:	61fb      	str	r3, [r7, #28]
   return(result);
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005992:	f023 0301 	bic.w	r3, r3, #1
 8005996:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	3308      	adds	r3, #8
 800599e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80059a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059a8:	e841 2300 	strex	r3, r2, [r1]
 80059ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80059ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d1e3      	bne.n	800597c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d118      	bne.n	80059ee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	e853 3f00 	ldrex	r3, [r3]
 80059c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	f023 0310 	bic.w	r3, r3, #16
 80059d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	461a      	mov	r2, r3
 80059d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059da:	61bb      	str	r3, [r7, #24]
 80059dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059de:	6979      	ldr	r1, [r7, #20]
 80059e0:	69ba      	ldr	r2, [r7, #24]
 80059e2:	e841 2300 	strex	r3, r2, [r1]
 80059e6:	613b      	str	r3, [r7, #16]
   return(result);
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d1e6      	bne.n	80059bc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2220      	movs	r2, #32
 80059f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005a02:	bf00      	nop
 8005a04:	3754      	adds	r7, #84	@ 0x54
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr

08005a0e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005a0e:	b480      	push	{r7}
 8005a10:	b085      	sub	sp, #20
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d101      	bne.n	8005a24 <HAL_UARTEx_DisableFifoMode+0x16>
 8005a20:	2302      	movs	r3, #2
 8005a22:	e027      	b.n	8005a74 <HAL_UARTEx_DisableFifoMode+0x66>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2224      	movs	r2, #36	@ 0x24
 8005a30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f022 0201 	bic.w	r2, r2, #1
 8005a4a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005a52:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2220      	movs	r2, #32
 8005a66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3714      	adds	r7, #20
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d101      	bne.n	8005a98 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005a94:	2302      	movs	r3, #2
 8005a96:	e02d      	b.n	8005af4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2224      	movs	r2, #36	@ 0x24
 8005aa4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f022 0201 	bic.w	r2, r2, #1
 8005abe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	683a      	ldr	r2, [r7, #0]
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 f84f 	bl	8005b78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2220      	movs	r2, #32
 8005ae6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005af2:	2300      	movs	r3, #0
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3710      	adds	r7, #16
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d101      	bne.n	8005b14 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005b10:	2302      	movs	r3, #2
 8005b12:	e02d      	b.n	8005b70 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2224      	movs	r2, #36	@ 0x24
 8005b20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f022 0201 	bic.w	r2, r2, #1
 8005b3a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	683a      	ldr	r2, [r7, #0]
 8005b4c:	430a      	orrs	r2, r1
 8005b4e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 f811 	bl	8005b78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2220      	movs	r2, #32
 8005b62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3710      	adds	r7, #16
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d108      	bne.n	8005b9a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005b98:	e031      	b.n	8005bfe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005b9a:	2308      	movs	r3, #8
 8005b9c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005b9e:	2308      	movs	r3, #8
 8005ba0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	0e5b      	lsrs	r3, r3, #25
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	f003 0307 	and.w	r3, r3, #7
 8005bb0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	0f5b      	lsrs	r3, r3, #29
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	f003 0307 	and.w	r3, r3, #7
 8005bc0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005bc2:	7bbb      	ldrb	r3, [r7, #14]
 8005bc4:	7b3a      	ldrb	r2, [r7, #12]
 8005bc6:	4911      	ldr	r1, [pc, #68]	@ (8005c0c <UARTEx_SetNbDataToProcess+0x94>)
 8005bc8:	5c8a      	ldrb	r2, [r1, r2]
 8005bca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005bce:	7b3a      	ldrb	r2, [r7, #12]
 8005bd0:	490f      	ldr	r1, [pc, #60]	@ (8005c10 <UARTEx_SetNbDataToProcess+0x98>)
 8005bd2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005bd4:	fb93 f3f2 	sdiv	r3, r3, r2
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005be0:	7bfb      	ldrb	r3, [r7, #15]
 8005be2:	7b7a      	ldrb	r2, [r7, #13]
 8005be4:	4909      	ldr	r1, [pc, #36]	@ (8005c0c <UARTEx_SetNbDataToProcess+0x94>)
 8005be6:	5c8a      	ldrb	r2, [r1, r2]
 8005be8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005bec:	7b7a      	ldrb	r2, [r7, #13]
 8005bee:	4908      	ldr	r1, [pc, #32]	@ (8005c10 <UARTEx_SetNbDataToProcess+0x98>)
 8005bf0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005bf2:	fb93 f3f2 	sdiv	r3, r3, r2
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005bfe:	bf00      	nop
 8005c00:	3714      	adds	r7, #20
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr
 8005c0a:	bf00      	nop
 8005c0c:	08005cfc 	.word	0x08005cfc
 8005c10:	08005d04 	.word	0x08005d04

08005c14 <memset>:
 8005c14:	4402      	add	r2, r0
 8005c16:	4603      	mov	r3, r0
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d100      	bne.n	8005c1e <memset+0xa>
 8005c1c:	4770      	bx	lr
 8005c1e:	f803 1b01 	strb.w	r1, [r3], #1
 8005c22:	e7f9      	b.n	8005c18 <memset+0x4>

08005c24 <__libc_init_array>:
 8005c24:	b570      	push	{r4, r5, r6, lr}
 8005c26:	4d0d      	ldr	r5, [pc, #52]	@ (8005c5c <__libc_init_array+0x38>)
 8005c28:	2600      	movs	r6, #0
 8005c2a:	4c0d      	ldr	r4, [pc, #52]	@ (8005c60 <__libc_init_array+0x3c>)
 8005c2c:	1b64      	subs	r4, r4, r5
 8005c2e:	10a4      	asrs	r4, r4, #2
 8005c30:	42a6      	cmp	r6, r4
 8005c32:	d109      	bne.n	8005c48 <__libc_init_array+0x24>
 8005c34:	4d0b      	ldr	r5, [pc, #44]	@ (8005c64 <__libc_init_array+0x40>)
 8005c36:	2600      	movs	r6, #0
 8005c38:	4c0b      	ldr	r4, [pc, #44]	@ (8005c68 <__libc_init_array+0x44>)
 8005c3a:	f000 f817 	bl	8005c6c <_init>
 8005c3e:	1b64      	subs	r4, r4, r5
 8005c40:	10a4      	asrs	r4, r4, #2
 8005c42:	42a6      	cmp	r6, r4
 8005c44:	d105      	bne.n	8005c52 <__libc_init_array+0x2e>
 8005c46:	bd70      	pop	{r4, r5, r6, pc}
 8005c48:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c4c:	3601      	adds	r6, #1
 8005c4e:	4798      	blx	r3
 8005c50:	e7ee      	b.n	8005c30 <__libc_init_array+0xc>
 8005c52:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c56:	3601      	adds	r6, #1
 8005c58:	4798      	blx	r3
 8005c5a:	e7f2      	b.n	8005c42 <__libc_init_array+0x1e>
 8005c5c:	08005d14 	.word	0x08005d14
 8005c60:	08005d14 	.word	0x08005d14
 8005c64:	08005d14 	.word	0x08005d14
 8005c68:	08005d18 	.word	0x08005d18

08005c6c <_init>:
 8005c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c6e:	bf00      	nop
 8005c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c72:	bc08      	pop	{r3}
 8005c74:	469e      	mov	lr, r3
 8005c76:	4770      	bx	lr

08005c78 <_fini>:
 8005c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c7a:	bf00      	nop
 8005c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c7e:	bc08      	pop	{r3}
 8005c80:	469e      	mov	lr, r3
 8005c82:	4770      	bx	lr
