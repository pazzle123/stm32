
eeprom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e70  08000258  08000258  00001258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080060c8  080060c8  000070c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800616c  0800616c  0000805c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800616c  0800616c  0000716c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006174  08006174  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006174  08006174  00007174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006178  08006178  00007178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800617c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  2000005c  080061d8  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  080061d8  000082b0  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010556  00000000  00000000  00008092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e16  00000000  00000000  000185e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c10  00000000  00000000  0001a400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000965  00000000  00000000  0001b010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f833  00000000  00000000  0001b975  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e2c  00000000  00000000  0003b1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c411e  00000000  00000000  0004bfd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001100f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037c8  00000000  00000000  00110138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  00113900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	2000005c 	.word	0x2000005c
 8000274:	00000000 	.word	0x00000000
 8000278:	080060b0 	.word	0x080060b0

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	20000060 	.word	0x20000060
 8000294:	080060b0 	.word	0x080060b0

08000298 <strlen>:
 8000298:	4603      	mov	r3, r0
 800029a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800029e:	2a00      	cmp	r2, #0
 80002a0:	d1fb      	bne.n	800029a <strlen+0x2>
 80002a2:	1a18      	subs	r0, r3, r0
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr

080002a8 <__aeabi_uldivmod>:
 80002a8:	b953      	cbnz	r3, 80002c0 <__aeabi_uldivmod+0x18>
 80002aa:	b94a      	cbnz	r2, 80002c0 <__aeabi_uldivmod+0x18>
 80002ac:	2900      	cmp	r1, #0
 80002ae:	bf08      	it	eq
 80002b0:	2800      	cmpeq	r0, #0
 80002b2:	bf1c      	itt	ne
 80002b4:	f04f 31ff 	movne.w	r1, #4294967295
 80002b8:	f04f 30ff 	movne.w	r0, #4294967295
 80002bc:	f000 b9b0 	b.w	8000620 <__aeabi_idiv0>
 80002c0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c8:	f000 f806 	bl	80002d8 <__udivmoddi4>
 80002cc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d4:	b004      	add	sp, #16
 80002d6:	4770      	bx	lr

080002d8 <__udivmoddi4>:
 80002d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002dc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002de:	4688      	mov	r8, r1
 80002e0:	4604      	mov	r4, r0
 80002e2:	468e      	mov	lr, r1
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d14a      	bne.n	800037e <__udivmoddi4+0xa6>
 80002e8:	428a      	cmp	r2, r1
 80002ea:	4617      	mov	r7, r2
 80002ec:	d95f      	bls.n	80003ae <__udivmoddi4+0xd6>
 80002ee:	fab2 f682 	clz	r6, r2
 80002f2:	b14e      	cbz	r6, 8000308 <__udivmoddi4+0x30>
 80002f4:	f1c6 0320 	rsb	r3, r6, #32
 80002f8:	fa01 fe06 	lsl.w	lr, r1, r6
 80002fc:	40b7      	lsls	r7, r6
 80002fe:	40b4      	lsls	r4, r6
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	ea43 0e0e 	orr.w	lr, r3, lr
 8000308:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800030c:	fa1f fc87 	uxth.w	ip, r7
 8000310:	0c23      	lsrs	r3, r4, #16
 8000312:	fbbe f1f8 	udiv	r1, lr, r8
 8000316:	fb08 ee11 	mls	lr, r8, r1, lr
 800031a:	fb01 f20c 	mul.w	r2, r1, ip
 800031e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000322:	429a      	cmp	r2, r3
 8000324:	d907      	bls.n	8000336 <__udivmoddi4+0x5e>
 8000326:	18fb      	adds	r3, r7, r3
 8000328:	f101 30ff 	add.w	r0, r1, #4294967295
 800032c:	d202      	bcs.n	8000334 <__udivmoddi4+0x5c>
 800032e:	429a      	cmp	r2, r3
 8000330:	f200 8154 	bhi.w	80005dc <__udivmoddi4+0x304>
 8000334:	4601      	mov	r1, r0
 8000336:	1a9b      	subs	r3, r3, r2
 8000338:	b2a2      	uxth	r2, r4
 800033a:	fbb3 f0f8 	udiv	r0, r3, r8
 800033e:	fb08 3310 	mls	r3, r8, r0, r3
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800034a:	4594      	cmp	ip, r2
 800034c:	d90b      	bls.n	8000366 <__udivmoddi4+0x8e>
 800034e:	18ba      	adds	r2, r7, r2
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	bf2c      	ite	cs
 8000356:	2401      	movcs	r4, #1
 8000358:	2400      	movcc	r4, #0
 800035a:	4594      	cmp	ip, r2
 800035c:	d902      	bls.n	8000364 <__udivmoddi4+0x8c>
 800035e:	2c00      	cmp	r4, #0
 8000360:	f000 813f 	beq.w	80005e2 <__udivmoddi4+0x30a>
 8000364:	4618      	mov	r0, r3
 8000366:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800036a:	eba2 020c 	sub.w	r2, r2, ip
 800036e:	2100      	movs	r1, #0
 8000370:	b11d      	cbz	r5, 800037a <__udivmoddi4+0xa2>
 8000372:	40f2      	lsrs	r2, r6
 8000374:	2300      	movs	r3, #0
 8000376:	e9c5 2300 	strd	r2, r3, [r5]
 800037a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800037e:	428b      	cmp	r3, r1
 8000380:	d905      	bls.n	800038e <__udivmoddi4+0xb6>
 8000382:	b10d      	cbz	r5, 8000388 <__udivmoddi4+0xb0>
 8000384:	e9c5 0100 	strd	r0, r1, [r5]
 8000388:	2100      	movs	r1, #0
 800038a:	4608      	mov	r0, r1
 800038c:	e7f5      	b.n	800037a <__udivmoddi4+0xa2>
 800038e:	fab3 f183 	clz	r1, r3
 8000392:	2900      	cmp	r1, #0
 8000394:	d14e      	bne.n	8000434 <__udivmoddi4+0x15c>
 8000396:	4543      	cmp	r3, r8
 8000398:	f0c0 8112 	bcc.w	80005c0 <__udivmoddi4+0x2e8>
 800039c:	4282      	cmp	r2, r0
 800039e:	f240 810f 	bls.w	80005c0 <__udivmoddi4+0x2e8>
 80003a2:	4608      	mov	r0, r1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e8      	beq.n	800037a <__udivmoddi4+0xa2>
 80003a8:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ac:	e7e5      	b.n	800037a <__udivmoddi4+0xa2>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f000 80ac 	beq.w	800050c <__udivmoddi4+0x234>
 80003b4:	fab2 f682 	clz	r6, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	f040 80bb 	bne.w	8000534 <__udivmoddi4+0x25c>
 80003be:	1a8b      	subs	r3, r1, r2
 80003c0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80003c4:	b2bc      	uxth	r4, r7
 80003c6:	2101      	movs	r1, #1
 80003c8:	0c02      	lsrs	r2, r0, #16
 80003ca:	b280      	uxth	r0, r0
 80003cc:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d0:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80003d8:	fb04 f20c 	mul.w	r2, r4, ip
 80003dc:	429a      	cmp	r2, r3
 80003de:	d90e      	bls.n	80003fe <__udivmoddi4+0x126>
 80003e0:	18fb      	adds	r3, r7, r3
 80003e2:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e6:	bf2c      	ite	cs
 80003e8:	f04f 0901 	movcs.w	r9, #1
 80003ec:	f04f 0900 	movcc.w	r9, #0
 80003f0:	429a      	cmp	r2, r3
 80003f2:	d903      	bls.n	80003fc <__udivmoddi4+0x124>
 80003f4:	f1b9 0f00 	cmp.w	r9, #0
 80003f8:	f000 80ec 	beq.w	80005d4 <__udivmoddi4+0x2fc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f8fe 	udiv	r8, r3, lr
 8000404:	fb0e 3318 	mls	r3, lr, r8, r3
 8000408:	fb04 f408 	mul.w	r4, r4, r8
 800040c:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000410:	4294      	cmp	r4, r2
 8000412:	d90b      	bls.n	800042c <__udivmoddi4+0x154>
 8000414:	18ba      	adds	r2, r7, r2
 8000416:	f108 33ff 	add.w	r3, r8, #4294967295
 800041a:	bf2c      	ite	cs
 800041c:	2001      	movcs	r0, #1
 800041e:	2000      	movcc	r0, #0
 8000420:	4294      	cmp	r4, r2
 8000422:	d902      	bls.n	800042a <__udivmoddi4+0x152>
 8000424:	2800      	cmp	r0, #0
 8000426:	f000 80d1 	beq.w	80005cc <__udivmoddi4+0x2f4>
 800042a:	4698      	mov	r8, r3
 800042c:	1b12      	subs	r2, r2, r4
 800042e:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000432:	e79d      	b.n	8000370 <__udivmoddi4+0x98>
 8000434:	f1c1 0620 	rsb	r6, r1, #32
 8000438:	408b      	lsls	r3, r1
 800043a:	fa08 f401 	lsl.w	r4, r8, r1
 800043e:	fa00 f901 	lsl.w	r9, r0, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	fa28 f806 	lsr.w	r8, r8, r6
 800044a:	408a      	lsls	r2, r1
 800044c:	431f      	orrs	r7, r3
 800044e:	fa20 f306 	lsr.w	r3, r0, r6
 8000452:	0c38      	lsrs	r0, r7, #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fa1f fc87 	uxth.w	ip, r7
 800045a:	0c1c      	lsrs	r4, r3, #16
 800045c:	fbb8 fef0 	udiv	lr, r8, r0
 8000460:	fb00 881e 	mls	r8, r0, lr, r8
 8000464:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000468:	fb0e f80c 	mul.w	r8, lr, ip
 800046c:	45a0      	cmp	r8, r4
 800046e:	d90e      	bls.n	800048e <__udivmoddi4+0x1b6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	bf2c      	ite	cs
 8000478:	f04f 0b01 	movcs.w	fp, #1
 800047c:	f04f 0b00 	movcc.w	fp, #0
 8000480:	45a0      	cmp	r8, r4
 8000482:	d903      	bls.n	800048c <__udivmoddi4+0x1b4>
 8000484:	f1bb 0f00 	cmp.w	fp, #0
 8000488:	f000 80b8 	beq.w	80005fc <__udivmoddi4+0x324>
 800048c:	46d6      	mov	lr, sl
 800048e:	eba4 0408 	sub.w	r4, r4, r8
 8000492:	fa1f f883 	uxth.w	r8, r3
 8000496:	fbb4 f3f0 	udiv	r3, r4, r0
 800049a:	fb00 4413 	mls	r4, r0, r3, r4
 800049e:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a2:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d90e      	bls.n	80004c8 <__udivmoddi4+0x1f0>
 80004aa:	193c      	adds	r4, r7, r4
 80004ac:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b0:	bf2c      	ite	cs
 80004b2:	f04f 0801 	movcs.w	r8, #1
 80004b6:	f04f 0800 	movcc.w	r8, #0
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d903      	bls.n	80004c6 <__udivmoddi4+0x1ee>
 80004be:	f1b8 0f00 	cmp.w	r8, #0
 80004c2:	f000 809f 	beq.w	8000604 <__udivmoddi4+0x32c>
 80004c6:	4603      	mov	r3, r0
 80004c8:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004cc:	eba4 040c 	sub.w	r4, r4, ip
 80004d0:	fba0 ec02 	umull	lr, ip, r0, r2
 80004d4:	4564      	cmp	r4, ip
 80004d6:	4673      	mov	r3, lr
 80004d8:	46e0      	mov	r8, ip
 80004da:	d302      	bcc.n	80004e2 <__udivmoddi4+0x20a>
 80004dc:	d107      	bne.n	80004ee <__udivmoddi4+0x216>
 80004de:	45f1      	cmp	r9, lr
 80004e0:	d205      	bcs.n	80004ee <__udivmoddi4+0x216>
 80004e2:	ebbe 0302 	subs.w	r3, lr, r2
 80004e6:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004ea:	3801      	subs	r0, #1
 80004ec:	46e0      	mov	r8, ip
 80004ee:	b15d      	cbz	r5, 8000508 <__udivmoddi4+0x230>
 80004f0:	ebb9 0203 	subs.w	r2, r9, r3
 80004f4:	eb64 0408 	sbc.w	r4, r4, r8
 80004f8:	fa04 f606 	lsl.w	r6, r4, r6
 80004fc:	fa22 f301 	lsr.w	r3, r2, r1
 8000500:	40cc      	lsrs	r4, r1
 8000502:	431e      	orrs	r6, r3
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e736      	b.n	800037a <__udivmoddi4+0xa2>
 800050c:	fbb1 fcf2 	udiv	ip, r1, r2
 8000510:	0c01      	lsrs	r1, r0, #16
 8000512:	4614      	mov	r4, r2
 8000514:	b280      	uxth	r0, r0
 8000516:	4696      	mov	lr, r2
 8000518:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800051c:	2620      	movs	r6, #32
 800051e:	4690      	mov	r8, r2
 8000520:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000524:	4610      	mov	r0, r2
 8000526:	fbb1 f1f2 	udiv	r1, r1, r2
 800052a:	eba3 0308 	sub.w	r3, r3, r8
 800052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000532:	e74b      	b.n	80003cc <__udivmoddi4+0xf4>
 8000534:	40b7      	lsls	r7, r6
 8000536:	f1c6 0320 	rsb	r3, r6, #32
 800053a:	fa01 f206 	lsl.w	r2, r1, r6
 800053e:	fa21 f803 	lsr.w	r8, r1, r3
 8000542:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000546:	fa20 f303 	lsr.w	r3, r0, r3
 800054a:	b2bc      	uxth	r4, r7
 800054c:	40b0      	lsls	r0, r6
 800054e:	4313      	orrs	r3, r2
 8000550:	0c02      	lsrs	r2, r0, #16
 8000552:	0c19      	lsrs	r1, r3, #16
 8000554:	b280      	uxth	r0, r0
 8000556:	fbb8 f9fe 	udiv	r9, r8, lr
 800055a:	fb0e 8819 	mls	r8, lr, r9, r8
 800055e:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000562:	fb09 f804 	mul.w	r8, r9, r4
 8000566:	4588      	cmp	r8, r1
 8000568:	d951      	bls.n	800060e <__udivmoddi4+0x336>
 800056a:	1879      	adds	r1, r7, r1
 800056c:	f109 3cff 	add.w	ip, r9, #4294967295
 8000570:	bf2c      	ite	cs
 8000572:	f04f 0a01 	movcs.w	sl, #1
 8000576:	f04f 0a00 	movcc.w	sl, #0
 800057a:	4588      	cmp	r8, r1
 800057c:	d902      	bls.n	8000584 <__udivmoddi4+0x2ac>
 800057e:	f1ba 0f00 	cmp.w	sl, #0
 8000582:	d031      	beq.n	80005e8 <__udivmoddi4+0x310>
 8000584:	eba1 0108 	sub.w	r1, r1, r8
 8000588:	fbb1 f9fe 	udiv	r9, r1, lr
 800058c:	fb09 f804 	mul.w	r8, r9, r4
 8000590:	fb0e 1119 	mls	r1, lr, r9, r1
 8000594:	b29b      	uxth	r3, r3
 8000596:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800059a:	4543      	cmp	r3, r8
 800059c:	d235      	bcs.n	800060a <__udivmoddi4+0x332>
 800059e:	18fb      	adds	r3, r7, r3
 80005a0:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a4:	bf2c      	ite	cs
 80005a6:	f04f 0a01 	movcs.w	sl, #1
 80005aa:	f04f 0a00 	movcc.w	sl, #0
 80005ae:	4543      	cmp	r3, r8
 80005b0:	d2bb      	bcs.n	800052a <__udivmoddi4+0x252>
 80005b2:	f1ba 0f00 	cmp.w	sl, #0
 80005b6:	d1b8      	bne.n	800052a <__udivmoddi4+0x252>
 80005b8:	f1a9 0102 	sub.w	r1, r9, #2
 80005bc:	443b      	add	r3, r7
 80005be:	e7b4      	b.n	800052a <__udivmoddi4+0x252>
 80005c0:	1a84      	subs	r4, r0, r2
 80005c2:	eb68 0203 	sbc.w	r2, r8, r3
 80005c6:	2001      	movs	r0, #1
 80005c8:	4696      	mov	lr, r2
 80005ca:	e6eb      	b.n	80003a4 <__udivmoddi4+0xcc>
 80005cc:	443a      	add	r2, r7
 80005ce:	f1a8 0802 	sub.w	r8, r8, #2
 80005d2:	e72b      	b.n	800042c <__udivmoddi4+0x154>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	443b      	add	r3, r7
 80005da:	e710      	b.n	80003fe <__udivmoddi4+0x126>
 80005dc:	3902      	subs	r1, #2
 80005de:	443b      	add	r3, r7
 80005e0:	e6a9      	b.n	8000336 <__udivmoddi4+0x5e>
 80005e2:	443a      	add	r2, r7
 80005e4:	3802      	subs	r0, #2
 80005e6:	e6be      	b.n	8000366 <__udivmoddi4+0x8e>
 80005e8:	eba7 0808 	sub.w	r8, r7, r8
 80005ec:	f1a9 0c02 	sub.w	ip, r9, #2
 80005f0:	4441      	add	r1, r8
 80005f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80005f6:	fb09 f804 	mul.w	r8, r9, r4
 80005fa:	e7c9      	b.n	8000590 <__udivmoddi4+0x2b8>
 80005fc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000600:	443c      	add	r4, r7
 8000602:	e744      	b.n	800048e <__udivmoddi4+0x1b6>
 8000604:	3b02      	subs	r3, #2
 8000606:	443c      	add	r4, r7
 8000608:	e75e      	b.n	80004c8 <__udivmoddi4+0x1f0>
 800060a:	4649      	mov	r1, r9
 800060c:	e78d      	b.n	800052a <__udivmoddi4+0x252>
 800060e:	eba1 0108 	sub.w	r1, r1, r8
 8000612:	46cc      	mov	ip, r9
 8000614:	fbb1 f9fe 	udiv	r9, r1, lr
 8000618:	fb09 f804 	mul.w	r8, r9, r4
 800061c:	e7b8      	b.n	8000590 <__udivmoddi4+0x2b8>
 800061e:	bf00      	nop

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <I2C_Scan>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
void I2C_Scan(void) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b08e      	sub	sp, #56	@ 0x38
 8000628:	af00      	add	r7, sp, #0
    uint8_t i;
    uint8_t result;
    for(i=1; i<128; i++) {
 800062a:	2301      	movs	r3, #1
 800062c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000630:	e027      	b.n	8000682 <I2C_Scan+0x5e>
    	result = HAL_I2C_IsDeviceReady(&hi2c1, i<<1, 1, 10);
 8000632:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000636:	b29b      	uxth	r3, r3
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	b299      	uxth	r1, r3
 800063c:	230a      	movs	r3, #10
 800063e:	2201      	movs	r2, #1
 8000640:	4814      	ldr	r0, [pc, #80]	@ (8000694 <I2C_Scan+0x70>)
 8000642:	f000 ffae 	bl	80015a2 <HAL_I2C_IsDeviceReady>
 8000646:	4603      	mov	r3, r0
 8000648:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        if(result == HAL_OK) {
 800064c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000650:	2b00      	cmp	r3, #0
 8000652:	d111      	bne.n	8000678 <I2C_Scan+0x54>
            char msg[50];
            sprintf(msg, "Device found at address: 0x%02X\r\n", i);
 8000654:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	490f      	ldr	r1, [pc, #60]	@ (8000698 <I2C_Scan+0x74>)
 800065c:	4618      	mov	r0, r3
 800065e:	f005 f875 	bl	800574c <siprintf>
            HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 100);
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	4618      	mov	r0, r3
 8000666:	f7ff fe17 	bl	8000298 <strlen>
 800066a:	4603      	mov	r3, r0
 800066c:	b29a      	uxth	r2, r3
 800066e:	1d39      	adds	r1, r7, #4
 8000670:	2364      	movs	r3, #100	@ 0x64
 8000672:	480a      	ldr	r0, [pc, #40]	@ (800069c <I2C_Scan+0x78>)
 8000674:	f004 fb2c 	bl	8004cd0 <HAL_UART_Transmit>
    for(i=1; i<128; i++) {
 8000678:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800067c:	3301      	adds	r3, #1
 800067e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000682:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8000686:	2b00      	cmp	r3, #0
 8000688:	dad3      	bge.n	8000632 <I2C_Scan+0xe>
        }

    }
}
 800068a:	bf00      	nop
 800068c:	bf00      	nop
 800068e:	3738      	adds	r7, #56	@ 0x38
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000078 	.word	0x20000078
 8000698:	080060c8 	.word	0x080060c8
 800069c:	200000cc 	.word	0x200000cc

080006a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a6:	f000 fb61 	bl	8000d6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006aa:	f000 f811 	bl	80006d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ae:	f000 f92f 	bl	8000910 <MX_GPIO_Init>
  MX_I2C1_Init();
 80006b2:	f000 f86d 	bl	8000790 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80006b6:	f000 f8df 	bl	8000878 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t txt[]="START I2C";
 80006ba:	4a04      	ldr	r2, [pc, #16]	@ (80006cc <main+0x2c>)
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	ca07      	ldmia	r2, {r0, r1, r2}
 80006c0:	c303      	stmia	r3!, {r0, r1}
 80006c2:	801a      	strh	r2, [r3, #0]

  while (1)
  {
    /* USER CODE END WHILE */
	  I2C_Scan();
 80006c4:	f7ff ffae 	bl	8000624 <I2C_Scan>
 80006c8:	e7fc      	b.n	80006c4 <main+0x24>
 80006ca:	bf00      	nop
 80006cc:	080060ec 	.word	0x080060ec

080006d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b09c      	sub	sp, #112	@ 0x70
 80006d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d6:	f107 0320 	add.w	r3, r7, #32
 80006da:	2250      	movs	r2, #80	@ 0x50
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f005 f856 	bl	8005790 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e4:	f107 0308 	add.w	r3, r7, #8
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]
 80006f4:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006f6:	4b24      	ldr	r3, [pc, #144]	@ (8000788 <SystemClock_Config+0xb8>)
 80006f8:	691b      	ldr	r3, [r3, #16]
 80006fa:	4a23      	ldr	r2, [pc, #140]	@ (8000788 <SystemClock_Config+0xb8>)
 80006fc:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000700:	6113      	str	r3, [r2, #16]
 8000702:	4b21      	ldr	r3, [pc, #132]	@ (8000788 <SystemClock_Config+0xb8>)
 8000704:	691b      	ldr	r3, [r3, #16]
 8000706:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800070e:	bf00      	nop
 8000710:	4b1d      	ldr	r3, [pc, #116]	@ (8000788 <SystemClock_Config+0xb8>)
 8000712:	695b      	ldr	r3, [r3, #20]
 8000714:	f003 0308 	and.w	r3, r3, #8
 8000718:	2b08      	cmp	r3, #8
 800071a:	d1f9      	bne.n	8000710 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800071c:	2302      	movs	r3, #2
 800071e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000720:	2301      	movs	r3, #1
 8000722:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 8000724:	2308      	movs	r3, #8
 8000726:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000728:	2340      	movs	r3, #64	@ 0x40
 800072a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800072c:	2300      	movs	r3, #0
 800072e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000730:	f107 0320 	add.w	r3, r7, #32
 8000734:	4618      	mov	r0, r3
 8000736:	f001 fa2f 	bl	8001b98 <HAL_RCC_OscConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000740:	f000 f91e 	bl	8000980 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000744:	231f      	movs	r3, #31
 8000746:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000748:	2300      	movs	r3, #0
 800074a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000758:	2300      	movs	r3, #0
 800075a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800075c:	f107 0308 	add.w	r3, r7, #8
 8000760:	2101      	movs	r1, #1
 8000762:	4618      	mov	r0, r3
 8000764:	f001 fe50 	bl	8002408 <HAL_RCC_ClockConfig>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800076e:	f000 f907 	bl	8000980 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_0);
 8000772:	4b06      	ldr	r3, [pc, #24]	@ (800078c <SystemClock_Config+0xbc>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4a05      	ldr	r2, [pc, #20]	@ (800078c <SystemClock_Config+0xbc>)
 8000778:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800077c:	6013      	str	r3, [r2, #0]
}
 800077e:	bf00      	nop
 8000780:	3770      	adds	r7, #112	@ 0x70
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	44020800 	.word	0x44020800
 800078c:	40022000 	.word	0x40022000

08000790 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  // Включение тактирования GPIOB
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a4:	4b2f      	ldr	r3, [pc, #188]	@ (8000864 <MX_I2C1_Init+0xd4>)
 80007a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007aa:	4a2e      	ldr	r2, [pc, #184]	@ (8000864 <MX_I2C1_Init+0xd4>)
 80007ac:	f043 0302 	orr.w	r3, r3, #2
 80007b0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80007b4:	4b2b      	ldr	r3, [pc, #172]	@ (8000864 <MX_I2C1_Init+0xd4>)
 80007b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007ba:	f003 0302 	and.w	r3, r3, #2
 80007be:	603b      	str	r3, [r7, #0]
 80007c0:	683b      	ldr	r3, [r7, #0]

  // Настройка PB6 (SCL)
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007c2:	2340      	movs	r3, #64	@ 0x40
 80007c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007c6:	2312      	movs	r3, #18
 80007c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007ca:	2301      	movs	r3, #1
 80007cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ce:	2302      	movs	r3, #2
 80007d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007d2:	2304      	movs	r3, #4
 80007d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	4619      	mov	r1, r3
 80007da:	4823      	ldr	r0, [pc, #140]	@ (8000868 <MX_I2C1_Init+0xd8>)
 80007dc:	f000 fce8 	bl	80011b0 <HAL_GPIO_Init>

  // Настройка PB10 (SDA)
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007e4:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e6:	1d3b      	adds	r3, r7, #4
 80007e8:	4619      	mov	r1, r3
 80007ea:	481f      	ldr	r0, [pc, #124]	@ (8000868 <MX_I2C1_Init+0xd8>)
 80007ec:	f000 fce0 	bl	80011b0 <HAL_GPIO_Init>
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007f0:	4b1e      	ldr	r3, [pc, #120]	@ (800086c <MX_I2C1_Init+0xdc>)
 80007f2:	4a1f      	ldr	r2, [pc, #124]	@ (8000870 <MX_I2C1_Init+0xe0>)
 80007f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80007f6:	4b1d      	ldr	r3, [pc, #116]	@ (800086c <MX_I2C1_Init+0xdc>)
 80007f8:	4a1e      	ldr	r2, [pc, #120]	@ (8000874 <MX_I2C1_Init+0xe4>)
 80007fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007fc:	4b1b      	ldr	r3, [pc, #108]	@ (800086c <MX_I2C1_Init+0xdc>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000802:	4b1a      	ldr	r3, [pc, #104]	@ (800086c <MX_I2C1_Init+0xdc>)
 8000804:	2201      	movs	r2, #1
 8000806:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000808:	4b18      	ldr	r3, [pc, #96]	@ (800086c <MX_I2C1_Init+0xdc>)
 800080a:	2200      	movs	r2, #0
 800080c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800080e:	4b17      	ldr	r3, [pc, #92]	@ (800086c <MX_I2C1_Init+0xdc>)
 8000810:	2200      	movs	r2, #0
 8000812:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000814:	4b15      	ldr	r3, [pc, #84]	@ (800086c <MX_I2C1_Init+0xdc>)
 8000816:	2200      	movs	r2, #0
 8000818:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800081a:	4b14      	ldr	r3, [pc, #80]	@ (800086c <MX_I2C1_Init+0xdc>)
 800081c:	2200      	movs	r2, #0
 800081e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000820:	4b12      	ldr	r3, [pc, #72]	@ (800086c <MX_I2C1_Init+0xdc>)
 8000822:	2200      	movs	r2, #0
 8000824:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000826:	4811      	ldr	r0, [pc, #68]	@ (800086c <MX_I2C1_Init+0xdc>)
 8000828:	f000 fe20 	bl	800146c <HAL_I2C_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_I2C1_Init+0xa6>
  {
    Error_Handler();
 8000832:	f000 f8a5 	bl	8000980 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000836:	2100      	movs	r1, #0
 8000838:	480c      	ldr	r0, [pc, #48]	@ (800086c <MX_I2C1_Init+0xdc>)
 800083a:	f001 f915 	bl	8001a68 <HAL_I2CEx_ConfigAnalogFilter>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_I2C1_Init+0xb8>
  {
    Error_Handler();
 8000844:	f000 f89c 	bl	8000980 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000848:	2100      	movs	r1, #0
 800084a:	4808      	ldr	r0, [pc, #32]	@ (800086c <MX_I2C1_Init+0xdc>)
 800084c:	f001 f957 	bl	8001afe <HAL_I2CEx_ConfigDigitalFilter>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_I2C1_Init+0xca>
  {
    Error_Handler();
 8000856:	f000 f893 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	3718      	adds	r7, #24
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	44020c00 	.word	0x44020c00
 8000868:	42020400 	.word	0x42020400
 800086c:	20000078 	.word	0x20000078
 8000870:	40005400 	.word	0x40005400
 8000874:	00707cbb 	.word	0x00707cbb

08000878 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800087c:	4b22      	ldr	r3, [pc, #136]	@ (8000908 <MX_USART1_UART_Init+0x90>)
 800087e:	4a23      	ldr	r2, [pc, #140]	@ (800090c <MX_USART1_UART_Init+0x94>)
 8000880:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000882:	4b21      	ldr	r3, [pc, #132]	@ (8000908 <MX_USART1_UART_Init+0x90>)
 8000884:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000888:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800088a:	4b1f      	ldr	r3, [pc, #124]	@ (8000908 <MX_USART1_UART_Init+0x90>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000890:	4b1d      	ldr	r3, [pc, #116]	@ (8000908 <MX_USART1_UART_Init+0x90>)
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000896:	4b1c      	ldr	r3, [pc, #112]	@ (8000908 <MX_USART1_UART_Init+0x90>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800089c:	4b1a      	ldr	r3, [pc, #104]	@ (8000908 <MX_USART1_UART_Init+0x90>)
 800089e:	220c      	movs	r2, #12
 80008a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a2:	4b19      	ldr	r3, [pc, #100]	@ (8000908 <MX_USART1_UART_Init+0x90>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a8:	4b17      	ldr	r3, [pc, #92]	@ (8000908 <MX_USART1_UART_Init+0x90>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ae:	4b16      	ldr	r3, [pc, #88]	@ (8000908 <MX_USART1_UART_Init+0x90>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008b4:	4b14      	ldr	r3, [pc, #80]	@ (8000908 <MX_USART1_UART_Init+0x90>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ba:	4b13      	ldr	r3, [pc, #76]	@ (8000908 <MX_USART1_UART_Init+0x90>)
 80008bc:	2200      	movs	r2, #0
 80008be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008c0:	4811      	ldr	r0, [pc, #68]	@ (8000908 <MX_USART1_UART_Init+0x90>)
 80008c2:	f004 f9b5 	bl	8004c30 <HAL_UART_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80008cc:	f000 f858 	bl	8000980 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008d0:	2100      	movs	r1, #0
 80008d2:	480d      	ldr	r0, [pc, #52]	@ (8000908 <MX_USART1_UART_Init+0x90>)
 80008d4:	f004 fe70 	bl	80055b8 <HAL_UARTEx_SetTxFifoThreshold>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80008de:	f000 f84f 	bl	8000980 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008e2:	2100      	movs	r1, #0
 80008e4:	4808      	ldr	r0, [pc, #32]	@ (8000908 <MX_USART1_UART_Init+0x90>)
 80008e6:	f004 fea5 	bl	8005634 <HAL_UARTEx_SetRxFifoThreshold>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80008f0:	f000 f846 	bl	8000980 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80008f4:	4804      	ldr	r0, [pc, #16]	@ (8000908 <MX_USART1_UART_Init+0x90>)
 80008f6:	f004 fe26 	bl	8005546 <HAL_UARTEx_DisableFifoMode>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000900:	f000 f83e 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}
 8000908:	200000cc 	.word	0x200000cc
 800090c:	40013800 	.word	0x40013800

08000910 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000916:	4b19      	ldr	r3, [pc, #100]	@ (800097c <MX_GPIO_Init+0x6c>)
 8000918:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800091c:	4a17      	ldr	r2, [pc, #92]	@ (800097c <MX_GPIO_Init+0x6c>)
 800091e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000922:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000926:	4b15      	ldr	r3, [pc, #84]	@ (800097c <MX_GPIO_Init+0x6c>)
 8000928:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800092c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000934:	4b11      	ldr	r3, [pc, #68]	@ (800097c <MX_GPIO_Init+0x6c>)
 8000936:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800093a:	4a10      	ldr	r2, [pc, #64]	@ (800097c <MX_GPIO_Init+0x6c>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000944:	4b0d      	ldr	r3, [pc, #52]	@ (800097c <MX_GPIO_Init+0x6c>)
 8000946:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000952:	4b0a      	ldr	r3, [pc, #40]	@ (800097c <MX_GPIO_Init+0x6c>)
 8000954:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000958:	4a08      	ldr	r2, [pc, #32]	@ (800097c <MX_GPIO_Init+0x6c>)
 800095a:	f043 0302 	orr.w	r3, r3, #2
 800095e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000962:	4b06      	ldr	r3, [pc, #24]	@ (800097c <MX_GPIO_Init+0x6c>)
 8000964:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000968:	f003 0302 	and.w	r3, r3, #2
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000970:	bf00      	nop
 8000972:	3714      	adds	r7, #20
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr
 800097c:	44020c00 	.word	0x44020c00

08000980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000984:	b672      	cpsid	i
}
 8000986:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <Error_Handler+0x8>

0800098c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
	...

0800099c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b0ac      	sub	sp, #176	@ 0xb0
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009b4:	f107 0310 	add.w	r3, r7, #16
 80009b8:	2288      	movs	r2, #136	@ 0x88
 80009ba:	2100      	movs	r1, #0
 80009bc:	4618      	mov	r0, r3
 80009be:	f004 fee7 	bl	8005790 <memset>
  if(hi2c->Instance==I2C1)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a31      	ldr	r2, [pc, #196]	@ (8000a8c <HAL_I2C_MspInit+0xf0>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d15a      	bne.n	8000a82 <HAL_I2C_MspInit+0xe6>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80009cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009d0:	f04f 0300 	mov.w	r3, #0
 80009d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80009d8:	2300      	movs	r3, #0
 80009da:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009dc:	f107 0310 	add.w	r3, r7, #16
 80009e0:	4618      	mov	r0, r3
 80009e2:	f002 f853 	bl	8002a8c <HAL_RCCEx_PeriphCLKConfig>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <HAL_I2C_MspInit+0x54>
    {
      Error_Handler();
 80009ec:	f7ff ffc8 	bl	8000980 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f0:	4b27      	ldr	r3, [pc, #156]	@ (8000a90 <HAL_I2C_MspInit+0xf4>)
 80009f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009f6:	4a26      	ldr	r2, [pc, #152]	@ (8000a90 <HAL_I2C_MspInit+0xf4>)
 80009f8:	f043 0302 	orr.w	r3, r3, #2
 80009fc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a00:	4b23      	ldr	r3, [pc, #140]	@ (8000a90 <HAL_I2C_MspInit+0xf4>)
 8000a02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a06:	f003 0302 	and.w	r3, r3, #2
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB10     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a12:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a16:	2312      	movs	r3, #18
 8000a18:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a22:	2300      	movs	r3, #0
 8000a24:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C1;
 8000a28:	230b      	movs	r3, #11
 8000a2a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a32:	4619      	mov	r1, r3
 8000a34:	4817      	ldr	r0, [pc, #92]	@ (8000a94 <HAL_I2C_MspInit+0xf8>)
 8000a36:	f000 fbbb 	bl	80011b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a3a:	2340      	movs	r3, #64	@ 0x40
 8000a3c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a40:	2312      	movs	r3, #18
 8000a42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a46:	2301      	movs	r3, #1
 8000a48:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a52:	2304      	movs	r3, #4
 8000a54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a58:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	480d      	ldr	r0, [pc, #52]	@ (8000a94 <HAL_I2C_MspInit+0xf8>)
 8000a60:	f000 fba6 	bl	80011b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a64:	4b0a      	ldr	r3, [pc, #40]	@ (8000a90 <HAL_I2C_MspInit+0xf4>)
 8000a66:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000a6a:	4a09      	ldr	r2, [pc, #36]	@ (8000a90 <HAL_I2C_MspInit+0xf4>)
 8000a6c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a70:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000a74:	4b06      	ldr	r3, [pc, #24]	@ (8000a90 <HAL_I2C_MspInit+0xf4>)
 8000a76:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000a7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000a82:	bf00      	nop
 8000a84:	37b0      	adds	r7, #176	@ 0xb0
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40005400 	.word	0x40005400
 8000a90:	44020c00 	.word	0x44020c00
 8000a94:	42020400 	.word	0x42020400

08000a98 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b0ac      	sub	sp, #176	@ 0xb0
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ab0:	f107 0310 	add.w	r3, r7, #16
 8000ab4:	2288      	movs	r2, #136	@ 0x88
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f004 fe69 	bl	8005790 <memset>
  if(huart->Instance==USART1)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a26      	ldr	r2, [pc, #152]	@ (8000b5c <HAL_UART_MspInit+0xc4>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d144      	bne.n	8000b52 <HAL_UART_MspInit+0xba>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ac8:	f04f 0201 	mov.w	r2, #1
 8000acc:	f04f 0300 	mov.w	r3, #0
 8000ad0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ad8:	f107 0310 	add.w	r3, r7, #16
 8000adc:	4618      	mov	r0, r3
 8000ade:	f001 ffd5 	bl	8002a8c <HAL_RCCEx_PeriphCLKConfig>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000ae8:	f7ff ff4a 	bl	8000980 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000aec:	4b1c      	ldr	r3, [pc, #112]	@ (8000b60 <HAL_UART_MspInit+0xc8>)
 8000aee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000af2:	4a1b      	ldr	r2, [pc, #108]	@ (8000b60 <HAL_UART_MspInit+0xc8>)
 8000af4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000af8:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000afc:	4b18      	ldr	r3, [pc, #96]	@ (8000b60 <HAL_UART_MspInit+0xc8>)
 8000afe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000b02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	4b15      	ldr	r3, [pc, #84]	@ (8000b60 <HAL_UART_MspInit+0xc8>)
 8000b0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b10:	4a13      	ldr	r2, [pc, #76]	@ (8000b60 <HAL_UART_MspInit+0xc8>)
 8000b12:	f043 0301 	orr.w	r3, r3, #1
 8000b16:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b1a:	4b11      	ldr	r3, [pc, #68]	@ (8000b60 <HAL_UART_MspInit+0xc8>)
 8000b1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b20:	f003 0301 	and.w	r3, r3, #1
 8000b24:	60bb      	str	r3, [r7, #8]
 8000b26:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA1     ------> USART1_RX
    PA2     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000b28:	2306      	movs	r3, #6
 8000b2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART1;
 8000b40:	2308      	movs	r3, #8
 8000b42:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b46:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4805      	ldr	r0, [pc, #20]	@ (8000b64 <HAL_UART_MspInit+0xcc>)
 8000b4e:	f000 fb2f 	bl	80011b0 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000b52:	bf00      	nop
 8000b54:	37b0      	adds	r7, #176	@ 0xb0
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40013800 	.word	0x40013800
 8000b60:	44020c00 	.word	0x44020c00
 8000b64:	42020000 	.word	0x42020000

08000b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <NMI_Handler+0x4>

08000b70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <HardFault_Handler+0x4>

08000b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <MemManage_Handler+0x4>

08000b80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <BusFault_Handler+0x4>

08000b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <UsageFault_Handler+0x4>

08000b90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr

08000bba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bbe:	f000 f973 	bl	8000ea8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
	...

08000bc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd0:	4a14      	ldr	r2, [pc, #80]	@ (8000c24 <_sbrk+0x5c>)
 8000bd2:	4b15      	ldr	r3, [pc, #84]	@ (8000c28 <_sbrk+0x60>)
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bdc:	4b13      	ldr	r3, [pc, #76]	@ (8000c2c <_sbrk+0x64>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d102      	bne.n	8000bea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be4:	4b11      	ldr	r3, [pc, #68]	@ (8000c2c <_sbrk+0x64>)
 8000be6:	4a12      	ldr	r2, [pc, #72]	@ (8000c30 <_sbrk+0x68>)
 8000be8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bea:	4b10      	ldr	r3, [pc, #64]	@ (8000c2c <_sbrk+0x64>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d207      	bcs.n	8000c08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bf8:	f004 fdd2 	bl	80057a0 <__errno>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	220c      	movs	r2, #12
 8000c00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c02:	f04f 33ff 	mov.w	r3, #4294967295
 8000c06:	e009      	b.n	8000c1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c08:	4b08      	ldr	r3, [pc, #32]	@ (8000c2c <_sbrk+0x64>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c0e:	4b07      	ldr	r3, [pc, #28]	@ (8000c2c <_sbrk+0x64>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4413      	add	r3, r2
 8000c16:	4a05      	ldr	r2, [pc, #20]	@ (8000c2c <_sbrk+0x64>)
 8000c18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3718      	adds	r7, #24
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20008000 	.word	0x20008000
 8000c28:	00000400 	.word	0x00000400
 8000c2c:	20000160 	.word	0x20000160
 8000c30:	200002b0 	.word	0x200002b0

08000c34 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c3a:	4b30      	ldr	r3, [pc, #192]	@ (8000cfc <SystemInit+0xc8>)
 8000c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c40:	4a2e      	ldr	r2, [pc, #184]	@ (8000cfc <SystemInit+0xc8>)
 8000c42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c46:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000c4a:	4b2d      	ldr	r3, [pc, #180]	@ (8000d00 <SystemInit+0xcc>)
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000c50:	4b2b      	ldr	r3, [pc, #172]	@ (8000d00 <SystemInit+0xcc>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000c56:	4b2a      	ldr	r3, [pc, #168]	@ (8000d00 <SystemInit+0xcc>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000c5c:	4b28      	ldr	r3, [pc, #160]	@ (8000d00 <SystemInit+0xcc>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	4927      	ldr	r1, [pc, #156]	@ (8000d00 <SystemInit+0xcc>)
 8000c62:	4b28      	ldr	r3, [pc, #160]	@ (8000d04 <SystemInit+0xd0>)
 8000c64:	4013      	ands	r3, r2
 8000c66:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000c68:	4b25      	ldr	r3, [pc, #148]	@ (8000d00 <SystemInit+0xcc>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8000c6e:	4b24      	ldr	r3, [pc, #144]	@ (8000d00 <SystemInit+0xcc>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000c74:	4b22      	ldr	r3, [pc, #136]	@ (8000d00 <SystemInit+0xcc>)
 8000c76:	4a24      	ldr	r2, [pc, #144]	@ (8000d08 <SystemInit+0xd4>)
 8000c78:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000c7a:	4b21      	ldr	r3, [pc, #132]	@ (8000d00 <SystemInit+0xcc>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000c80:	4b1f      	ldr	r3, [pc, #124]	@ (8000d00 <SystemInit+0xcc>)
 8000c82:	4a21      	ldr	r2, [pc, #132]	@ (8000d08 <SystemInit+0xd4>)
 8000c84:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000c86:	4b1e      	ldr	r3, [pc, #120]	@ (8000d00 <SystemInit+0xcc>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000c8c:	4b1c      	ldr	r3, [pc, #112]	@ (8000d00 <SystemInit+0xcc>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a1b      	ldr	r2, [pc, #108]	@ (8000d00 <SystemInit+0xcc>)
 8000c92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c96:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000c98:	4b19      	ldr	r3, [pc, #100]	@ (8000d00 <SystemInit+0xcc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c9e:	4b17      	ldr	r3, [pc, #92]	@ (8000cfc <SystemInit+0xc8>)
 8000ca0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000ca4:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000ca6:	4b19      	ldr	r3, [pc, #100]	@ (8000d0c <SystemInit+0xd8>)
 8000ca8:	699b      	ldr	r3, [r3, #24]
 8000caa:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000cae:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000cb6:	d003      	beq.n	8000cc0 <SystemInit+0x8c>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000cbe:	d117      	bne.n	8000cf0 <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000cc0:	4b12      	ldr	r3, [pc, #72]	@ (8000d0c <SystemInit+0xd8>)
 8000cc2:	69db      	ldr	r3, [r3, #28]
 8000cc4:	f003 0301 	and.w	r3, r3, #1
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d005      	beq.n	8000cd8 <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d0c <SystemInit+0xd8>)
 8000cce:	4a10      	ldr	r2, [pc, #64]	@ (8000d10 <SystemInit+0xdc>)
 8000cd0:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d0c <SystemInit+0xd8>)
 8000cd4:	4a0f      	ldr	r2, [pc, #60]	@ (8000d14 <SystemInit+0xe0>)
 8000cd6:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d0c <SystemInit+0xd8>)
 8000cda:	69db      	ldr	r3, [r3, #28]
 8000cdc:	4a0b      	ldr	r2, [pc, #44]	@ (8000d0c <SystemInit+0xd8>)
 8000cde:	f043 0302 	orr.w	r3, r3, #2
 8000ce2:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000ce4:	4b09      	ldr	r3, [pc, #36]	@ (8000d0c <SystemInit+0xd8>)
 8000ce6:	69db      	ldr	r3, [r3, #28]
 8000ce8:	4a08      	ldr	r2, [pc, #32]	@ (8000d0c <SystemInit+0xd8>)
 8000cea:	f043 0301 	orr.w	r3, r3, #1
 8000cee:	61d3      	str	r3, [r2, #28]
  }
}
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000ed00 	.word	0xe000ed00
 8000d00:	44020c00 	.word	0x44020c00
 8000d04:	fae2eae3 	.word	0xfae2eae3
 8000d08:	01010280 	.word	0x01010280
 8000d0c:	40022000 	.word	0x40022000
 8000d10:	08192a3b 	.word	0x08192a3b
 8000d14:	4c5d6e7f 	.word	0x4c5d6e7f

08000d18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000d18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d50 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000d1c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000d1e:	e003      	b.n	8000d28 <LoopCopyDataInit>

08000d20 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000d20:	4b0c      	ldr	r3, [pc, #48]	@ (8000d54 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000d22:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000d24:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000d26:	3104      	adds	r1, #4

08000d28 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000d28:	480b      	ldr	r0, [pc, #44]	@ (8000d58 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000d2c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000d2e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000d30:	d3f6      	bcc.n	8000d20 <CopyDataInit>
	ldr	r2, =_sbss
 8000d32:	4a0b      	ldr	r2, [pc, #44]	@ (8000d60 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000d34:	e002      	b.n	8000d3c <LoopFillZerobss>

08000d36 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000d36:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000d38:	f842 3b04 	str.w	r3, [r2], #4

08000d3c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000d3c:	4b09      	ldr	r3, [pc, #36]	@ (8000d64 <LoopForever+0x16>)
	cmp	r2, r3
 8000d3e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000d40:	d3f9      	bcc.n	8000d36 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d42:	f7ff ff77 	bl	8000c34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d46:	f004 fd31 	bl	80057ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d4a:	f7ff fca9 	bl	80006a0 <main>

08000d4e <LoopForever>:

LoopForever:
    b LoopForever
 8000d4e:	e7fe      	b.n	8000d4e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000d50:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8000d54:	0800617c 	.word	0x0800617c
	ldr	r0, =_sdata
 8000d58:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000d5c:	2000005c 	.word	0x2000005c
	ldr	r2, =_sbss
 8000d60:	2000005c 	.word	0x2000005c
	ldr	r3, = _ebss
 8000d64:	200002b0 	.word	0x200002b0

08000d68 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d68:	e7fe      	b.n	8000d68 <ADC1_IRQHandler>
	...

08000d6c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d70:	2003      	movs	r0, #3
 8000d72:	f000 f948 	bl	8001006 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000d76:	f001 fcff 	bl	8002778 <HAL_RCC_GetSysClockFreq>
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000db0 <HAL_Init+0x44>)
 8000d7e:	6a1b      	ldr	r3, [r3, #32]
 8000d80:	f003 030f 	and.w	r3, r3, #15
 8000d84:	490b      	ldr	r1, [pc, #44]	@ (8000db4 <HAL_Init+0x48>)
 8000d86:	5ccb      	ldrb	r3, [r1, r3]
 8000d88:	fa22 f303 	lsr.w	r3, r2, r3
 8000d8c:	4a0a      	ldr	r2, [pc, #40]	@ (8000db8 <HAL_Init+0x4c>)
 8000d8e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000d90:	2004      	movs	r0, #4
 8000d92:	f000 f97f 	bl	8001094 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d96:	200f      	movs	r0, #15
 8000d98:	f000 f810 	bl	8000dbc <HAL_InitTick>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e002      	b.n	8000dac <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000da6:	f7ff fdf1 	bl	800098c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000daa:	2300      	movs	r3, #0
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	44020c00 	.word	0x44020c00
 8000db4:	080060f8 	.word	0x080060f8
 8000db8:	20000000 	.word	0x20000000

08000dbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000dc8:	4b33      	ldr	r3, [pc, #204]	@ (8000e98 <HAL_InitTick+0xdc>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d101      	bne.n	8000dd4 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	e05c      	b.n	8000e8e <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000dd4:	4b31      	ldr	r3, [pc, #196]	@ (8000e9c <HAL_InitTick+0xe0>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f003 0304 	and.w	r3, r3, #4
 8000ddc:	2b04      	cmp	r3, #4
 8000dde:	d10c      	bne.n	8000dfa <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000de0:	4b2f      	ldr	r3, [pc, #188]	@ (8000ea0 <HAL_InitTick+0xe4>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	4b2c      	ldr	r3, [pc, #176]	@ (8000e98 <HAL_InitTick+0xdc>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	4619      	mov	r1, r3
 8000dea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	e037      	b.n	8000e6a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000dfa:	f000 f9a3 	bl	8001144 <HAL_SYSTICK_GetCLKSourceConfig>
 8000dfe:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d023      	beq.n	8000e4e <HAL_InitTick+0x92>
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d82d      	bhi.n	8000e68 <HAL_InitTick+0xac>
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d003      	beq.n	8000e1a <HAL_InitTick+0x5e>
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d00d      	beq.n	8000e34 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000e18:	e026      	b.n	8000e68 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000e1a:	4b21      	ldr	r3, [pc, #132]	@ (8000ea0 <HAL_InitTick+0xe4>)
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	4b1e      	ldr	r3, [pc, #120]	@ (8000e98 <HAL_InitTick+0xdc>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	4619      	mov	r1, r3
 8000e24:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000e28:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e30:	60fb      	str	r3, [r7, #12]
        break;
 8000e32:	e01a      	b.n	8000e6a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000e34:	4b18      	ldr	r3, [pc, #96]	@ (8000e98 <HAL_InitTick+0xdc>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e42:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4a:	60fb      	str	r3, [r7, #12]
        break;
 8000e4c:	e00d      	b.n	8000e6a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000e4e:	4b12      	ldr	r3, [pc, #72]	@ (8000e98 <HAL_InitTick+0xdc>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	461a      	mov	r2, r3
 8000e54:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e58:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e5c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e64:	60fb      	str	r3, [r7, #12]
        break;
 8000e66:	e000      	b.n	8000e6a <HAL_InitTick+0xae>
        break;
 8000e68:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000e6a:	68f8      	ldr	r0, [r7, #12]
 8000e6c:	f000 f8f0 	bl	8001050 <HAL_SYSTICK_Config>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e009      	b.n	8000e8e <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	6879      	ldr	r1, [r7, #4]
 8000e7e:	f04f 30ff 	mov.w	r0, #4294967295
 8000e82:	f000 f8cb 	bl	800101c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000e86:	4a07      	ldr	r2, [pc, #28]	@ (8000ea4 <HAL_InitTick+0xe8>)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000008 	.word	0x20000008
 8000e9c:	e000e010 	.word	0xe000e010
 8000ea0:	20000000 	.word	0x20000000
 8000ea4:	20000004 	.word	0x20000004

08000ea8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000eac:	4b06      	ldr	r3, [pc, #24]	@ (8000ec8 <HAL_IncTick+0x20>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4b06      	ldr	r3, [pc, #24]	@ (8000ecc <HAL_IncTick+0x24>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	4a04      	ldr	r2, [pc, #16]	@ (8000ecc <HAL_IncTick+0x24>)
 8000eba:	6013      	str	r3, [r2, #0]
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	20000008 	.word	0x20000008
 8000ecc:	20000164 	.word	0x20000164

08000ed0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed4:	4b03      	ldr	r3, [pc, #12]	@ (8000ee4 <HAL_GetTick+0x14>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	20000164 	.word	0x20000164

08000ee8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f2c <__NVIC_SetPriorityGrouping+0x44>)
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000efe:	68ba      	ldr	r2, [r7, #8]
 8000f00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f04:	4013      	ands	r3, r2
 8000f06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f1a:	4a04      	ldr	r2, [pc, #16]	@ (8000f2c <__NVIC_SetPriorityGrouping+0x44>)
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	60d3      	str	r3, [r2, #12]
}
 8000f20:	bf00      	nop
 8000f22:	3714      	adds	r7, #20
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f34:	4b04      	ldr	r3, [pc, #16]	@ (8000f48 <__NVIC_GetPriorityGrouping+0x18>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	0a1b      	lsrs	r3, r3, #8
 8000f3a:	f003 0307 	and.w	r3, r3, #7
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	6039      	str	r1, [r7, #0]
 8000f56:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	db0a      	blt.n	8000f76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	490c      	ldr	r1, [pc, #48]	@ (8000f98 <__NVIC_SetPriority+0x4c>)
 8000f66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f6a:	0112      	lsls	r2, r2, #4
 8000f6c:	b2d2      	uxtb	r2, r2
 8000f6e:	440b      	add	r3, r1
 8000f70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f74:	e00a      	b.n	8000f8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	4908      	ldr	r1, [pc, #32]	@ (8000f9c <__NVIC_SetPriority+0x50>)
 8000f7c:	88fb      	ldrh	r3, [r7, #6]
 8000f7e:	f003 030f 	and.w	r3, r3, #15
 8000f82:	3b04      	subs	r3, #4
 8000f84:	0112      	lsls	r2, r2, #4
 8000f86:	b2d2      	uxtb	r2, r2
 8000f88:	440b      	add	r3, r1
 8000f8a:	761a      	strb	r2, [r3, #24]
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	e000e100 	.word	0xe000e100
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b089      	sub	sp, #36	@ 0x24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	f1c3 0307 	rsb	r3, r3, #7
 8000fba:	2b04      	cmp	r3, #4
 8000fbc:	bf28      	it	cs
 8000fbe:	2304      	movcs	r3, #4
 8000fc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	3304      	adds	r3, #4
 8000fc6:	2b06      	cmp	r3, #6
 8000fc8:	d902      	bls.n	8000fd0 <NVIC_EncodePriority+0x30>
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3b03      	subs	r3, #3
 8000fce:	e000      	b.n	8000fd2 <NVIC_EncodePriority+0x32>
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43da      	mvns	r2, r3
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	401a      	ands	r2, r3
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff2:	43d9      	mvns	r1, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff8:	4313      	orrs	r3, r2
         );
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3724      	adds	r7, #36	@ 0x24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b082      	sub	sp, #8
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f7ff ff6a 	bl	8000ee8 <__NVIC_SetPriorityGrouping>
}
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
 8001028:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800102a:	f7ff ff81 	bl	8000f30 <__NVIC_GetPriorityGrouping>
 800102e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	68b9      	ldr	r1, [r7, #8]
 8001034:	6978      	ldr	r0, [r7, #20]
 8001036:	f7ff ffb3 	bl	8000fa0 <NVIC_EncodePriority>
 800103a:	4602      	mov	r2, r0
 800103c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001040:	4611      	mov	r1, r2
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff ff82 	bl	8000f4c <__NVIC_SetPriority>
}
 8001048:	bf00      	nop
 800104a:	3718      	adds	r7, #24
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3b01      	subs	r3, #1
 800105c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001060:	d301      	bcc.n	8001066 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001062:	2301      	movs	r3, #1
 8001064:	e00d      	b.n	8001082 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001066:	4a0a      	ldr	r2, [pc, #40]	@ (8001090 <HAL_SYSTICK_Config+0x40>)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3b01      	subs	r3, #1
 800106c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800106e:	4b08      	ldr	r3, [pc, #32]	@ (8001090 <HAL_SYSTICK_Config+0x40>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001074:	4b06      	ldr	r3, [pc, #24]	@ (8001090 <HAL_SYSTICK_Config+0x40>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a05      	ldr	r2, [pc, #20]	@ (8001090 <HAL_SYSTICK_Config+0x40>)
 800107a:	f043 0303 	orr.w	r3, r3, #3
 800107e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	e000e010 	.word	0xe000e010

08001094 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b04      	cmp	r3, #4
 80010a0:	d844      	bhi.n	800112c <HAL_SYSTICK_CLKSourceConfig+0x98>
 80010a2:	a201      	add	r2, pc, #4	@ (adr r2, 80010a8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80010a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a8:	080010cb 	.word	0x080010cb
 80010ac:	080010e9 	.word	0x080010e9
 80010b0:	0800110b 	.word	0x0800110b
 80010b4:	0800112d 	.word	0x0800112d
 80010b8:	080010bd 	.word	0x080010bd
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80010bc:	4b1f      	ldr	r3, [pc, #124]	@ (800113c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a1e      	ldr	r2, [pc, #120]	@ (800113c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80010c2:	f043 0304 	orr.w	r3, r3, #4
 80010c6:	6013      	str	r3, [r2, #0]
      break;
 80010c8:	e031      	b.n	800112e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80010ca:	4b1c      	ldr	r3, [pc, #112]	@ (800113c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a1b      	ldr	r2, [pc, #108]	@ (800113c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80010d0:	f023 0304 	bic.w	r3, r3, #4
 80010d4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 80010d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001140 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80010d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80010dc:	4a18      	ldr	r2, [pc, #96]	@ (8001140 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80010de:	f023 030c 	bic.w	r3, r3, #12
 80010e2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80010e6:	e022      	b.n	800112e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80010e8:	4b14      	ldr	r3, [pc, #80]	@ (800113c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a13      	ldr	r2, [pc, #76]	@ (800113c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80010ee:	f023 0304 	bic.w	r3, r3, #4
 80010f2:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 80010f4:	4b12      	ldr	r3, [pc, #72]	@ (8001140 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80010f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80010fa:	f023 030c 	bic.w	r3, r3, #12
 80010fe:	4a10      	ldr	r2, [pc, #64]	@ (8001140 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001100:	f043 0304 	orr.w	r3, r3, #4
 8001104:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001108:	e011      	b.n	800112e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800110a:	4b0c      	ldr	r3, [pc, #48]	@ (800113c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a0b      	ldr	r2, [pc, #44]	@ (800113c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001110:	f023 0304 	bic.w	r3, r3, #4
 8001114:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8001116:	4b0a      	ldr	r3, [pc, #40]	@ (8001140 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001118:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800111c:	f023 030c 	bic.w	r3, r3, #12
 8001120:	4a07      	ldr	r2, [pc, #28]	@ (8001140 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001122:	f043 0308 	orr.w	r3, r3, #8
 8001126:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800112a:	e000      	b.n	800112e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 800112c:	bf00      	nop
  }
}
 800112e:	bf00      	nop
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	e000e010 	.word	0xe000e010
 8001140:	44020c00 	.word	0x44020c00

08001144 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800114a:	4b17      	ldr	r3, [pc, #92]	@ (80011a8 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0304 	and.w	r3, r3, #4
 8001152:	2b00      	cmp	r3, #0
 8001154:	d002      	beq.n	800115c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001156:	2304      	movs	r3, #4
 8001158:	607b      	str	r3, [r7, #4]
 800115a:	e01e      	b.n	800119a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 800115c:	4b13      	ldr	r3, [pc, #76]	@ (80011ac <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 800115e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001162:	f003 030c 	and.w	r3, r3, #12
 8001166:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	2b08      	cmp	r3, #8
 800116c:	d00f      	beq.n	800118e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	2b08      	cmp	r3, #8
 8001172:	d80f      	bhi.n	8001194 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d003      	beq.n	8001182 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	2b04      	cmp	r3, #4
 800117e:	d003      	beq.n	8001188 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001180:	e008      	b.n	8001194 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001182:	2300      	movs	r3, #0
 8001184:	607b      	str	r3, [r7, #4]
        break;
 8001186:	e008      	b.n	800119a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8001188:	2301      	movs	r3, #1
 800118a:	607b      	str	r3, [r7, #4]
        break;
 800118c:	e005      	b.n	800119a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 800118e:	2302      	movs	r3, #2
 8001190:	607b      	str	r3, [r7, #4]
        break;
 8001192:	e002      	b.n	800119a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001194:	2300      	movs	r3, #0
 8001196:	607b      	str	r3, [r7, #4]
        break;
 8001198:	bf00      	nop
    }
  }
  return systick_source;
 800119a:	687b      	ldr	r3, [r7, #4]
}
 800119c:	4618      	mov	r0, r3
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000e010 	.word	0xe000e010
 80011ac:	44020c00 	.word	0x44020c00

080011b0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b087      	sub	sp, #28
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80011ba:	2300      	movs	r3, #0
 80011bc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80011be:	e142      	b.n	8001446 <HAL_GPIO_Init+0x296>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	2101      	movs	r1, #1
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	fa01 f303 	lsl.w	r3, r1, r3
 80011cc:	4013      	ands	r3, r2
 80011ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	f000 8134 	beq.w	8001440 <HAL_GPIO_Init+0x290>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d003      	beq.n	80011e8 <HAL_GPIO_Init+0x38>
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	2b12      	cmp	r3, #18
 80011e6:	d125      	bne.n	8001234 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	08da      	lsrs	r2, r3, #3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3208      	adds	r2, #8
 80011f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011f4:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	f003 0307 	and.w	r3, r3, #7
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	220f      	movs	r2, #15
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	697a      	ldr	r2, [r7, #20]
 8001208:	4013      	ands	r3, r2
 800120a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	691b      	ldr	r3, [r3, #16]
 8001210:	f003 020f 	and.w	r2, r3, #15
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	f003 0307 	and.w	r3, r3, #7
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	697a      	ldr	r2, [r7, #20]
 8001222:	4313      	orrs	r3, r2
 8001224:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	08da      	lsrs	r2, r3, #3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	3208      	adds	r2, #8
 800122e:	6979      	ldr	r1, [r7, #20]
 8001230:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	2203      	movs	r2, #3
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	43db      	mvns	r3, r3
 8001246:	697a      	ldr	r2, [r7, #20]
 8001248:	4013      	ands	r3, r2
 800124a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f003 0203 	and.w	r2, r3, #3
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	697a      	ldr	r2, [r7, #20]
 800125e:	4313      	orrs	r3, r2
 8001260:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	697a      	ldr	r2, [r7, #20]
 8001266:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d00b      	beq.n	8001288 <HAL_GPIO_Init+0xd8>
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	2b02      	cmp	r3, #2
 8001276:	d007      	beq.n	8001288 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800127c:	2b11      	cmp	r3, #17
 800127e:	d003      	beq.n	8001288 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	2b12      	cmp	r3, #18
 8001286:	d130      	bne.n	80012ea <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	2203      	movs	r2, #3
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	697a      	ldr	r2, [r7, #20]
 800129c:	4013      	ands	r3, r2
 800129e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	68da      	ldr	r2, [r3, #12]
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	697a      	ldr	r2, [r7, #20]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	697a      	ldr	r2, [r7, #20]
 80012b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012be:	2201      	movs	r2, #1
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43db      	mvns	r3, r3
 80012c8:	697a      	ldr	r2, [r7, #20]
 80012ca:	4013      	ands	r3, r2
 80012cc:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	091b      	lsrs	r3, r3, #4
 80012d4:	f003 0201 	and.w	r2, r3, #1
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	697a      	ldr	r2, [r7, #20]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	697a      	ldr	r2, [r7, #20]
 80012e8:	605a      	str	r2, [r3, #4]
      }

      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f003 0303 	and.w	r3, r3, #3
 80012f2:	2b03      	cmp	r3, #3
 80012f4:	d109      	bne.n	800130a <HAL_GPIO_Init+0x15a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f003 0303 	and.w	r3, r3, #3
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 80012fe:	2b03      	cmp	r3, #3
 8001300:	d11b      	bne.n	800133a <HAL_GPIO_Init+0x18a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d017      	beq.n	800133a <HAL_GPIO_Init+0x18a>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	2203      	movs	r2, #3
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43db      	mvns	r3, r3
 800131c:	697a      	ldr	r2, [r7, #20]
 800131e:	4013      	ands	r3, r2
 8001320:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	689a      	ldr	r2, [r3, #8]
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	697a      	ldr	r2, [r7, #20]
 8001330:	4313      	orrs	r3, r2
 8001332:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	697a      	ldr	r2, [r7, #20]
 8001338:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d07c      	beq.n	8001440 <HAL_GPIO_Init+0x290>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001346:	4a47      	ldr	r2, [pc, #284]	@ (8001464 <HAL_GPIO_Init+0x2b4>)
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	089b      	lsrs	r3, r3, #2
 800134c:	3318      	adds	r3, #24
 800134e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001352:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	f003 0303 	and.w	r3, r3, #3
 800135a:	00db      	lsls	r3, r3, #3
 800135c:	220f      	movs	r2, #15
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	43db      	mvns	r3, r3
 8001364:	697a      	ldr	r2, [r7, #20]
 8001366:	4013      	ands	r3, r2
 8001368:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	0a9a      	lsrs	r2, r3, #10
 800136e:	4b3e      	ldr	r3, [pc, #248]	@ (8001468 <HAL_GPIO_Init+0x2b8>)
 8001370:	4013      	ands	r3, r2
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	f002 0203 	and.w	r2, r2, #3
 8001378:	00d2      	lsls	r2, r2, #3
 800137a:	4093      	lsls	r3, r2
 800137c:	697a      	ldr	r2, [r7, #20]
 800137e:	4313      	orrs	r3, r2
 8001380:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001382:	4938      	ldr	r1, [pc, #224]	@ (8001464 <HAL_GPIO_Init+0x2b4>)
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	089b      	lsrs	r3, r3, #2
 8001388:	3318      	adds	r3, #24
 800138a:	697a      	ldr	r2, [r7, #20]
 800138c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001390:	4b34      	ldr	r3, [pc, #208]	@ (8001464 <HAL_GPIO_Init+0x2b4>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	43db      	mvns	r3, r3
 800139a:	697a      	ldr	r2, [r7, #20]
 800139c:	4013      	ands	r3, r2
 800139e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d003      	beq.n	80013b4 <HAL_GPIO_Init+0x204>
        {
          tmp |= iocurrent;
 80013ac:	697a      	ldr	r2, [r7, #20]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80013b4:	4a2b      	ldr	r2, [pc, #172]	@ (8001464 <HAL_GPIO_Init+0x2b4>)
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80013ba:	4b2a      	ldr	r3, [pc, #168]	@ (8001464 <HAL_GPIO_Init+0x2b4>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	43db      	mvns	r3, r3
 80013c4:	697a      	ldr	r2, [r7, #20]
 80013c6:	4013      	ands	r3, r2
 80013c8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <HAL_GPIO_Init+0x22e>
        {
          tmp |= iocurrent;
 80013d6:	697a      	ldr	r2, [r7, #20]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	4313      	orrs	r3, r2
 80013dc:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80013de:	4a21      	ldr	r2, [pc, #132]	@ (8001464 <HAL_GPIO_Init+0x2b4>)
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80013e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001464 <HAL_GPIO_Init+0x2b4>)
 80013e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80013ea:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	43db      	mvns	r3, r3
 80013f0:	697a      	ldr	r2, [r7, #20]
 80013f2:	4013      	ands	r3, r2
 80013f4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d003      	beq.n	800140a <HAL_GPIO_Init+0x25a>
        {
          tmp |= iocurrent;
 8001402:	697a      	ldr	r2, [r7, #20]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	4313      	orrs	r3, r2
 8001408:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800140a:	4a16      	ldr	r2, [pc, #88]	@ (8001464 <HAL_GPIO_Init+0x2b4>)
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8001412:	4b14      	ldr	r3, [pc, #80]	@ (8001464 <HAL_GPIO_Init+0x2b4>)
 8001414:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001418:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	43db      	mvns	r3, r3
 800141e:	697a      	ldr	r2, [r7, #20]
 8001420:	4013      	ands	r3, r2
 8001422:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d003      	beq.n	8001438 <HAL_GPIO_Init+0x288>
        {
          tmp |= iocurrent;
 8001430:	697a      	ldr	r2, [r7, #20]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	4313      	orrs	r3, r2
 8001436:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001438:	4a0a      	ldr	r2, [pc, #40]	@ (8001464 <HAL_GPIO_Init+0x2b4>)
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	3301      	adds	r3, #1
 8001444:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	fa22 f303 	lsr.w	r3, r2, r3
 8001450:	2b00      	cmp	r3, #0
 8001452:	f47f aeb5 	bne.w	80011c0 <HAL_GPIO_Init+0x10>
  }
}
 8001456:	bf00      	nop
 8001458:	bf00      	nop
 800145a:	371c      	adds	r7, #28
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	44022000 	.word	0x44022000
 8001468:	002f7f7f 	.word	0x002f7f7f

0800146c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d101      	bne.n	800147e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e08d      	b.n	800159a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	d106      	bne.n	8001498 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff fa82 	bl	800099c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2224      	movs	r2, #36	@ 0x24
 800149c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f022 0201 	bic.w	r2, r2, #1
 80014ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685a      	ldr	r2, [r3, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80014bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	689a      	ldr	r2, [r3, #8]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80014cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d107      	bne.n	80014e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	689a      	ldr	r2, [r3, #8]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	e006      	b.n	80014f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	689a      	ldr	r2, [r3, #8]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80014f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d108      	bne.n	800150e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	685a      	ldr	r2, [r3, #4]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	e007      	b.n	800151e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	685a      	ldr	r2, [r3, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800151c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	6812      	ldr	r2, [r2, #0]
 8001528:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800152c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001530:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	68da      	ldr	r2, [r3, #12]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001540:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	691a      	ldr	r2, [r3, #16]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	430a      	orrs	r2, r1
 800155a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	69d9      	ldr	r1, [r3, #28]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a1a      	ldr	r2, [r3, #32]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	430a      	orrs	r2, r1
 800156a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f042 0201 	orr.w	r2, r2, #1
 800157a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2220      	movs	r2, #32
 8001586:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b08a      	sub	sp, #40	@ 0x28
 80015a6:	af02      	add	r7, sp, #8
 80015a8:	60f8      	str	r0, [r7, #12]
 80015aa:	607a      	str	r2, [r7, #4]
 80015ac:	603b      	str	r3, [r7, #0]
 80015ae:	460b      	mov	r3, r1
 80015b0:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]

  HAL_StatusTypeDef status = HAL_OK;
 80015b6:	2300      	movs	r3, #0
 80015b8:	77fb      	strb	r3, [r7, #31]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b20      	cmp	r3, #32
 80015c4:	f040 80ed 	bne.w	80017a2 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80015d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80015d6:	d101      	bne.n	80015dc <HAL_I2C_IsDeviceReady+0x3a>
    {
      return HAL_BUSY;
 80015d8:	2302      	movs	r3, #2
 80015da:	e0e3      	b.n	80017a4 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d101      	bne.n	80015ea <HAL_I2C_IsDeviceReady+0x48>
 80015e6:	2302      	movs	r3, #2
 80015e8:	e0dc      	b.n	80017a4 <HAL_I2C_IsDeviceReady+0x202>
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2201      	movs	r2, #1
 80015ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2224      	movs	r2, #36	@ 0x24
 80015f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2200      	movs	r2, #0
 80015fe:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d107      	bne.n	8001618 <HAL_I2C_IsDeviceReady+0x76>
 8001608:	897b      	ldrh	r3, [r7, #10]
 800160a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800160e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001612:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001616:	e006      	b.n	8001626 <HAL_I2C_IsDeviceReady+0x84>
 8001618:	897b      	ldrh	r3, [r7, #10]
 800161a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800161e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001622:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8001626:	68fa      	ldr	r2, [r7, #12]
 8001628:	6812      	ldr	r2, [r2, #0]
 800162a:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800162c:	f7ff fc50 	bl	8000ed0 <HAL_GetTick>
 8001630:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	f003 0320 	and.w	r3, r3, #32
 800163c:	2b20      	cmp	r3, #32
 800163e:	bf0c      	ite	eq
 8001640:	2301      	moveq	r3, #1
 8001642:	2300      	movne	r3, #0
 8001644:	b2db      	uxtb	r3, r3
 8001646:	77bb      	strb	r3, [r7, #30]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	699b      	ldr	r3, [r3, #24]
 800164e:	f003 0310 	and.w	r3, r3, #16
 8001652:	2b10      	cmp	r3, #16
 8001654:	bf0c      	ite	eq
 8001656:	2301      	moveq	r3, #1
 8001658:	2300      	movne	r3, #0
 800165a:	b2db      	uxtb	r3, r3
 800165c:	777b      	strb	r3, [r7, #29]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800165e:	e034      	b.n	80016ca <HAL_I2C_IsDeviceReady+0x128>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001666:	d01a      	beq.n	800169e <HAL_I2C_IsDeviceReady+0xfc>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001668:	f7ff fc32 	bl	8000ed0 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	429a      	cmp	r2, r3
 8001676:	d302      	bcc.n	800167e <HAL_I2C_IsDeviceReady+0xdc>
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d10f      	bne.n	800169e <HAL_I2C_IsDeviceReady+0xfc>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2220      	movs	r2, #32
 8001682:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800168a:	f043 0220 	orr.w	r2, r3, #32
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e082      	b.n	80017a4 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	f003 0320 	and.w	r3, r3, #32
 80016a8:	2b20      	cmp	r3, #32
 80016aa:	bf0c      	ite	eq
 80016ac:	2301      	moveq	r3, #1
 80016ae:	2300      	movne	r3, #0
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	77bb      	strb	r3, [r7, #30]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	f003 0310 	and.w	r3, r3, #16
 80016be:	2b10      	cmp	r3, #16
 80016c0:	bf0c      	ite	eq
 80016c2:	2301      	moveq	r3, #1
 80016c4:	2300      	movne	r3, #0
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	777b      	strb	r3, [r7, #29]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80016ca:	7fbb      	ldrb	r3, [r7, #30]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d102      	bne.n	80016d6 <HAL_I2C_IsDeviceReady+0x134>
 80016d0:	7f7b      	ldrb	r3, [r7, #29]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d0c4      	beq.n	8001660 <HAL_I2C_IsDeviceReady+0xbe>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	f003 0310 	and.w	r3, r3, #16
 80016e0:	2b10      	cmp	r3, #16
 80016e2:	d027      	beq.n	8001734 <HAL_I2C_IsDeviceReady+0x192>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	2200      	movs	r2, #0
 80016ec:	2120      	movs	r1, #32
 80016ee:	68f8      	ldr	r0, [r7, #12]
 80016f0:	f000 f880 	bl	80017f4 <I2C_WaitOnFlagUntilTimeout>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d00e      	beq.n	8001718 <HAL_I2C_IsDeviceReady+0x176>
        {
          /* A non acknowledge appear during STOP Flag waiting process, a new trial must be performed */
          if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016fe:	2b04      	cmp	r3, #4
 8001700:	d107      	bne.n	8001712 <HAL_I2C_IsDeviceReady+0x170>
          {
            /* Clear STOP Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2220      	movs	r2, #32
 8001708:	61da      	str	r2, [r3, #28]

            /* Reset the error code for next trial */
            hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2200      	movs	r2, #0
 800170e:	645a      	str	r2, [r3, #68]	@ 0x44
 8001710:	e026      	b.n	8001760 <HAL_I2C_IsDeviceReady+0x1be>
          }
          else
          {
            status = HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	77fb      	strb	r3, [r7, #31]
 8001716:	e023      	b.n	8001760 <HAL_I2C_IsDeviceReady+0x1be>
        else
        {
          /* A acknowledge appear during STOP Flag waiting process, this mean that device respond to its address */

          /* Clear STOP Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2220      	movs	r2, #32
 800171e:	61da      	str	r2, [r3, #28]

          /* Device is ready */
          hi2c->State = HAL_I2C_STATE_READY;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2220      	movs	r2, #32
 8001724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_OK;
 8001730:	2300      	movs	r3, #0
 8001732:	e037      	b.n	80017a4 <HAL_I2C_IsDeviceReady+0x202>
      {
        /* A non acknowledge is detected, this mean that device not respond to its address,
           a new trial must be performed */

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2210      	movs	r2, #16
 800173a:	61da      	str	r2, [r3, #28]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	2200      	movs	r2, #0
 8001744:	2120      	movs	r1, #32
 8001746:	68f8      	ldr	r0, [r7, #12]
 8001748:	f000 f854 	bl	80017f4 <I2C_WaitOnFlagUntilTimeout>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d002      	beq.n	8001758 <HAL_I2C_IsDeviceReady+0x1b6>
        {
          status = HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	77fb      	strb	r3, [r7, #31]
 8001756:	e003      	b.n	8001760 <HAL_I2C_IsDeviceReady+0x1be>
        }
        else
        {
          /* Clear STOP Flag, auto generated with autoend*/
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2220      	movs	r2, #32
 800175e:	61da      	str	r2, [r3, #28]
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	3301      	adds	r3, #1
 8001764:	617b      	str	r3, [r7, #20]

      if ((I2C_Trials < Trials) && (status == HAL_ERROR))
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	429a      	cmp	r2, r3
 800176c:	d904      	bls.n	8001778 <HAL_I2C_IsDeviceReady+0x1d6>
 800176e:	7ffb      	ldrb	r3, [r7, #31]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d101      	bne.n	8001778 <HAL_I2C_IsDeviceReady+0x1d6>
      {
        status = HAL_OK;
 8001774:	2300      	movs	r3, #0
 8001776:	77fb      	strb	r3, [r7, #31]
      }

    } while (I2C_Trials < Trials);
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	429a      	cmp	r2, r3
 800177e:	f63f af3f 	bhi.w	8001600 <HAL_I2C_IsDeviceReady+0x5e>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2220      	movs	r2, #32
 8001786:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800178e:	f043 0220 	orr.w	r2, r3, #32
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2200      	movs	r2, #0
 800179a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e000      	b.n	80017a4 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 80017a2:	2302      	movs	r3, #2
  }
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3720      	adds	r7, #32
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d103      	bne.n	80017ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2200      	movs	r2, #0
 80017c8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	f003 0301 	and.w	r3, r3, #1
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d007      	beq.n	80017e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	699a      	ldr	r2, [r3, #24]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f042 0201 	orr.w	r2, r2, #1
 80017e6:	619a      	str	r2, [r3, #24]
  }
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	603b      	str	r3, [r7, #0]
 8001800:	4613      	mov	r3, r2
 8001802:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001804:	e03b      	b.n	800187e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	6839      	ldr	r1, [r7, #0]
 800180a:	68f8      	ldr	r0, [r7, #12]
 800180c:	f000 f84c 	bl	80018a8 <I2C_IsErrorOccurred>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e041      	b.n	800189e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001820:	d02d      	beq.n	800187e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001822:	f7ff fb55 	bl	8000ed0 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	429a      	cmp	r2, r3
 8001830:	d302      	bcc.n	8001838 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d122      	bne.n	800187e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	699a      	ldr	r2, [r3, #24]
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	4013      	ands	r3, r2
 8001842:	68ba      	ldr	r2, [r7, #8]
 8001844:	429a      	cmp	r2, r3
 8001846:	bf0c      	ite	eq
 8001848:	2301      	moveq	r3, #1
 800184a:	2300      	movne	r3, #0
 800184c:	b2db      	uxtb	r3, r3
 800184e:	461a      	mov	r2, r3
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	429a      	cmp	r2, r3
 8001854:	d113      	bne.n	800187e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800185a:	f043 0220 	orr.w	r2, r3, #32
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2220      	movs	r2, #32
 8001866:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e00f      	b.n	800189e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	699a      	ldr	r2, [r3, #24]
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	4013      	ands	r3, r2
 8001888:	68ba      	ldr	r2, [r7, #8]
 800188a:	429a      	cmp	r2, r3
 800188c:	bf0c      	ite	eq
 800188e:	2301      	moveq	r3, #1
 8001890:	2300      	movne	r3, #0
 8001892:	b2db      	uxtb	r3, r3
 8001894:	461a      	mov	r2, r3
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	429a      	cmp	r2, r3
 800189a:	d0b4      	beq.n	8001806 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
	...

080018a8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08a      	sub	sp, #40	@ 0x28
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018b4:	2300      	movs	r3, #0
 80018b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	f003 0310 	and.w	r3, r3, #16
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d068      	beq.n	80019a6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2210      	movs	r2, #16
 80018da:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80018dc:	e049      	b.n	8001972 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e4:	d045      	beq.n	8001972 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80018e6:	f7ff faf3 	bl	8000ed0 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	68ba      	ldr	r2, [r7, #8]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d302      	bcc.n	80018fc <I2C_IsErrorOccurred+0x54>
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d13a      	bne.n	8001972 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001906:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800190e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	699b      	ldr	r3, [r3, #24]
 8001916:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800191a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800191e:	d121      	bne.n	8001964 <I2C_IsErrorOccurred+0xbc>
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001926:	d01d      	beq.n	8001964 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001928:	7cfb      	ldrb	r3, [r7, #19]
 800192a:	2b20      	cmp	r3, #32
 800192c:	d01a      	beq.n	8001964 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800193c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800193e:	f7ff fac7 	bl	8000ed0 <HAL_GetTick>
 8001942:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001944:	e00e      	b.n	8001964 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001946:	f7ff fac3 	bl	8000ed0 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b19      	cmp	r3, #25
 8001952:	d907      	bls.n	8001964 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001954:	6a3b      	ldr	r3, [r7, #32]
 8001956:	f043 0320 	orr.w	r3, r3, #32
 800195a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001962:	e006      	b.n	8001972 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	699b      	ldr	r3, [r3, #24]
 800196a:	f003 0320 	and.w	r3, r3, #32
 800196e:	2b20      	cmp	r3, #32
 8001970:	d1e9      	bne.n	8001946 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	f003 0320 	and.w	r3, r3, #32
 800197c:	2b20      	cmp	r3, #32
 800197e:	d003      	beq.n	8001988 <I2C_IsErrorOccurred+0xe0>
 8001980:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001984:	2b00      	cmp	r3, #0
 8001986:	d0aa      	beq.n	80018de <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001988:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800198c:	2b00      	cmp	r3, #0
 800198e:	d103      	bne.n	8001998 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2220      	movs	r2, #32
 8001996:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001998:	6a3b      	ldr	r3, [r7, #32]
 800199a:	f043 0304 	orr.w	r3, r3, #4
 800199e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d00b      	beq.n	80019d0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80019b8:	6a3b      	ldr	r3, [r7, #32]
 80019ba:	f043 0301 	orr.w	r3, r3, #1
 80019be:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d00b      	beq.n	80019f2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80019da:	6a3b      	ldr	r3, [r7, #32]
 80019dc:	f043 0308 	orr.w	r3, r3, #8
 80019e0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019ea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d00b      	beq.n	8001a14 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80019fc:	6a3b      	ldr	r3, [r7, #32]
 80019fe:	f043 0302 	orr.w	r3, r3, #2
 8001a02:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a0c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001a14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d01c      	beq.n	8001a56 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001a1c:	68f8      	ldr	r0, [r7, #12]
 8001a1e:	f7ff fec5 	bl	80017ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6859      	ldr	r1, [r3, #4]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	4b0d      	ldr	r3, [pc, #52]	@ (8001a64 <I2C_IsErrorOccurred+0x1bc>)
 8001a2e:	400b      	ands	r3, r1
 8001a30:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001a36:	6a3b      	ldr	r3, [r7, #32]
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2220      	movs	r2, #32
 8001a42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001a56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3728      	adds	r7, #40	@ 0x28
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	fe00e800 	.word	0xfe00e800

08001a68 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b20      	cmp	r3, #32
 8001a7c:	d138      	bne.n	8001af0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d101      	bne.n	8001a8c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001a88:	2302      	movs	r3, #2
 8001a8a:	e032      	b.n	8001af2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2224      	movs	r2, #36	@ 0x24
 8001a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f022 0201 	bic.w	r2, r2, #1
 8001aaa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001aba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6819      	ldr	r1, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	683a      	ldr	r2, [r7, #0]
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f042 0201 	orr.w	r2, r2, #1
 8001ada:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2220      	movs	r2, #32
 8001ae0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001aec:	2300      	movs	r3, #0
 8001aee:	e000      	b.n	8001af2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001af0:	2302      	movs	r3, #2
  }
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b085      	sub	sp, #20
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
 8001b06:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2b20      	cmp	r3, #32
 8001b12:	d139      	bne.n	8001b88 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d101      	bne.n	8001b22 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001b1e:	2302      	movs	r3, #2
 8001b20:	e033      	b.n	8001b8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2201      	movs	r2, #1
 8001b26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2224      	movs	r2, #36	@ 0x24
 8001b2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 0201 	bic.w	r2, r2, #1
 8001b40:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001b50:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	021b      	lsls	r3, r3, #8
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f042 0201 	orr.w	r2, r2, #1
 8001b72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2220      	movs	r2, #32
 8001b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001b84:	2300      	movs	r3, #0
 8001b86:	e000      	b.n	8001b8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001b88:	2302      	movs	r3, #2
  }
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3714      	adds	r7, #20
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
	...

08001b98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d102      	bne.n	8001bac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	f000 bc28 	b.w	80023fc <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bac:	4b94      	ldr	r3, [pc, #592]	@ (8001e00 <HAL_RCC_OscConfig+0x268>)
 8001bae:	69db      	ldr	r3, [r3, #28]
 8001bb0:	f003 0318 	and.w	r3, r3, #24
 8001bb4:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8001bb6:	4b92      	ldr	r3, [pc, #584]	@ (8001e00 <HAL_RCC_OscConfig+0x268>)
 8001bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bba:	f003 0303 	and.w	r3, r3, #3
 8001bbe:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0310 	and.w	r3, r3, #16
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d05b      	beq.n	8001c84 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	2b08      	cmp	r3, #8
 8001bd0:	d005      	beq.n	8001bde <HAL_RCC_OscConfig+0x46>
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	2b18      	cmp	r3, #24
 8001bd6:	d114      	bne.n	8001c02 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d111      	bne.n	8001c02 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d102      	bne.n	8001bec <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	f000 bc08 	b.w	80023fc <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001bec:	4b84      	ldr	r3, [pc, #528]	@ (8001e00 <HAL_RCC_OscConfig+0x268>)
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	041b      	lsls	r3, r3, #16
 8001bfa:	4981      	ldr	r1, [pc, #516]	@ (8001e00 <HAL_RCC_OscConfig+0x268>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001c00:	e040      	b.n	8001c84 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d023      	beq.n	8001c52 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001c0a:	4b7d      	ldr	r3, [pc, #500]	@ (8001e00 <HAL_RCC_OscConfig+0x268>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a7c      	ldr	r2, [pc, #496]	@ (8001e00 <HAL_RCC_OscConfig+0x268>)
 8001c10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c16:	f7ff f95b 	bl	8000ed0 <HAL_GetTick>
 8001c1a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001c1c:	e008      	b.n	8001c30 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001c1e:	f7ff f957 	bl	8000ed0 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e3e5      	b.n	80023fc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001c30:	4b73      	ldr	r3, [pc, #460]	@ (8001e00 <HAL_RCC_OscConfig+0x268>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d0f0      	beq.n	8001c1e <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001c3c:	4b70      	ldr	r3, [pc, #448]	@ (8001e00 <HAL_RCC_OscConfig+0x268>)
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a1b      	ldr	r3, [r3, #32]
 8001c48:	041b      	lsls	r3, r3, #16
 8001c4a:	496d      	ldr	r1, [pc, #436]	@ (8001e00 <HAL_RCC_OscConfig+0x268>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	618b      	str	r3, [r1, #24]
 8001c50:	e018      	b.n	8001c84 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001c52:	4b6b      	ldr	r3, [pc, #428]	@ (8001e00 <HAL_RCC_OscConfig+0x268>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a6a      	ldr	r2, [pc, #424]	@ (8001e00 <HAL_RCC_OscConfig+0x268>)
 8001c58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5e:	f7ff f937 	bl	8000ed0 <HAL_GetTick>
 8001c62:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001c64:	e008      	b.n	8001c78 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001c66:	f7ff f933 	bl	8000ed0 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e3c1      	b.n	80023fc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001c78:	4b61      	ldr	r3, [pc, #388]	@ (8001e00 <HAL_RCC_OscConfig+0x268>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1f0      	bne.n	8001c66 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f000 80a0 	beq.w	8001dd2 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	2b10      	cmp	r3, #16
 8001c96:	d005      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x10c>
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	2b18      	cmp	r3, #24
 8001c9c:	d109      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	2b03      	cmp	r3, #3
 8001ca2:	d106      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f040 8092 	bne.w	8001dd2 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e3a4      	b.n	80023fc <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cba:	d106      	bne.n	8001cca <HAL_RCC_OscConfig+0x132>
 8001cbc:	4b50      	ldr	r3, [pc, #320]	@ (8001e00 <HAL_RCC_OscConfig+0x268>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a4f      	ldr	r2, [pc, #316]	@ (8001e00 <HAL_RCC_OscConfig+0x268>)
 8001cc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cc6:	6013      	str	r3, [r2, #0]
 8001cc8:	e058      	b.n	8001d7c <HAL_RCC_OscConfig+0x1e4>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d112      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x160>
 8001cd2:	4b4b      	ldr	r3, [pc, #300]	@ (8001e00 <HAL_RCC_OscConfig+0x268>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a4a      	ldr	r2, [pc, #296]	@ (8001e00 <HAL_RCC_OscConfig+0x268>)
 8001cd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cdc:	6013      	str	r3, [r2, #0]
 8001cde:	4b48      	ldr	r3, [pc, #288]	@ (8001e00 <HAL_RCC_OscConfig+0x268>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a47      	ldr	r2, [pc, #284]	@ (8001e00 <HAL_RCC_OscConfig+0x268>)
 8001ce4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001ce8:	6013      	str	r3, [r2, #0]
 8001cea:	4b45      	ldr	r3, [pc, #276]	@ (8001e00 <HAL_RCC_OscConfig+0x268>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a44      	ldr	r2, [pc, #272]	@ (8001e00 <HAL_RCC_OscConfig+0x268>)
 8001cf0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cf4:	6013      	str	r3, [r2, #0]
 8001cf6:	e041      	b.n	8001d7c <HAL_RCC_OscConfig+0x1e4>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d00:	d112      	bne.n	8001d28 <HAL_RCC_OscConfig+0x190>
 8001d02:	4b3f      	ldr	r3, [pc, #252]	@ (8001e00 <HAL_RCC_OscConfig+0x268>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a3e      	ldr	r2, [pc, #248]	@ (8001e00 <HAL_RCC_OscConfig+0x268>)
 8001d08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d0c:	6013      	str	r3, [r2, #0]
 8001d0e:	4b3c      	ldr	r3, [pc, #240]	@ (8001e00 <HAL_RCC_OscConfig+0x268>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a3b      	ldr	r2, [pc, #236]	@ (8001e00 <HAL_RCC_OscConfig+0x268>)
 8001d14:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001d18:	6013      	str	r3, [r2, #0]
 8001d1a:	4b39      	ldr	r3, [pc, #228]	@ (8001e00 <HAL_RCC_OscConfig+0x268>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a38      	ldr	r2, [pc, #224]	@ (8001e00 <HAL_RCC_OscConfig+0x268>)
 8001d20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d24:	6013      	str	r3, [r2, #0]
 8001d26:	e029      	b.n	8001d7c <HAL_RCC_OscConfig+0x1e4>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8001d30:	d112      	bne.n	8001d58 <HAL_RCC_OscConfig+0x1c0>
 8001d32:	4b33      	ldr	r3, [pc, #204]	@ (8001e00 <HAL_RCC_OscConfig+0x268>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a32      	ldr	r2, [pc, #200]	@ (8001e00 <HAL_RCC_OscConfig+0x268>)
 8001d38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d3c:	6013      	str	r3, [r2, #0]
 8001d3e:	4b30      	ldr	r3, [pc, #192]	@ (8001e00 <HAL_RCC_OscConfig+0x268>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a2f      	ldr	r2, [pc, #188]	@ (8001e00 <HAL_RCC_OscConfig+0x268>)
 8001d44:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001d48:	6013      	str	r3, [r2, #0]
 8001d4a:	4b2d      	ldr	r3, [pc, #180]	@ (8001e00 <HAL_RCC_OscConfig+0x268>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a2c      	ldr	r2, [pc, #176]	@ (8001e00 <HAL_RCC_OscConfig+0x268>)
 8001d50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d54:	6013      	str	r3, [r2, #0]
 8001d56:	e011      	b.n	8001d7c <HAL_RCC_OscConfig+0x1e4>
 8001d58:	4b29      	ldr	r3, [pc, #164]	@ (8001e00 <HAL_RCC_OscConfig+0x268>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a28      	ldr	r2, [pc, #160]	@ (8001e00 <HAL_RCC_OscConfig+0x268>)
 8001d5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d62:	6013      	str	r3, [r2, #0]
 8001d64:	4b26      	ldr	r3, [pc, #152]	@ (8001e00 <HAL_RCC_OscConfig+0x268>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a25      	ldr	r2, [pc, #148]	@ (8001e00 <HAL_RCC_OscConfig+0x268>)
 8001d6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d6e:	6013      	str	r3, [r2, #0]
 8001d70:	4b23      	ldr	r3, [pc, #140]	@ (8001e00 <HAL_RCC_OscConfig+0x268>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a22      	ldr	r2, [pc, #136]	@ (8001e00 <HAL_RCC_OscConfig+0x268>)
 8001d76:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001d7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d013      	beq.n	8001dac <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d84:	f7ff f8a4 	bl	8000ed0 <HAL_GetTick>
 8001d88:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001d8c:	f7ff f8a0 	bl	8000ed0 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b64      	cmp	r3, #100	@ 0x64
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e32e      	b.n	80023fc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d9e:	4b18      	ldr	r3, [pc, #96]	@ (8001e00 <HAL_RCC_OscConfig+0x268>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d0f0      	beq.n	8001d8c <HAL_RCC_OscConfig+0x1f4>
 8001daa:	e012      	b.n	8001dd2 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dac:	f7ff f890 	bl	8000ed0 <HAL_GetTick>
 8001db0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001db4:	f7ff f88c 	bl	8000ed0 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b64      	cmp	r3, #100	@ 0x64
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e31a      	b.n	80023fc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001e00 <HAL_RCC_OscConfig+0x268>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1f0      	bne.n	8001db4 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 809a 	beq.w	8001f14 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d005      	beq.n	8001df2 <HAL_RCC_OscConfig+0x25a>
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	2b18      	cmp	r3, #24
 8001dea:	d149      	bne.n	8001e80 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d146      	bne.n	8001e80 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d104      	bne.n	8001e04 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e2fe      	b.n	80023fc <HAL_RCC_OscConfig+0x864>
 8001dfe:	bf00      	nop
 8001e00:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d11c      	bne.n	8001e44 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8001e0a:	4b9a      	ldr	r3, [pc, #616]	@ (8002074 <HAL_RCC_OscConfig+0x4dc>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0218 	and.w	r2, r3, #24
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d014      	beq.n	8001e44 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001e1a:	4b96      	ldr	r3, [pc, #600]	@ (8002074 <HAL_RCC_OscConfig+0x4dc>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f023 0218 	bic.w	r2, r3, #24
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	4993      	ldr	r1, [pc, #588]	@ (8002074 <HAL_RCC_OscConfig+0x4dc>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8001e2c:	f000 fdd0 	bl	80029d0 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e30:	4b91      	ldr	r3, [pc, #580]	@ (8002078 <HAL_RCC_OscConfig+0x4e0>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7fe ffc1 	bl	8000dbc <HAL_InitTick>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e2db      	b.n	80023fc <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e44:	f7ff f844 	bl	8000ed0 <HAL_GetTick>
 8001e48:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001e4c:	f7ff f840 	bl	8000ed0 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e2ce      	b.n	80023fc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e5e:	4b85      	ldr	r3, [pc, #532]	@ (8002074 <HAL_RCC_OscConfig+0x4dc>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d0f0      	beq.n	8001e4c <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001e6a:	4b82      	ldr	r3, [pc, #520]	@ (8002074 <HAL_RCC_OscConfig+0x4dc>)
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	041b      	lsls	r3, r3, #16
 8001e78:	497e      	ldr	r1, [pc, #504]	@ (8002074 <HAL_RCC_OscConfig+0x4dc>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001e7e:	e049      	b.n	8001f14 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d02c      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001e88:	4b7a      	ldr	r3, [pc, #488]	@ (8002074 <HAL_RCC_OscConfig+0x4dc>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f023 0218 	bic.w	r2, r3, #24
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	4977      	ldr	r1, [pc, #476]	@ (8002074 <HAL_RCC_OscConfig+0x4dc>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8001e9a:	4b76      	ldr	r3, [pc, #472]	@ (8002074 <HAL_RCC_OscConfig+0x4dc>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a75      	ldr	r2, [pc, #468]	@ (8002074 <HAL_RCC_OscConfig+0x4dc>)
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea6:	f7ff f813 	bl	8000ed0 <HAL_GetTick>
 8001eaa:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eac:	e008      	b.n	8001ec0 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001eae:	f7ff f80f 	bl	8000ed0 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e29d      	b.n	80023fc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ec0:	4b6c      	ldr	r3, [pc, #432]	@ (8002074 <HAL_RCC_OscConfig+0x4dc>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d0f0      	beq.n	8001eae <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001ecc:	4b69      	ldr	r3, [pc, #420]	@ (8002074 <HAL_RCC_OscConfig+0x4dc>)
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	695b      	ldr	r3, [r3, #20]
 8001ed8:	041b      	lsls	r3, r3, #16
 8001eda:	4966      	ldr	r1, [pc, #408]	@ (8002074 <HAL_RCC_OscConfig+0x4dc>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	610b      	str	r3, [r1, #16]
 8001ee0:	e018      	b.n	8001f14 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ee2:	4b64      	ldr	r3, [pc, #400]	@ (8002074 <HAL_RCC_OscConfig+0x4dc>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a63      	ldr	r2, [pc, #396]	@ (8002074 <HAL_RCC_OscConfig+0x4dc>)
 8001ee8:	f023 0301 	bic.w	r3, r3, #1
 8001eec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eee:	f7fe ffef 	bl	8000ed0 <HAL_GetTick>
 8001ef2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ef4:	e008      	b.n	8001f08 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001ef6:	f7fe ffeb 	bl	8000ed0 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e279      	b.n	80023fc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f08:	4b5a      	ldr	r3, [pc, #360]	@ (8002074 <HAL_RCC_OscConfig+0x4dc>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d1f0      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0308 	and.w	r3, r3, #8
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d03c      	beq.n	8001f9a <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d01c      	beq.n	8001f62 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f28:	4b52      	ldr	r3, [pc, #328]	@ (8002074 <HAL_RCC_OscConfig+0x4dc>)
 8001f2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f2e:	4a51      	ldr	r2, [pc, #324]	@ (8002074 <HAL_RCC_OscConfig+0x4dc>)
 8001f30:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001f34:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f38:	f7fe ffca 	bl	8000ed0 <HAL_GetTick>
 8001f3c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001f40:	f7fe ffc6 	bl	8000ed0 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e254      	b.n	80023fc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001f52:	4b48      	ldr	r3, [pc, #288]	@ (8002074 <HAL_RCC_OscConfig+0x4dc>)
 8001f54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d0ef      	beq.n	8001f40 <HAL_RCC_OscConfig+0x3a8>
 8001f60:	e01b      	b.n	8001f9a <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f62:	4b44      	ldr	r3, [pc, #272]	@ (8002074 <HAL_RCC_OscConfig+0x4dc>)
 8001f64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f68:	4a42      	ldr	r2, [pc, #264]	@ (8002074 <HAL_RCC_OscConfig+0x4dc>)
 8001f6a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8001f6e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f72:	f7fe ffad 	bl	8000ed0 <HAL_GetTick>
 8001f76:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001f78:	e008      	b.n	8001f8c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001f7a:	f7fe ffa9 	bl	8000ed0 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e237      	b.n	80023fc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001f8c:	4b39      	ldr	r3, [pc, #228]	@ (8002074 <HAL_RCC_OscConfig+0x4dc>)
 8001f8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f92:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1ef      	bne.n	8001f7a <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0304 	and.w	r3, r3, #4
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f000 80d2 	beq.w	800214c <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001fa8:	4b34      	ldr	r3, [pc, #208]	@ (800207c <HAL_RCC_OscConfig+0x4e4>)
 8001faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d118      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8001fb4:	4b31      	ldr	r3, [pc, #196]	@ (800207c <HAL_RCC_OscConfig+0x4e4>)
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb8:	4a30      	ldr	r2, [pc, #192]	@ (800207c <HAL_RCC_OscConfig+0x4e4>)
 8001fba:	f043 0301 	orr.w	r3, r3, #1
 8001fbe:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fc0:	f7fe ff86 	bl	8000ed0 <HAL_GetTick>
 8001fc4:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fc8:	f7fe ff82 	bl	8000ed0 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e210      	b.n	80023fc <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001fda:	4b28      	ldr	r3, [pc, #160]	@ (800207c <HAL_RCC_OscConfig+0x4e4>)
 8001fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d0f0      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d108      	bne.n	8002000 <HAL_RCC_OscConfig+0x468>
 8001fee:	4b21      	ldr	r3, [pc, #132]	@ (8002074 <HAL_RCC_OscConfig+0x4dc>)
 8001ff0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ff4:	4a1f      	ldr	r2, [pc, #124]	@ (8002074 <HAL_RCC_OscConfig+0x4dc>)
 8001ff6:	f043 0301 	orr.w	r3, r3, #1
 8001ffa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001ffe:	e074      	b.n	80020ea <HAL_RCC_OscConfig+0x552>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d118      	bne.n	800203a <HAL_RCC_OscConfig+0x4a2>
 8002008:	4b1a      	ldr	r3, [pc, #104]	@ (8002074 <HAL_RCC_OscConfig+0x4dc>)
 800200a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800200e:	4a19      	ldr	r2, [pc, #100]	@ (8002074 <HAL_RCC_OscConfig+0x4dc>)
 8002010:	f023 0301 	bic.w	r3, r3, #1
 8002014:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002018:	4b16      	ldr	r3, [pc, #88]	@ (8002074 <HAL_RCC_OscConfig+0x4dc>)
 800201a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800201e:	4a15      	ldr	r2, [pc, #84]	@ (8002074 <HAL_RCC_OscConfig+0x4dc>)
 8002020:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002024:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002028:	4b12      	ldr	r3, [pc, #72]	@ (8002074 <HAL_RCC_OscConfig+0x4dc>)
 800202a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800202e:	4a11      	ldr	r2, [pc, #68]	@ (8002074 <HAL_RCC_OscConfig+0x4dc>)
 8002030:	f023 0304 	bic.w	r3, r3, #4
 8002034:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002038:	e057      	b.n	80020ea <HAL_RCC_OscConfig+0x552>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	2b05      	cmp	r3, #5
 8002040:	d11e      	bne.n	8002080 <HAL_RCC_OscConfig+0x4e8>
 8002042:	4b0c      	ldr	r3, [pc, #48]	@ (8002074 <HAL_RCC_OscConfig+0x4dc>)
 8002044:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002048:	4a0a      	ldr	r2, [pc, #40]	@ (8002074 <HAL_RCC_OscConfig+0x4dc>)
 800204a:	f043 0304 	orr.w	r3, r3, #4
 800204e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002052:	4b08      	ldr	r3, [pc, #32]	@ (8002074 <HAL_RCC_OscConfig+0x4dc>)
 8002054:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002058:	4a06      	ldr	r2, [pc, #24]	@ (8002074 <HAL_RCC_OscConfig+0x4dc>)
 800205a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800205e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002062:	4b04      	ldr	r3, [pc, #16]	@ (8002074 <HAL_RCC_OscConfig+0x4dc>)
 8002064:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002068:	4a02      	ldr	r2, [pc, #8]	@ (8002074 <HAL_RCC_OscConfig+0x4dc>)
 800206a:	f043 0301 	orr.w	r3, r3, #1
 800206e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002072:	e03a      	b.n	80020ea <HAL_RCC_OscConfig+0x552>
 8002074:	44020c00 	.word	0x44020c00
 8002078:	20000004 	.word	0x20000004
 800207c:	44020800 	.word	0x44020800
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	2b85      	cmp	r3, #133	@ 0x85
 8002086:	d118      	bne.n	80020ba <HAL_RCC_OscConfig+0x522>
 8002088:	4ba2      	ldr	r3, [pc, #648]	@ (8002314 <HAL_RCC_OscConfig+0x77c>)
 800208a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800208e:	4aa1      	ldr	r2, [pc, #644]	@ (8002314 <HAL_RCC_OscConfig+0x77c>)
 8002090:	f043 0304 	orr.w	r3, r3, #4
 8002094:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002098:	4b9e      	ldr	r3, [pc, #632]	@ (8002314 <HAL_RCC_OscConfig+0x77c>)
 800209a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800209e:	4a9d      	ldr	r2, [pc, #628]	@ (8002314 <HAL_RCC_OscConfig+0x77c>)
 80020a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020a4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80020a8:	4b9a      	ldr	r3, [pc, #616]	@ (8002314 <HAL_RCC_OscConfig+0x77c>)
 80020aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020ae:	4a99      	ldr	r2, [pc, #612]	@ (8002314 <HAL_RCC_OscConfig+0x77c>)
 80020b0:	f043 0301 	orr.w	r3, r3, #1
 80020b4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80020b8:	e017      	b.n	80020ea <HAL_RCC_OscConfig+0x552>
 80020ba:	4b96      	ldr	r3, [pc, #600]	@ (8002314 <HAL_RCC_OscConfig+0x77c>)
 80020bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020c0:	4a94      	ldr	r2, [pc, #592]	@ (8002314 <HAL_RCC_OscConfig+0x77c>)
 80020c2:	f023 0301 	bic.w	r3, r3, #1
 80020c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80020ca:	4b92      	ldr	r3, [pc, #584]	@ (8002314 <HAL_RCC_OscConfig+0x77c>)
 80020cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020d0:	4a90      	ldr	r2, [pc, #576]	@ (8002314 <HAL_RCC_OscConfig+0x77c>)
 80020d2:	f023 0304 	bic.w	r3, r3, #4
 80020d6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80020da:	4b8e      	ldr	r3, [pc, #568]	@ (8002314 <HAL_RCC_OscConfig+0x77c>)
 80020dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020e0:	4a8c      	ldr	r2, [pc, #560]	@ (8002314 <HAL_RCC_OscConfig+0x77c>)
 80020e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80020e6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d016      	beq.n	8002120 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f2:	f7fe feed 	bl	8000ed0 <HAL_GetTick>
 80020f6:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020f8:	e00a      	b.n	8002110 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020fa:	f7fe fee9 	bl	8000ed0 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002108:	4293      	cmp	r3, r2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e175      	b.n	80023fc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002110:	4b80      	ldr	r3, [pc, #512]	@ (8002314 <HAL_RCC_OscConfig+0x77c>)
 8002112:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d0ed      	beq.n	80020fa <HAL_RCC_OscConfig+0x562>
 800211e:	e015      	b.n	800214c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002120:	f7fe fed6 	bl	8000ed0 <HAL_GetTick>
 8002124:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002126:	e00a      	b.n	800213e <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002128:	f7fe fed2 	bl	8000ed0 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002136:	4293      	cmp	r3, r2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e15e      	b.n	80023fc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800213e:	4b75      	ldr	r3, [pc, #468]	@ (8002314 <HAL_RCC_OscConfig+0x77c>)
 8002140:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1ed      	bne.n	8002128 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0320 	and.w	r3, r3, #32
 8002154:	2b00      	cmp	r3, #0
 8002156:	d036      	beq.n	80021c6 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800215c:	2b00      	cmp	r3, #0
 800215e:	d019      	beq.n	8002194 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002160:	4b6c      	ldr	r3, [pc, #432]	@ (8002314 <HAL_RCC_OscConfig+0x77c>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a6b      	ldr	r2, [pc, #428]	@ (8002314 <HAL_RCC_OscConfig+0x77c>)
 8002166:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800216a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800216c:	f7fe feb0 	bl	8000ed0 <HAL_GetTick>
 8002170:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002174:	f7fe feac 	bl	8000ed0 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e13a      	b.n	80023fc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002186:	4b63      	ldr	r3, [pc, #396]	@ (8002314 <HAL_RCC_OscConfig+0x77c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0f0      	beq.n	8002174 <HAL_RCC_OscConfig+0x5dc>
 8002192:	e018      	b.n	80021c6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002194:	4b5f      	ldr	r3, [pc, #380]	@ (8002314 <HAL_RCC_OscConfig+0x77c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a5e      	ldr	r2, [pc, #376]	@ (8002314 <HAL_RCC_OscConfig+0x77c>)
 800219a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800219e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a0:	f7fe fe96 	bl	8000ed0 <HAL_GetTick>
 80021a4:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80021a8:	f7fe fe92 	bl	8000ed0 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e120      	b.n	80023fc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80021ba:	4b56      	ldr	r3, [pc, #344]	@ (8002314 <HAL_RCC_OscConfig+0x77c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1f0      	bne.n	80021a8 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f000 8115 	beq.w	80023fa <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	2b18      	cmp	r3, #24
 80021d4:	f000 80af 	beq.w	8002336 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021dc:	2b02      	cmp	r3, #2
 80021de:	f040 8086 	bne.w	80022ee <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80021e2:	4b4c      	ldr	r3, [pc, #304]	@ (8002314 <HAL_RCC_OscConfig+0x77c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a4b      	ldr	r2, [pc, #300]	@ (8002314 <HAL_RCC_OscConfig+0x77c>)
 80021e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ee:	f7fe fe6f 	bl	8000ed0 <HAL_GetTick>
 80021f2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80021f4:	e008      	b.n	8002208 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80021f6:	f7fe fe6b 	bl	8000ed0 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e0f9      	b.n	80023fc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002208:	4b42      	ldr	r3, [pc, #264]	@ (8002314 <HAL_RCC_OscConfig+0x77c>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1f0      	bne.n	80021f6 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8002214:	4b3f      	ldr	r3, [pc, #252]	@ (8002314 <HAL_RCC_OscConfig+0x77c>)
 8002216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002218:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800221c:	f023 0303 	bic.w	r3, r3, #3
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002228:	0212      	lsls	r2, r2, #8
 800222a:	430a      	orrs	r2, r1
 800222c:	4939      	ldr	r1, [pc, #228]	@ (8002314 <HAL_RCC_OscConfig+0x77c>)
 800222e:	4313      	orrs	r3, r2
 8002230:	628b      	str	r3, [r1, #40]	@ 0x28
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002236:	3b01      	subs	r3, #1
 8002238:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002240:	3b01      	subs	r3, #1
 8002242:	025b      	lsls	r3, r3, #9
 8002244:	b29b      	uxth	r3, r3
 8002246:	431a      	orrs	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800224c:	3b01      	subs	r3, #1
 800224e:	041b      	lsls	r3, r3, #16
 8002250:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002254:	431a      	orrs	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225a:	3b01      	subs	r3, #1
 800225c:	061b      	lsls	r3, r3, #24
 800225e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002262:	492c      	ldr	r1, [pc, #176]	@ (8002314 <HAL_RCC_OscConfig+0x77c>)
 8002264:	4313      	orrs	r3, r2
 8002266:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002268:	4b2a      	ldr	r3, [pc, #168]	@ (8002314 <HAL_RCC_OscConfig+0x77c>)
 800226a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800226c:	4a29      	ldr	r2, [pc, #164]	@ (8002314 <HAL_RCC_OscConfig+0x77c>)
 800226e:	f023 0310 	bic.w	r3, r3, #16
 8002272:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002278:	4a26      	ldr	r2, [pc, #152]	@ (8002314 <HAL_RCC_OscConfig+0x77c>)
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800227e:	4b25      	ldr	r3, [pc, #148]	@ (8002314 <HAL_RCC_OscConfig+0x77c>)
 8002280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002282:	4a24      	ldr	r2, [pc, #144]	@ (8002314 <HAL_RCC_OscConfig+0x77c>)
 8002284:	f043 0310 	orr.w	r3, r3, #16
 8002288:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 800228a:	4b22      	ldr	r3, [pc, #136]	@ (8002314 <HAL_RCC_OscConfig+0x77c>)
 800228c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800228e:	f023 020c 	bic.w	r2, r3, #12
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002296:	491f      	ldr	r1, [pc, #124]	@ (8002314 <HAL_RCC_OscConfig+0x77c>)
 8002298:	4313      	orrs	r3, r2
 800229a:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 800229c:	4b1d      	ldr	r3, [pc, #116]	@ (8002314 <HAL_RCC_OscConfig+0x77c>)
 800229e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a0:	f023 0220 	bic.w	r2, r3, #32
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022a8:	491a      	ldr	r1, [pc, #104]	@ (8002314 <HAL_RCC_OscConfig+0x77c>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80022ae:	4b19      	ldr	r3, [pc, #100]	@ (8002314 <HAL_RCC_OscConfig+0x77c>)
 80022b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022b2:	4a18      	ldr	r2, [pc, #96]	@ (8002314 <HAL_RCC_OscConfig+0x77c>)
 80022b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022b8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80022ba:	4b16      	ldr	r3, [pc, #88]	@ (8002314 <HAL_RCC_OscConfig+0x77c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a15      	ldr	r2, [pc, #84]	@ (8002314 <HAL_RCC_OscConfig+0x77c>)
 80022c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c6:	f7fe fe03 	bl	8000ed0 <HAL_GetTick>
 80022ca:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80022ce:	f7fe fdff 	bl	8000ed0 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e08d      	b.n	80023fc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80022e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002314 <HAL_RCC_OscConfig+0x77c>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0f0      	beq.n	80022ce <HAL_RCC_OscConfig+0x736>
 80022ec:	e085      	b.n	80023fa <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80022ee:	4b09      	ldr	r3, [pc, #36]	@ (8002314 <HAL_RCC_OscConfig+0x77c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a08      	ldr	r2, [pc, #32]	@ (8002314 <HAL_RCC_OscConfig+0x77c>)
 80022f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fa:	f7fe fde9 	bl	8000ed0 <HAL_GetTick>
 80022fe:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002300:	e00a      	b.n	8002318 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002302:	f7fe fde5 	bl	8000ed0 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d903      	bls.n	8002318 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e073      	b.n	80023fc <HAL_RCC_OscConfig+0x864>
 8002314:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002318:	4b3a      	ldr	r3, [pc, #232]	@ (8002404 <HAL_RCC_OscConfig+0x86c>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d1ee      	bne.n	8002302 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002324:	4b37      	ldr	r3, [pc, #220]	@ (8002404 <HAL_RCC_OscConfig+0x86c>)
 8002326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002328:	4a36      	ldr	r2, [pc, #216]	@ (8002404 <HAL_RCC_OscConfig+0x86c>)
 800232a:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800232e:	f023 0303 	bic.w	r3, r3, #3
 8002332:	6293      	str	r3, [r2, #40]	@ 0x28
 8002334:	e061      	b.n	80023fa <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002336:	4b33      	ldr	r3, [pc, #204]	@ (8002404 <HAL_RCC_OscConfig+0x86c>)
 8002338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800233a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800233c:	4b31      	ldr	r3, [pc, #196]	@ (8002404 <HAL_RCC_OscConfig+0x86c>)
 800233e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002340:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002346:	2b01      	cmp	r3, #1
 8002348:	d031      	beq.n	80023ae <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	f003 0203 	and.w	r2, r3, #3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002354:	429a      	cmp	r2, r3
 8002356:	d12a      	bne.n	80023ae <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	0a1b      	lsrs	r3, r3, #8
 800235c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002364:	429a      	cmp	r2, r3
 8002366:	d122      	bne.n	80023ae <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002372:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002374:	429a      	cmp	r2, r3
 8002376:	d11a      	bne.n	80023ae <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	0a5b      	lsrs	r3, r3, #9
 800237c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002384:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002386:	429a      	cmp	r2, r3
 8002388:	d111      	bne.n	80023ae <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	0c1b      	lsrs	r3, r3, #16
 800238e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002396:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002398:	429a      	cmp	r2, r3
 800239a:	d108      	bne.n	80023ae <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	0e1b      	lsrs	r3, r3, #24
 80023a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d001      	beq.n	80023b2 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e024      	b.n	80023fc <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80023b2:	4b14      	ldr	r3, [pc, #80]	@ (8002404 <HAL_RCC_OscConfig+0x86c>)
 80023b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023b6:	08db      	lsrs	r3, r3, #3
 80023b8:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d01a      	beq.n	80023fa <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80023c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002404 <HAL_RCC_OscConfig+0x86c>)
 80023c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c8:	4a0e      	ldr	r2, [pc, #56]	@ (8002404 <HAL_RCC_OscConfig+0x86c>)
 80023ca:	f023 0310 	bic.w	r3, r3, #16
 80023ce:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d0:	f7fe fd7e 	bl	8000ed0 <HAL_GetTick>
 80023d4:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80023d6:	bf00      	nop
 80023d8:	f7fe fd7a 	bl	8000ed0 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d0f9      	beq.n	80023d8 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023e8:	4a06      	ldr	r2, [pc, #24]	@ (8002404 <HAL_RCC_OscConfig+0x86c>)
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80023ee:	4b05      	ldr	r3, [pc, #20]	@ (8002404 <HAL_RCC_OscConfig+0x86c>)
 80023f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f2:	4a04      	ldr	r2, [pc, #16]	@ (8002404 <HAL_RCC_OscConfig+0x86c>)
 80023f4:	f043 0310 	orr.w	r3, r3, #16
 80023f8:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3720      	adds	r7, #32
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	44020c00 	.word	0x44020c00

08002408 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d101      	bne.n	800241c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e19e      	b.n	800275a <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800241c:	4b83      	ldr	r3, [pc, #524]	@ (800262c <HAL_RCC_ClockConfig+0x224>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 030f 	and.w	r3, r3, #15
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	429a      	cmp	r2, r3
 8002428:	d910      	bls.n	800244c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242a:	4b80      	ldr	r3, [pc, #512]	@ (800262c <HAL_RCC_ClockConfig+0x224>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f023 020f 	bic.w	r2, r3, #15
 8002432:	497e      	ldr	r1, [pc, #504]	@ (800262c <HAL_RCC_ClockConfig+0x224>)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	4313      	orrs	r3, r2
 8002438:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800243a:	4b7c      	ldr	r3, [pc, #496]	@ (800262c <HAL_RCC_ClockConfig+0x224>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 030f 	and.w	r3, r3, #15
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	429a      	cmp	r2, r3
 8002446:	d001      	beq.n	800244c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e186      	b.n	800275a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0310 	and.w	r3, r3, #16
 8002454:	2b00      	cmp	r3, #0
 8002456:	d012      	beq.n	800247e <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	695a      	ldr	r2, [r3, #20]
 800245c:	4b74      	ldr	r3, [pc, #464]	@ (8002630 <HAL_RCC_ClockConfig+0x228>)
 800245e:	6a1b      	ldr	r3, [r3, #32]
 8002460:	0a1b      	lsrs	r3, r3, #8
 8002462:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002466:	429a      	cmp	r2, r3
 8002468:	d909      	bls.n	800247e <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800246a:	4b71      	ldr	r3, [pc, #452]	@ (8002630 <HAL_RCC_ClockConfig+0x228>)
 800246c:	6a1b      	ldr	r3, [r3, #32]
 800246e:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	021b      	lsls	r3, r3, #8
 8002478:	496d      	ldr	r1, [pc, #436]	@ (8002630 <HAL_RCC_ClockConfig+0x228>)
 800247a:	4313      	orrs	r3, r2
 800247c:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0308 	and.w	r3, r3, #8
 8002486:	2b00      	cmp	r3, #0
 8002488:	d012      	beq.n	80024b0 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	691a      	ldr	r2, [r3, #16]
 800248e:	4b68      	ldr	r3, [pc, #416]	@ (8002630 <HAL_RCC_ClockConfig+0x228>)
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	091b      	lsrs	r3, r3, #4
 8002494:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002498:	429a      	cmp	r2, r3
 800249a:	d909      	bls.n	80024b0 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800249c:	4b64      	ldr	r3, [pc, #400]	@ (8002630 <HAL_RCC_ClockConfig+0x228>)
 800249e:	6a1b      	ldr	r3, [r3, #32]
 80024a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	011b      	lsls	r3, r3, #4
 80024aa:	4961      	ldr	r1, [pc, #388]	@ (8002630 <HAL_RCC_ClockConfig+0x228>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0304 	and.w	r3, r3, #4
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d010      	beq.n	80024de <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68da      	ldr	r2, [r3, #12]
 80024c0:	4b5b      	ldr	r3, [pc, #364]	@ (8002630 <HAL_RCC_ClockConfig+0x228>)
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d908      	bls.n	80024de <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80024cc:	4b58      	ldr	r3, [pc, #352]	@ (8002630 <HAL_RCC_ClockConfig+0x228>)
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	4955      	ldr	r1, [pc, #340]	@ (8002630 <HAL_RCC_ClockConfig+0x228>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d010      	beq.n	800250c <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689a      	ldr	r2, [r3, #8]
 80024ee:	4b50      	ldr	r3, [pc, #320]	@ (8002630 <HAL_RCC_ClockConfig+0x228>)
 80024f0:	6a1b      	ldr	r3, [r3, #32]
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d908      	bls.n	800250c <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80024fa:	4b4d      	ldr	r3, [pc, #308]	@ (8002630 <HAL_RCC_ClockConfig+0x228>)
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	f023 020f 	bic.w	r2, r3, #15
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	494a      	ldr	r1, [pc, #296]	@ (8002630 <HAL_RCC_ClockConfig+0x228>)
 8002508:	4313      	orrs	r3, r2
 800250a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	2b00      	cmp	r3, #0
 8002516:	f000 8093 	beq.w	8002640 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b03      	cmp	r3, #3
 8002520:	d107      	bne.n	8002532 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002522:	4b43      	ldr	r3, [pc, #268]	@ (8002630 <HAL_RCC_ClockConfig+0x228>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d121      	bne.n	8002572 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e113      	b.n	800275a <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2b02      	cmp	r3, #2
 8002538:	d107      	bne.n	800254a <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800253a:	4b3d      	ldr	r3, [pc, #244]	@ (8002630 <HAL_RCC_ClockConfig+0x228>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d115      	bne.n	8002572 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e107      	b.n	800275a <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d107      	bne.n	8002562 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002552:	4b37      	ldr	r3, [pc, #220]	@ (8002630 <HAL_RCC_ClockConfig+0x228>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800255a:	2b00      	cmp	r3, #0
 800255c:	d109      	bne.n	8002572 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e0fb      	b.n	800275a <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002562:	4b33      	ldr	r3, [pc, #204]	@ (8002630 <HAL_RCC_ClockConfig+0x228>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e0f3      	b.n	800275a <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8002572:	4b2f      	ldr	r3, [pc, #188]	@ (8002630 <HAL_RCC_ClockConfig+0x228>)
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	f023 0203 	bic.w	r2, r3, #3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	492c      	ldr	r1, [pc, #176]	@ (8002630 <HAL_RCC_ClockConfig+0x228>)
 8002580:	4313      	orrs	r3, r2
 8002582:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002584:	f7fe fca4 	bl	8000ed0 <HAL_GetTick>
 8002588:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	2b03      	cmp	r3, #3
 8002590:	d112      	bne.n	80025b8 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002592:	e00a      	b.n	80025aa <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002594:	f7fe fc9c 	bl	8000ed0 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e0d7      	b.n	800275a <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025aa:	4b21      	ldr	r3, [pc, #132]	@ (8002630 <HAL_RCC_ClockConfig+0x228>)
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	f003 0318 	and.w	r3, r3, #24
 80025b2:	2b18      	cmp	r3, #24
 80025b4:	d1ee      	bne.n	8002594 <HAL_RCC_ClockConfig+0x18c>
 80025b6:	e043      	b.n	8002640 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d112      	bne.n	80025e6 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80025c0:	e00a      	b.n	80025d8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80025c2:	f7fe fc85 	bl	8000ed0 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e0c0      	b.n	800275a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80025d8:	4b15      	ldr	r3, [pc, #84]	@ (8002630 <HAL_RCC_ClockConfig+0x228>)
 80025da:	69db      	ldr	r3, [r3, #28]
 80025dc:	f003 0318 	and.w	r3, r3, #24
 80025e0:	2b10      	cmp	r3, #16
 80025e2:	d1ee      	bne.n	80025c2 <HAL_RCC_ClockConfig+0x1ba>
 80025e4:	e02c      	b.n	8002640 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d122      	bne.n	8002634 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80025ee:	e00a      	b.n	8002606 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80025f0:	f7fe fc6e 	bl	8000ed0 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025fe:	4293      	cmp	r3, r2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e0a9      	b.n	800275a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002606:	4b0a      	ldr	r3, [pc, #40]	@ (8002630 <HAL_RCC_ClockConfig+0x228>)
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	f003 0318 	and.w	r3, r3, #24
 800260e:	2b08      	cmp	r3, #8
 8002610:	d1ee      	bne.n	80025f0 <HAL_RCC_ClockConfig+0x1e8>
 8002612:	e015      	b.n	8002640 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002614:	f7fe fc5c 	bl	8000ed0 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002622:	4293      	cmp	r3, r2
 8002624:	d906      	bls.n	8002634 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e097      	b.n	800275a <HAL_RCC_ClockConfig+0x352>
 800262a:	bf00      	nop
 800262c:	40022000 	.word	0x40022000
 8002630:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002634:	4b4b      	ldr	r3, [pc, #300]	@ (8002764 <HAL_RCC_ClockConfig+0x35c>)
 8002636:	69db      	ldr	r3, [r3, #28]
 8002638:	f003 0318 	and.w	r3, r3, #24
 800263c:	2b00      	cmp	r3, #0
 800263e:	d1e9      	bne.n	8002614 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d010      	beq.n	800266e <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	4b44      	ldr	r3, [pc, #272]	@ (8002764 <HAL_RCC_ClockConfig+0x35c>)
 8002652:	6a1b      	ldr	r3, [r3, #32]
 8002654:	f003 030f 	and.w	r3, r3, #15
 8002658:	429a      	cmp	r2, r3
 800265a:	d208      	bcs.n	800266e <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800265c:	4b41      	ldr	r3, [pc, #260]	@ (8002764 <HAL_RCC_ClockConfig+0x35c>)
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	f023 020f 	bic.w	r2, r3, #15
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	493e      	ldr	r1, [pc, #248]	@ (8002764 <HAL_RCC_ClockConfig+0x35c>)
 800266a:	4313      	orrs	r3, r2
 800266c:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800266e:	4b3e      	ldr	r3, [pc, #248]	@ (8002768 <HAL_RCC_ClockConfig+0x360>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 030f 	and.w	r3, r3, #15
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	429a      	cmp	r2, r3
 800267a:	d210      	bcs.n	800269e <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800267c:	4b3a      	ldr	r3, [pc, #232]	@ (8002768 <HAL_RCC_ClockConfig+0x360>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f023 020f 	bic.w	r2, r3, #15
 8002684:	4938      	ldr	r1, [pc, #224]	@ (8002768 <HAL_RCC_ClockConfig+0x360>)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	4313      	orrs	r3, r2
 800268a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800268c:	4b36      	ldr	r3, [pc, #216]	@ (8002768 <HAL_RCC_ClockConfig+0x360>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 030f 	and.w	r3, r3, #15
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	429a      	cmp	r2, r3
 8002698:	d001      	beq.n	800269e <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e05d      	b.n	800275a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0304 	and.w	r3, r3, #4
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d010      	beq.n	80026cc <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	68da      	ldr	r2, [r3, #12]
 80026ae:	4b2d      	ldr	r3, [pc, #180]	@ (8002764 <HAL_RCC_ClockConfig+0x35c>)
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d208      	bcs.n	80026cc <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80026ba:	4b2a      	ldr	r3, [pc, #168]	@ (8002764 <HAL_RCC_ClockConfig+0x35c>)
 80026bc:	6a1b      	ldr	r3, [r3, #32]
 80026be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	4927      	ldr	r1, [pc, #156]	@ (8002764 <HAL_RCC_ClockConfig+0x35c>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0308 	and.w	r3, r3, #8
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d012      	beq.n	80026fe <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	691a      	ldr	r2, [r3, #16]
 80026dc:	4b21      	ldr	r3, [pc, #132]	@ (8002764 <HAL_RCC_ClockConfig+0x35c>)
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	091b      	lsrs	r3, r3, #4
 80026e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d209      	bcs.n	80026fe <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80026ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002764 <HAL_RCC_ClockConfig+0x35c>)
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	011b      	lsls	r3, r3, #4
 80026f8:	491a      	ldr	r1, [pc, #104]	@ (8002764 <HAL_RCC_ClockConfig+0x35c>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0310 	and.w	r3, r3, #16
 8002706:	2b00      	cmp	r3, #0
 8002708:	d012      	beq.n	8002730 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	695a      	ldr	r2, [r3, #20]
 800270e:	4b15      	ldr	r3, [pc, #84]	@ (8002764 <HAL_RCC_ClockConfig+0x35c>)
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	0a1b      	lsrs	r3, r3, #8
 8002714:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002718:	429a      	cmp	r2, r3
 800271a:	d209      	bcs.n	8002730 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800271c:	4b11      	ldr	r3, [pc, #68]	@ (8002764 <HAL_RCC_ClockConfig+0x35c>)
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	021b      	lsls	r3, r3, #8
 800272a:	490e      	ldr	r1, [pc, #56]	@ (8002764 <HAL_RCC_ClockConfig+0x35c>)
 800272c:	4313      	orrs	r3, r2
 800272e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002730:	f000 f822 	bl	8002778 <HAL_RCC_GetSysClockFreq>
 8002734:	4602      	mov	r2, r0
 8002736:	4b0b      	ldr	r3, [pc, #44]	@ (8002764 <HAL_RCC_ClockConfig+0x35c>)
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	490b      	ldr	r1, [pc, #44]	@ (800276c <HAL_RCC_ClockConfig+0x364>)
 8002740:	5ccb      	ldrb	r3, [r1, r3]
 8002742:	fa22 f303 	lsr.w	r3, r2, r3
 8002746:	4a0a      	ldr	r2, [pc, #40]	@ (8002770 <HAL_RCC_ClockConfig+0x368>)
 8002748:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800274a:	4b0a      	ldr	r3, [pc, #40]	@ (8002774 <HAL_RCC_ClockConfig+0x36c>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f7fe fb34 	bl	8000dbc <HAL_InitTick>
 8002754:	4603      	mov	r3, r0
 8002756:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8002758:	7afb      	ldrb	r3, [r7, #11]
}
 800275a:	4618      	mov	r0, r3
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	44020c00 	.word	0x44020c00
 8002768:	40022000 	.word	0x40022000
 800276c:	080060f8 	.word	0x080060f8
 8002770:	20000000 	.word	0x20000000
 8002774:	20000004 	.word	0x20000004

08002778 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002778:	b480      	push	{r7}
 800277a:	b089      	sub	sp, #36	@ 0x24
 800277c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800277e:	4b8c      	ldr	r3, [pc, #560]	@ (80029b0 <HAL_RCC_GetSysClockFreq+0x238>)
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	f003 0318 	and.w	r3, r3, #24
 8002786:	2b08      	cmp	r3, #8
 8002788:	d102      	bne.n	8002790 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800278a:	4b8a      	ldr	r3, [pc, #552]	@ (80029b4 <HAL_RCC_GetSysClockFreq+0x23c>)
 800278c:	61fb      	str	r3, [r7, #28]
 800278e:	e107      	b.n	80029a0 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002790:	4b87      	ldr	r3, [pc, #540]	@ (80029b0 <HAL_RCC_GetSysClockFreq+0x238>)
 8002792:	69db      	ldr	r3, [r3, #28]
 8002794:	f003 0318 	and.w	r3, r3, #24
 8002798:	2b00      	cmp	r3, #0
 800279a:	d112      	bne.n	80027c2 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800279c:	4b84      	ldr	r3, [pc, #528]	@ (80029b0 <HAL_RCC_GetSysClockFreq+0x238>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0320 	and.w	r3, r3, #32
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d009      	beq.n	80027bc <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80027a8:	4b81      	ldr	r3, [pc, #516]	@ (80029b0 <HAL_RCC_GetSysClockFreq+0x238>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	08db      	lsrs	r3, r3, #3
 80027ae:	f003 0303 	and.w	r3, r3, #3
 80027b2:	4a81      	ldr	r2, [pc, #516]	@ (80029b8 <HAL_RCC_GetSysClockFreq+0x240>)
 80027b4:	fa22 f303 	lsr.w	r3, r2, r3
 80027b8:	61fb      	str	r3, [r7, #28]
 80027ba:	e0f1      	b.n	80029a0 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 80027bc:	4b7e      	ldr	r3, [pc, #504]	@ (80029b8 <HAL_RCC_GetSysClockFreq+0x240>)
 80027be:	61fb      	str	r3, [r7, #28]
 80027c0:	e0ee      	b.n	80029a0 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027c2:	4b7b      	ldr	r3, [pc, #492]	@ (80029b0 <HAL_RCC_GetSysClockFreq+0x238>)
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	f003 0318 	and.w	r3, r3, #24
 80027ca:	2b10      	cmp	r3, #16
 80027cc:	d102      	bne.n	80027d4 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027ce:	4b7b      	ldr	r3, [pc, #492]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x244>)
 80027d0:	61fb      	str	r3, [r7, #28]
 80027d2:	e0e5      	b.n	80029a0 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027d4:	4b76      	ldr	r3, [pc, #472]	@ (80029b0 <HAL_RCC_GetSysClockFreq+0x238>)
 80027d6:	69db      	ldr	r3, [r3, #28]
 80027d8:	f003 0318 	and.w	r3, r3, #24
 80027dc:	2b18      	cmp	r3, #24
 80027de:	f040 80dd 	bne.w	800299c <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80027e2:	4b73      	ldr	r3, [pc, #460]	@ (80029b0 <HAL_RCC_GetSysClockFreq+0x238>)
 80027e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80027ec:	4b70      	ldr	r3, [pc, #448]	@ (80029b0 <HAL_RCC_GetSysClockFreq+0x238>)
 80027ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f0:	0a1b      	lsrs	r3, r3, #8
 80027f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80027f6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80027f8:	4b6d      	ldr	r3, [pc, #436]	@ (80029b0 <HAL_RCC_GetSysClockFreq+0x238>)
 80027fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027fc:	091b      	lsrs	r3, r3, #4
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002804:	4b6a      	ldr	r3, [pc, #424]	@ (80029b0 <HAL_RCC_GetSysClockFreq+0x238>)
 8002806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8002808:	08db      	lsrs	r3, r3, #3
 800280a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	fb02 f303 	mul.w	r3, r2, r3
 8002814:	ee07 3a90 	vmov	s15, r3
 8002818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800281c:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	2b00      	cmp	r3, #0
 8002824:	f000 80b7 	beq.w	8002996 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d003      	beq.n	8002836 <HAL_RCC_GetSysClockFreq+0xbe>
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	2b03      	cmp	r3, #3
 8002832:	d056      	beq.n	80028e2 <HAL_RCC_GetSysClockFreq+0x16a>
 8002834:	e077      	b.n	8002926 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002836:	4b5e      	ldr	r3, [pc, #376]	@ (80029b0 <HAL_RCC_GetSysClockFreq+0x238>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0320 	and.w	r3, r3, #32
 800283e:	2b00      	cmp	r3, #0
 8002840:	d02d      	beq.n	800289e <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002842:	4b5b      	ldr	r3, [pc, #364]	@ (80029b0 <HAL_RCC_GetSysClockFreq+0x238>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	08db      	lsrs	r3, r3, #3
 8002848:	f003 0303 	and.w	r3, r3, #3
 800284c:	4a5a      	ldr	r2, [pc, #360]	@ (80029b8 <HAL_RCC_GetSysClockFreq+0x240>)
 800284e:	fa22 f303 	lsr.w	r3, r2, r3
 8002852:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	ee07 3a90 	vmov	s15, r3
 800285a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	ee07 3a90 	vmov	s15, r3
 8002864:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002868:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800286c:	4b50      	ldr	r3, [pc, #320]	@ (80029b0 <HAL_RCC_GetSysClockFreq+0x238>)
 800286e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002870:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002874:	ee07 3a90 	vmov	s15, r3
 8002878:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800287c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002880:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 80029c0 <HAL_RCC_GetSysClockFreq+0x248>
 8002884:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002888:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800288c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002890:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002894:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002898:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 800289c:	e065      	b.n	800296a <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	ee07 3a90 	vmov	s15, r3
 80028a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028a8:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80029c4 <HAL_RCC_GetSysClockFreq+0x24c>
 80028ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028b0:	4b3f      	ldr	r3, [pc, #252]	@ (80029b0 <HAL_RCC_GetSysClockFreq+0x238>)
 80028b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028b8:	ee07 3a90 	vmov	s15, r3
 80028bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80028c0:	ed97 6a02 	vldr	s12, [r7, #8]
 80028c4:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80029c0 <HAL_RCC_GetSysClockFreq+0x248>
 80028c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80028cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80028d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80028d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80028d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028dc:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80028e0:	e043      	b.n	800296a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	ee07 3a90 	vmov	s15, r3
 80028e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028ec:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80029c8 <HAL_RCC_GetSysClockFreq+0x250>
 80028f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028f4:	4b2e      	ldr	r3, [pc, #184]	@ (80029b0 <HAL_RCC_GetSysClockFreq+0x238>)
 80028f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028fc:	ee07 3a90 	vmov	s15, r3
 8002900:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002904:	ed97 6a02 	vldr	s12, [r7, #8]
 8002908:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 80029c0 <HAL_RCC_GetSysClockFreq+0x248>
 800290c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002910:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002914:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002918:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800291c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002920:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8002924:	e021      	b.n	800296a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	ee07 3a90 	vmov	s15, r3
 800292c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002930:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80029cc <HAL_RCC_GetSysClockFreq+0x254>
 8002934:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002938:	4b1d      	ldr	r3, [pc, #116]	@ (80029b0 <HAL_RCC_GetSysClockFreq+0x238>)
 800293a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800293c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002940:	ee07 3a90 	vmov	s15, r3
 8002944:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002948:	ed97 6a02 	vldr	s12, [r7, #8]
 800294c:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 80029c0 <HAL_RCC_GetSysClockFreq+0x248>
 8002950:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002954:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002958:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800295c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002960:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002964:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002968:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 800296a:	4b11      	ldr	r3, [pc, #68]	@ (80029b0 <HAL_RCC_GetSysClockFreq+0x238>)
 800296c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800296e:	0a5b      	lsrs	r3, r3, #9
 8002970:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002974:	3301      	adds	r3, #1
 8002976:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	ee07 3a90 	vmov	s15, r3
 800297e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002982:	edd7 6a06 	vldr	s13, [r7, #24]
 8002986:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800298a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800298e:	ee17 3a90 	vmov	r3, s15
 8002992:	61fb      	str	r3, [r7, #28]
 8002994:	e004      	b.n	80029a0 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8002996:	2300      	movs	r3, #0
 8002998:	61fb      	str	r3, [r7, #28]
 800299a:	e001      	b.n	80029a0 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 800299c:	4b06      	ldr	r3, [pc, #24]	@ (80029b8 <HAL_RCC_GetSysClockFreq+0x240>)
 800299e:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 80029a0:	69fb      	ldr	r3, [r7, #28]
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3724      	adds	r7, #36	@ 0x24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	44020c00 	.word	0x44020c00
 80029b4:	003d0900 	.word	0x003d0900
 80029b8:	03d09000 	.word	0x03d09000
 80029bc:	017d7840 	.word	0x017d7840
 80029c0:	46000000 	.word	0x46000000
 80029c4:	4c742400 	.word	0x4c742400
 80029c8:	4bbebc20 	.word	0x4bbebc20
 80029cc:	4a742400 	.word	0x4a742400

080029d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80029d4:	f7ff fed0 	bl	8002778 <HAL_RCC_GetSysClockFreq>
 80029d8:	4602      	mov	r2, r0
 80029da:	4b08      	ldr	r3, [pc, #32]	@ (80029fc <HAL_RCC_GetHCLKFreq+0x2c>)
 80029dc:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80029de:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80029e2:	4907      	ldr	r1, [pc, #28]	@ (8002a00 <HAL_RCC_GetHCLKFreq+0x30>)
 80029e4:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80029e6:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80029ea:	fa22 f303 	lsr.w	r3, r2, r3
 80029ee:	4a05      	ldr	r2, [pc, #20]	@ (8002a04 <HAL_RCC_GetHCLKFreq+0x34>)
 80029f0:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80029f2:	4b04      	ldr	r3, [pc, #16]	@ (8002a04 <HAL_RCC_GetHCLKFreq+0x34>)
 80029f4:	681b      	ldr	r3, [r3, #0]
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	44020c00 	.word	0x44020c00
 8002a00:	080060f8 	.word	0x080060f8
 8002a04:	20000000 	.word	0x20000000

08002a08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8002a0c:	f7ff ffe0 	bl	80029d0 <HAL_RCC_GetHCLKFreq>
 8002a10:	4602      	mov	r2, r0
 8002a12:	4b06      	ldr	r3, [pc, #24]	@ (8002a2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	091b      	lsrs	r3, r3, #4
 8002a18:	f003 0307 	and.w	r3, r3, #7
 8002a1c:	4904      	ldr	r1, [pc, #16]	@ (8002a30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a1e:	5ccb      	ldrb	r3, [r1, r3]
 8002a20:	f003 031f 	and.w	r3, r3, #31
 8002a24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	44020c00 	.word	0x44020c00
 8002a30:	08006108 	.word	0x08006108

08002a34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8002a38:	f7ff ffca 	bl	80029d0 <HAL_RCC_GetHCLKFreq>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	4b06      	ldr	r3, [pc, #24]	@ (8002a58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	0a1b      	lsrs	r3, r3, #8
 8002a44:	f003 0307 	and.w	r3, r3, #7
 8002a48:	4904      	ldr	r1, [pc, #16]	@ (8002a5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a4a:	5ccb      	ldrb	r3, [r1, r3]
 8002a4c:	f003 031f 	and.w	r3, r3, #31
 8002a50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	44020c00 	.word	0x44020c00
 8002a5c:	08006108 	.word	0x08006108

08002a60 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8002a64:	f7ff ffb4 	bl	80029d0 <HAL_RCC_GetHCLKFreq>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	4b06      	ldr	r3, [pc, #24]	@ (8002a84 <HAL_RCC_GetPCLK3Freq+0x24>)
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	0b1b      	lsrs	r3, r3, #12
 8002a70:	f003 0307 	and.w	r3, r3, #7
 8002a74:	4904      	ldr	r1, [pc, #16]	@ (8002a88 <HAL_RCC_GetPCLK3Freq+0x28>)
 8002a76:	5ccb      	ldrb	r3, [r1, r3]
 8002a78:	f003 031f 	and.w	r3, r3, #31
 8002a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	44020c00 	.word	0x44020c00
 8002a88:	08006108 	.word	0x08006108

08002a8c <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002a8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a90:	b0aa      	sub	sp, #168	@ 0xa8
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a98:	2300      	movs	r3, #0
 8002a9a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002aa4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aac:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8002ab0:	2500      	movs	r5, #0
 8002ab2:	ea54 0305 	orrs.w	r3, r4, r5
 8002ab6:	d00b      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8002ab8:	4bb8      	ldr	r3, [pc, #736]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002aba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002abe:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8002ac2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac8:	4ab4      	ldr	r2, [pc, #720]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002aca:	430b      	orrs	r3, r1
 8002acc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ad0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad8:	f002 0801 	and.w	r8, r2, #1
 8002adc:	f04f 0900 	mov.w	r9, #0
 8002ae0:	ea58 0309 	orrs.w	r3, r8, r9
 8002ae4:	d038      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8002ae6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002aea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aec:	2b05      	cmp	r3, #5
 8002aee:	d819      	bhi.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002af0:	a201      	add	r2, pc, #4	@ (adr r2, 8002af8 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8002af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af6:	bf00      	nop
 8002af8:	08002b2d 	.word	0x08002b2d
 8002afc:	08002b11 	.word	0x08002b11
 8002b00:	08002b25 	.word	0x08002b25
 8002b04:	08002b2d 	.word	0x08002b2d
 8002b08:	08002b2d 	.word	0x08002b2d
 8002b0c:	08002b2d 	.word	0x08002b2d
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002b10:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002b14:	3308      	adds	r3, #8
 8002b16:	4618      	mov	r0, r3
 8002b18:	f001 fff2 	bl	8004b00 <RCCEx_PLL2_Config>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART1 clock source config set later after clock selection check */
        break;
 8002b22:	e004      	b.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0xa2>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002b2a:	e000      	b.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0xa2>
        break;
 8002b2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b2e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10c      	bne.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002b36:	4b99      	ldr	r3, [pc, #612]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002b3c:	f023 0107 	bic.w	r1, r3, #7
 8002b40:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002b44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b46:	4a95      	ldr	r2, [pc, #596]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b48:	430b      	orrs	r3, r1
 8002b4a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002b4e:	e003      	b.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b50:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002b54:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b58:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b60:	f002 0a02 	and.w	sl, r2, #2
 8002b64:	f04f 0b00 	mov.w	fp, #0
 8002b68:	ea5a 030b 	orrs.w	r3, sl, fp
 8002b6c:	d03c      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8002b6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b74:	2b28      	cmp	r3, #40	@ 0x28
 8002b76:	d01b      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x124>
 8002b78:	2b28      	cmp	r3, #40	@ 0x28
 8002b7a:	d815      	bhi.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8002b7c:	2b20      	cmp	r3, #32
 8002b7e:	d019      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8002b80:	2b20      	cmp	r3, #32
 8002b82:	d811      	bhi.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8002b84:	2b18      	cmp	r3, #24
 8002b86:	d017      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8002b88:	2b18      	cmp	r3, #24
 8002b8a:	d80d      	bhi.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d015      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x130>
 8002b90:	2b08      	cmp	r3, #8
 8002b92:	d109      	bne.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002b94:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002b98:	3308      	adds	r3, #8
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f001 ffb0 	bl	8004b00 <RCCEx_PLL2_Config>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART2 clock source config set later after clock selection check */
        break;
 8002ba6:	e00a      	b.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x132>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002bae:	e006      	b.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8002bb0:	bf00      	nop
 8002bb2:	e004      	b.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8002bb4:	bf00      	nop
 8002bb6:	e002      	b.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8002bb8:	bf00      	nop
 8002bba:	e000      	b.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8002bbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bbe:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d10c      	bne.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8002bc6:	4b75      	ldr	r3, [pc, #468]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002bc8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002bcc:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8002bd0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bd6:	4a71      	ldr	r2, [pc, #452]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002bd8:	430b      	orrs	r3, r1
 8002bda:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002bde:	e003      	b.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002be0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002be4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002be8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf0:	f002 0304 	and.w	r3, r2, #4
 8002bf4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002bfe:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8002c02:	460b      	mov	r3, r1
 8002c04:	4313      	orrs	r3, r2
 8002c06:	d040      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8002c08:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c0e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002c12:	d01e      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8002c14:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002c18:	d817      	bhi.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002c1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c1e:	d01a      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 8002c20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c24:	d811      	bhi.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002c26:	2bc0      	cmp	r3, #192	@ 0xc0
 8002c28:	d017      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8002c2a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002c2c:	d80d      	bhi.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d015      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 8002c32:	2b40      	cmp	r3, #64	@ 0x40
 8002c34:	d109      	bne.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x1be>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002c36:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c3a:	3308      	adds	r3, #8
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f001 ff5f 	bl	8004b00 <RCCEx_PLL2_Config>
 8002c42:	4603      	mov	r3, r0
 8002c44:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART3 clock source config set later after clock selection check */
        break;
 8002c48:	e00a      	b.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002c50:	e006      	b.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8002c52:	bf00      	nop
 8002c54:	e004      	b.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8002c56:	bf00      	nop
 8002c58:	e002      	b.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8002c5a:	bf00      	nop
 8002c5c:	e000      	b.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8002c5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c60:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d10c      	bne.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002c68:	4b4c      	ldr	r3, [pc, #304]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c6a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002c6e:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002c72:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c78:	4a48      	ldr	r2, [pc, #288]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c7a:	430b      	orrs	r3, r1
 8002c7c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002c80:	e003      	b.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c82:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002c86:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c92:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002c96:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002ca0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	d043      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8002caa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8002cb4:	d021      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002cb6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8002cba:	d81a      	bhi.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8002cbc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002cc0:	d01d      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x272>
 8002cc2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002cc6:	d814      	bhi.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8002cc8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002ccc:	d019      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8002cce:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002cd2:	d80e      	bhi.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d016      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8002cd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002cdc:	d109      	bne.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x266>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002cde:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002ce2:	3308      	adds	r3, #8
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f001 ff0b 	bl	8004b00 <RCCEx_PLL2_Config>
 8002cea:	4603      	mov	r3, r0
 8002cec:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8002cf0:	e00a      	b.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002cf8:	e006      	b.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8002cfa:	bf00      	nop
 8002cfc:	e004      	b.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8002cfe:	bf00      	nop
 8002d00:	e002      	b.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8002d02:	bf00      	nop
 8002d04:	e000      	b.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8002d06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d08:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10c      	bne.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8002d10:	4b22      	ldr	r3, [pc, #136]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d16:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002d1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d20:	4a1e      	ldr	r2, [pc, #120]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d22:	430b      	orrs	r3, r1
 8002d24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002d28:	e003      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d2a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002d2e:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d32:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d3a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002d3e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002d40:	2300      	movs	r3, #0
 8002d42:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002d44:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8002d48:	460b      	mov	r3, r1
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	d03e      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8002d4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002d52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d54:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002d58:	d01b      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x306>
 8002d5a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002d5e:	d814      	bhi.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8002d60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002d64:	d017      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8002d66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002d6a:	d80e      	bhi.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d017      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8002d70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d74:	d109      	bne.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002d76:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002d7a:	3308      	adds	r3, #8
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f001 febf 	bl	8004b00 <RCCEx_PLL2_Config>
 8002d82:	4603      	mov	r3, r0
 8002d84:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8002d88:	e00b      	b.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002d90:	e007      	b.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 8002d92:	bf00      	nop
 8002d94:	e005      	b.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 8002d96:	bf00      	nop
 8002d98:	e003      	b.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x316>
 8002d9a:	bf00      	nop
 8002d9c:	44020c00 	.word	0x44020c00
        break;
 8002da0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002da2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10c      	bne.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x338>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8002daa:	4ba5      	ldr	r3, [pc, #660]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002dac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002db0:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8002db4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dba:	4aa1      	ldr	r2, [pc, #644]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002dbc:	430b      	orrs	r3, r1
 8002dbe:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8002dc2:	e003      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x340>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dc4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002dc8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002dcc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002dd8:	673b      	str	r3, [r7, #112]	@ 0x70
 8002dda:	2300      	movs	r3, #0
 8002ddc:	677b      	str	r3, [r7, #116]	@ 0x74
 8002dde:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8002de2:	460b      	mov	r3, r1
 8002de4:	4313      	orrs	r3, r2
 8002de6:	d03b      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8002de8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002dec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dee:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002df2:	d01b      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 8002df4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002df8:	d814      	bhi.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8002dfa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002dfe:	d017      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8002e00:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002e04:	d80e      	bhi.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d014      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8002e0a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002e0e:	d109      	bne.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x398>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002e10:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002e14:	3308      	adds	r3, #8
 8002e16:	4618      	mov	r0, r3
 8002e18:	f001 fe72 	bl	8004b00 <RCCEx_PLL2_Config>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8002e22:	e008      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002e2a:	e004      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8002e2c:	bf00      	nop
 8002e2e:	e002      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8002e30:	bf00      	nop
 8002e32:	e000      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8002e34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e36:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10c      	bne.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8002e3e:	4b80      	ldr	r3, [pc, #512]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002e40:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002e44:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8002e48:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002e4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e4e:	4a7c      	ldr	r2, [pc, #496]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002e50:	430b      	orrs	r3, r1
 8002e52:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8002e56:	e003      	b.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e58:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002e5c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8002e60:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e68:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8002e6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002e6e:	2300      	movs	r3, #0
 8002e70:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002e72:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8002e76:	460b      	mov	r3, r1
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	d033      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8002e7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e82:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002e86:	d015      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8002e88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002e8c:	d80e      	bhi.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x420>
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d012      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8002e92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e96:	d109      	bne.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x420>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002e98:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002e9c:	3308      	adds	r3, #8
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f001 fe2e 	bl	8004b00 <RCCEx_PLL2_Config>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8002eaa:	e006      	b.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x42e>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002eb2:	e002      	b.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8002eb4:	bf00      	nop
 8002eb6:	e000      	b.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8002eb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002eba:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10c      	bne.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8002ec2:	4b5f      	ldr	r3, [pc, #380]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002ec4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002ec8:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8002ecc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ed2:	4a5b      	ldr	r2, [pc, #364]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002ed4:	430b      	orrs	r3, r1
 8002ed6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8002eda:	e003      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002edc:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002ee0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8002ee4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eec:	2100      	movs	r1, #0
 8002eee:	6639      	str	r1, [r7, #96]	@ 0x60
 8002ef0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ef4:	667b      	str	r3, [r7, #100]	@ 0x64
 8002ef6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8002efa:	460b      	mov	r3, r1
 8002efc:	4313      	orrs	r3, r2
 8002efe:	d033      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8002f00:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f0a:	d015      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8002f0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f10:	d80e      	bhi.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d012      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002f16:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f1a:	d109      	bne.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002f1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f20:	3308      	adds	r3, #8
 8002f22:	4618      	mov	r0, r3
 8002f24:	f001 fdec 	bl	8004b00 <RCCEx_PLL2_Config>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8002f2e:	e006      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002f36:	e002      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8002f38:	bf00      	nop
 8002f3a:	e000      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8002f3c:	bf00      	nop
    }
    if (ret == HAL_OK)
 8002f3e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10c      	bne.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8002f46:	4b3e      	ldr	r3, [pc, #248]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002f48:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002f4c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002f50:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f56:	4a3a      	ldr	r2, [pc, #232]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002f58:	430b      	orrs	r3, r1
 8002f5a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8002f5e:	e003      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f60:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002f64:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002f68:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f70:	2100      	movs	r1, #0
 8002f72:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002f74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002f7a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8002f7e:	460b      	mov	r3, r1
 8002f80:	4313      	orrs	r3, r2
 8002f82:	d00e      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8002f84:	4b2e      	ldr	r3, [pc, #184]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002f86:	69db      	ldr	r3, [r3, #28]
 8002f88:	4a2d      	ldr	r2, [pc, #180]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002f8a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002f8e:	61d3      	str	r3, [r2, #28]
 8002f90:	4b2b      	ldr	r3, [pc, #172]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002f92:	69d9      	ldr	r1, [r3, #28]
 8002f94:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f9c:	4a28      	ldr	r2, [pc, #160]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8002f9e:	430b      	orrs	r3, r1
 8002fa0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002fa2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002faa:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8002fae:	653b      	str	r3, [r7, #80]	@ 0x50
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	657b      	str	r3, [r7, #84]	@ 0x54
 8002fb4:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8002fb8:	460b      	mov	r3, r1
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	d046      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8002fbe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002fc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fc4:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8002fc8:	d021      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8002fca:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8002fce:	d81a      	bhi.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8002fd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fd4:	d01d      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002fd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fda:	d814      	bhi.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8002fdc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002fe0:	d019      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8002fe2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002fe6:	d80e      	bhi.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d016      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x58e>
 8002fec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ff0:	d109      	bne.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002ff2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002ff6:	3308      	adds	r3, #8
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f001 fd81 	bl	8004b00 <RCCEx_PLL2_Config>
 8002ffe:	4603      	mov	r3, r0
 8003000:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003004:	e00a      	b.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x590>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800300c:	e006      	b.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 800300e:	bf00      	nop
 8003010:	e004      	b.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8003012:	bf00      	nop
 8003014:	e002      	b.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8003016:	bf00      	nop
 8003018:	e000      	b.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 800301a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800301c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003020:	2b00      	cmp	r3, #0
 8003022:	d10f      	bne.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003024:	4b06      	ldr	r3, [pc, #24]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003026:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800302a:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800302e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003032:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003034:	4a02      	ldr	r2, [pc, #8]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003036:	430b      	orrs	r3, r1
 8003038:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800303c:	e006      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800303e:	bf00      	nop
 8003040:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003044:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003048:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800304c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003054:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003058:	64bb      	str	r3, [r7, #72]	@ 0x48
 800305a:	2300      	movs	r3, #0
 800305c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800305e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003062:	460b      	mov	r3, r1
 8003064:	4313      	orrs	r3, r2
 8003066:	d043      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x664>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8003068:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800306c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800306e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003072:	d021      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 8003074:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003078:	d81a      	bhi.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x624>
 800307a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800307e:	d01d      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x630>
 8003080:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003084:	d814      	bhi.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8003086:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800308a:	d019      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x634>
 800308c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003090:	d80e      	bhi.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8003092:	2b00      	cmp	r3, #0
 8003094:	d016      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x638>
 8003096:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800309a:	d109      	bne.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x624>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800309c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80030a0:	3308      	adds	r3, #8
 80030a2:	4618      	mov	r0, r3
 80030a4:	f001 fd2c 	bl	8004b00 <RCCEx_PLL2_Config>
 80030a8:	4603      	mov	r3, r0
 80030aa:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80030ae:	e00a      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80030b6:	e006      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80030b8:	bf00      	nop
 80030ba:	e004      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80030bc:	bf00      	nop
 80030be:	e002      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80030c0:	bf00      	nop
 80030c2:	e000      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80030c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030c6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10c      	bne.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80030ce:	4bb6      	ldr	r3, [pc, #728]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80030d0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80030d4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80030d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80030dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030de:	4ab2      	ldr	r2, [pc, #712]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80030e0:	430b      	orrs	r3, r1
 80030e2:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80030e6:	e003      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80030ec:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80030f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80030f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80030fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80030fe:	2300      	movs	r3, #0
 8003100:	647b      	str	r3, [r7, #68]	@ 0x44
 8003102:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003106:	460b      	mov	r3, r1
 8003108:	4313      	orrs	r3, r2
 800310a:	d030      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800310c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003110:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003112:	2b05      	cmp	r3, #5
 8003114:	d80f      	bhi.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 8003116:	2b03      	cmp	r3, #3
 8003118:	d211      	bcs.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 800311a:	2b01      	cmp	r3, #1
 800311c:	d911      	bls.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 800311e:	2b02      	cmp	r3, #2
 8003120:	d109      	bne.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003122:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003126:	3308      	adds	r3, #8
 8003128:	4618      	mov	r0, r3
 800312a:	f001 fce9 	bl	8004b00 <RCCEx_PLL2_Config>
 800312e:	4603      	mov	r3, r0
 8003130:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003134:	e006      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800313c:	e002      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 800313e:	bf00      	nop
 8003140:	e000      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8003142:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003144:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10c      	bne.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800314c:	4b96      	ldr	r3, [pc, #600]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800314e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003152:	f023 0107 	bic.w	r1, r3, #7
 8003156:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800315a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800315c:	4a92      	ldr	r2, [pc, #584]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800315e:	430b      	orrs	r3, r1
 8003160:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003164:	e003      	b.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003166:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800316a:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 800316e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003176:	2100      	movs	r1, #0
 8003178:	63b9      	str	r1, [r7, #56]	@ 0x38
 800317a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800317e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003180:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003184:	460b      	mov	r3, r1
 8003186:	4313      	orrs	r3, r2
 8003188:	d022      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x744>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 800318a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800318e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003190:	2b00      	cmp	r3, #0
 8003192:	d005      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x714>
 8003194:	2b08      	cmp	r3, #8
 8003196:	d005      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x718>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800319e:	e002      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 80031a0:	bf00      	nop
 80031a2:	e000      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 80031a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031a6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10c      	bne.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80031ae:	4b7e      	ldr	r3, [pc, #504]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80031b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80031b4:	f023 0108 	bic.w	r1, r3, #8
 80031b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80031bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80031be:	4a7a      	ldr	r2, [pc, #488]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80031c0:	430b      	orrs	r3, r1
 80031c2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80031c6:	e003      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031c8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80031cc:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80031d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80031dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80031de:	2300      	movs	r3, #0
 80031e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80031e2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80031e6:	460b      	mov	r3, r1
 80031e8:	4313      	orrs	r3, r2
 80031ea:	f000 80b0 	beq.w	800334e <HAL_RCCEx_PeriphCLKConfig+0x8c2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80031ee:	4b6f      	ldr	r3, [pc, #444]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0x920>)
 80031f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f2:	4a6e      	ldr	r2, [pc, #440]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0x920>)
 80031f4:	f043 0301 	orr.w	r3, r3, #1
 80031f8:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031fa:	f7fd fe69 	bl	8000ed0 <HAL_GetTick>
 80031fe:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003202:	e00b      	b.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x790>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003204:	f7fd fe64 	bl	8000ed0 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	2b02      	cmp	r3, #2
 8003212:	d903      	bls.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x790>
      {
        ret = HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800321a:	e005      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800321c:	4b63      	ldr	r3, [pc, #396]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0x920>)
 800321e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	2b00      	cmp	r3, #0
 8003226:	d0ed      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x778>
      }
    }

    if (ret == HAL_OK)
 8003228:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800322c:	2b00      	cmp	r3, #0
 800322e:	f040 808a 	bne.w	8003346 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003232:	4b5d      	ldr	r3, [pc, #372]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003234:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003238:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800323c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003240:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003244:	2b00      	cmp	r3, #0
 8003246:	d022      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x802>
 8003248:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800324c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800324e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8003252:	429a      	cmp	r2, r3
 8003254:	d01b      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x802>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003256:	4b54      	ldr	r3, [pc, #336]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003258:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800325c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003260:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003264:	4b50      	ldr	r3, [pc, #320]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003266:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800326a:	4a4f      	ldr	r2, [pc, #316]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800326c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003270:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003274:	4b4c      	ldr	r3, [pc, #304]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003276:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800327a:	4a4b      	ldr	r2, [pc, #300]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800327c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003280:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003284:	4a48      	ldr	r2, [pc, #288]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003286:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800328a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800328e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	2b00      	cmp	r3, #0
 8003298:	d019      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x842>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329a:	f7fd fe19 	bl	8000ed0 <HAL_GetTick>
 800329e:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032a2:	e00d      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a4:	f7fd fe14 	bl	8000ed0 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d903      	bls.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x834>
          {
            ret = HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
            break;
 80032be:	e006      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x842>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032c0:	4b39      	ldr	r3, [pc, #228]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80032c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d0ea      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x818>
          }
        }
      }

      if (ret == HAL_OK)
 80032ce:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d132      	bne.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80032d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80032dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032e4:	d10f      	bne.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x87a>
 80032e6:	4b30      	ldr	r3, [pc, #192]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80032e8:	69db      	ldr	r3, [r3, #28]
 80032ea:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80032ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80032f4:	091b      	lsrs	r3, r3, #4
 80032f6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80032fa:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80032fe:	4a2a      	ldr	r2, [pc, #168]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003300:	430b      	orrs	r3, r1
 8003302:	61d3      	str	r3, [r2, #28]
 8003304:	e005      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x886>
 8003306:	4b28      	ldr	r3, [pc, #160]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	4a27      	ldr	r2, [pc, #156]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800330c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003310:	61d3      	str	r3, [r2, #28]
 8003312:	4b25      	ldr	r3, [pc, #148]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003314:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003318:	4a23      	ldr	r2, [pc, #140]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800331a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800331e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003322:	4b21      	ldr	r3, [pc, #132]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003324:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8003328:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800332c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800332e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003332:	4a1d      	ldr	r2, [pc, #116]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003334:	430b      	orrs	r3, r1
 8003336:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800333a:	e008      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800333c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003340:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
 8003344:	e003      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003346:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800334a:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800334e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003356:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800335a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800335c:	2300      	movs	r3, #0
 800335e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003360:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003364:	460b      	mov	r3, r1
 8003366:	4313      	orrs	r3, r2
 8003368:	d038      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x950>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800336a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800336e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003370:	2b30      	cmp	r3, #48	@ 0x30
 8003372:	d014      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x912>
 8003374:	2b30      	cmp	r3, #48	@ 0x30
 8003376:	d80e      	bhi.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8003378:	2b20      	cmp	r3, #32
 800337a:	d012      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x916>
 800337c:	2b20      	cmp	r3, #32
 800337e:	d80a      	bhi.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8003380:	2b00      	cmp	r3, #0
 8003382:	d015      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003384:	2b10      	cmp	r3, #16
 8003386:	d106      	bne.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x90a>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003388:	4b07      	ldr	r3, [pc, #28]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800338a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800338c:	4a06      	ldr	r2, [pc, #24]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800338e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003392:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8003394:	e00d      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x926>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800339c:	e009      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 800339e:	bf00      	nop
 80033a0:	e007      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 80033a2:	bf00      	nop
 80033a4:	e005      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x926>
 80033a6:	bf00      	nop
 80033a8:	44020c00 	.word	0x44020c00
 80033ac:	44020800 	.word	0x44020800
        break;
 80033b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033b2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10c      	bne.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80033ba:	4bb5      	ldr	r3, [pc, #724]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80033bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80033c0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80033c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033ca:	49b1      	ldr	r1, [pc, #708]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 80033d2:	e003      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033d4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80033d8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80033dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e4:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80033e8:	623b      	str	r3, [r7, #32]
 80033ea:	2300      	movs	r3, #0
 80033ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80033ee:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80033f2:	460b      	mov	r3, r1
 80033f4:	4313      	orrs	r3, r2
 80033f6:	d03c      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80033f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033fe:	2b04      	cmp	r3, #4
 8003400:	d81d      	bhi.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 8003402:	a201      	add	r2, pc, #4	@ (adr r2, 8003408 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8003404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003408:	0800341d 	.word	0x0800341d
 800340c:	0800342b 	.word	0x0800342b
 8003410:	0800343f 	.word	0x0800343f
 8003414:	08003447 	.word	0x08003447
 8003418:	08003447 	.word	0x08003447
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800341c:	4b9c      	ldr	r3, [pc, #624]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800341e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003420:	4a9b      	ldr	r2, [pc, #620]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003422:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003426:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003428:	e00e      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x9bc>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800342a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800342e:	3308      	adds	r3, #8
 8003430:	4618      	mov	r0, r3
 8003432:	f001 fb65 	bl	8004b00 <RCCEx_PLL2_Config>
 8003436:	4603      	mov	r3, r0
 8003438:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800343c:	e004      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003444:	e000      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        break;
 8003446:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003448:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10c      	bne.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x9de>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8003450:	4b8f      	ldr	r3, [pc, #572]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003456:	f023 0207 	bic.w	r2, r3, #7
 800345a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800345e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003460:	498b      	ldr	r1, [pc, #556]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003462:	4313      	orrs	r3, r2
 8003464:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003468:	e003      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800346a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800346e:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8003472:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800347a:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800347e:	61bb      	str	r3, [r7, #24]
 8003480:	2300      	movs	r3, #0
 8003482:	61fb      	str	r3, [r7, #28]
 8003484:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003488:	460b      	mov	r3, r1
 800348a:	4313      	orrs	r3, r2
 800348c:	d03c      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800348e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003492:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003494:	2b20      	cmp	r3, #32
 8003496:	d01f      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8003498:	2b20      	cmp	r3, #32
 800349a:	d819      	bhi.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 800349c:	2b18      	cmp	r3, #24
 800349e:	d01d      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0xa50>
 80034a0:	2b18      	cmp	r3, #24
 80034a2:	d815      	bhi.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d002      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0xa22>
 80034a8:	2b08      	cmp	r3, #8
 80034aa:	d007      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80034ac:	e010      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xa44>
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034ae:	4b78      	ldr	r3, [pc, #480]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80034b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034b2:	4a77      	ldr	r2, [pc, #476]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80034b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034b8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80034ba:	e010      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0xa52>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80034bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034c0:	3308      	adds	r3, #8
 80034c2:	4618      	mov	r0, r3
 80034c4:	f001 fb1c 	bl	8004b00 <RCCEx_PLL2_Config>
 80034c8:	4603      	mov	r3, r0
 80034ca:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80034ce:	e006      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0xa52>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80034d6:	e002      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 80034d8:	bf00      	nop
 80034da:	e000      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 80034dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034de:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10c      	bne.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xa74>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80034e6:	4b6a      	ldr	r3, [pc, #424]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80034e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034ec:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80034f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034f6:	4966      	ldr	r1, [pc, #408]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80034fe:	e003      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003500:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003504:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003508:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800350c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003510:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003514:	613b      	str	r3, [r7, #16]
 8003516:	2300      	movs	r3, #0
 8003518:	617b      	str	r3, [r7, #20]
 800351a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800351e:	460b      	mov	r3, r1
 8003520:	4313      	orrs	r3, r2
 8003522:	d03e      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8003524:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003528:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800352a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800352e:	d020      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xae6>
 8003530:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003534:	d819      	bhi.n	800356a <HAL_RCCEx_PeriphCLKConfig+0xade>
 8003536:	2bc0      	cmp	r3, #192	@ 0xc0
 8003538:	d01d      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0xaea>
 800353a:	2bc0      	cmp	r3, #192	@ 0xc0
 800353c:	d815      	bhi.n	800356a <HAL_RCCEx_PeriphCLKConfig+0xade>
 800353e:	2b00      	cmp	r3, #0
 8003540:	d002      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xabc>
 8003542:	2b40      	cmp	r3, #64	@ 0x40
 8003544:	d007      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8003546:	e010      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003548:	4b51      	ldr	r3, [pc, #324]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800354a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800354c:	4a50      	ldr	r2, [pc, #320]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800354e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003552:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003554:	e010      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xaec>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003556:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800355a:	3308      	adds	r3, #8
 800355c:	4618      	mov	r0, r3
 800355e:	f001 facf 	bl	8004b00 <RCCEx_PLL2_Config>
 8003562:	4603      	mov	r3, r0
 8003564:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003568:	e006      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003570:	e002      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8003572:	bf00      	nop
 8003574:	e000      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8003576:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003578:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800357c:	2b00      	cmp	r3, #0
 800357e:	d10c      	bne.n	800359a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8003580:	4b43      	ldr	r3, [pc, #268]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003586:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 800358a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800358e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003590:	493f      	ldr	r1, [pc, #252]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003592:	4313      	orrs	r3, r2
 8003594:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003598:	e003      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800359a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800359e:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80035a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035aa:	2100      	movs	r1, #0
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	f003 0304 	and.w	r3, r3, #4
 80035b2:	60fb      	str	r3, [r7, #12]
 80035b4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80035b8:	460b      	mov	r3, r1
 80035ba:	4313      	orrs	r3, r2
 80035bc:	d038      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xba4>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 80035be:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035c8:	d00e      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 80035ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035ce:	d815      	bhi.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0xb70>
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d017      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0xb78>
 80035d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035d8:	d110      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0xb70>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035da:	4b2d      	ldr	r3, [pc, #180]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80035dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035de:	4a2c      	ldr	r2, [pc, #176]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80035e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035e4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80035e6:	e00e      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80035e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035ec:	3308      	adds	r3, #8
 80035ee:	4618      	mov	r0, r3
 80035f0:	f001 fa86 	bl	8004b00 <RCCEx_PLL2_Config>
 80035f4:	4603      	mov	r3, r0
 80035f6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80035fa:	e004      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      default:
        ret = HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003602:	e000      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        break;
 8003604:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003606:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10c      	bne.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 800360e:	4b20      	ldr	r3, [pc, #128]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003610:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003614:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003618:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800361c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800361e:	491c      	ldr	r1, [pc, #112]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003620:	4313      	orrs	r3, r2
 8003622:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8003626:	e003      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003628:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800362c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003630:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003638:	2100      	movs	r1, #0
 800363a:	6039      	str	r1, [r7, #0]
 800363c:	f003 0310 	and.w	r3, r3, #16
 8003640:	607b      	str	r3, [r7, #4]
 8003642:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003646:	460b      	mov	r3, r1
 8003648:	4313      	orrs	r3, r2
 800364a:	d039      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 800364c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003650:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003652:	2b30      	cmp	r3, #48	@ 0x30
 8003654:	d01e      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8003656:	2b30      	cmp	r3, #48	@ 0x30
 8003658:	d815      	bhi.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 800365a:	2b10      	cmp	r3, #16
 800365c:	d002      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 800365e:	2b20      	cmp	r3, #32
 8003660:	d007      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 8003662:	e010      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003664:	4b0a      	ldr	r3, [pc, #40]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003668:	4a09      	ldr	r2, [pc, #36]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800366a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800366e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8003670:	e011      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003672:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003676:	3308      	adds	r3, #8
 8003678:	4618      	mov	r0, r3
 800367a:	f001 fa41 	bl	8004b00 <RCCEx_PLL2_Config>
 800367e:	4603      	mov	r3, r0
 8003680:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8003684:	e007      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800368c:	e003      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 800368e:	bf00      	nop
 8003690:	44020c00 	.word	0x44020c00
        break;
 8003694:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003696:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10c      	bne.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 800369e:	4b0c      	ldr	r3, [pc, #48]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80036a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80036a4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80036a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036ae:	4908      	ldr	r1, [pc, #32]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80036b6:	e003      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036b8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80036bc:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);

  }
#endif /* CEC */

  return status;
 80036c0:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	37a8      	adds	r7, #168	@ 0xa8
 80036c8:	46bd      	mov	sp, r7
 80036ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036ce:	bf00      	nop
 80036d0:	44020c00 	.word	0x44020c00

080036d4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b08b      	sub	sp, #44	@ 0x2c
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80036dc:	4bae      	ldr	r3, [pc, #696]	@ (8003998 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80036de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036e4:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80036e6:	4bac      	ldr	r3, [pc, #688]	@ (8003998 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80036e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ea:	f003 0303 	and.w	r3, r3, #3
 80036ee:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80036f0:	4ba9      	ldr	r3, [pc, #676]	@ (8003998 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80036f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f4:	0a1b      	lsrs	r3, r3, #8
 80036f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80036fa:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80036fc:	4ba6      	ldr	r3, [pc, #664]	@ (8003998 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80036fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003700:	091b      	lsrs	r3, r3, #4
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003708:	4ba3      	ldr	r3, [pc, #652]	@ (8003998 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800370a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800370c:	08db      	lsrs	r3, r3, #3
 800370e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	fb02 f303 	mul.w	r3, r2, r3
 8003718:	ee07 3a90 	vmov	s15, r3
 800371c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003720:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	2b00      	cmp	r3, #0
 8003728:	f000 8126 	beq.w	8003978 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	2b03      	cmp	r3, #3
 8003730:	d053      	beq.n	80037da <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	2b03      	cmp	r3, #3
 8003736:	d86f      	bhi.n	8003818 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d003      	beq.n	8003746 <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	2b02      	cmp	r3, #2
 8003742:	d02b      	beq.n	800379c <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8003744:	e068      	b.n	8003818 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003746:	4b94      	ldr	r3, [pc, #592]	@ (8003998 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	08db      	lsrs	r3, r3, #3
 800374c:	f003 0303 	and.w	r3, r3, #3
 8003750:	4a92      	ldr	r2, [pc, #584]	@ (800399c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8003752:	fa22 f303 	lsr.w	r3, r2, r3
 8003756:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	ee07 3a90 	vmov	s15, r3
 800375e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	ee07 3a90 	vmov	s15, r3
 8003768:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800376c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003770:	6a3b      	ldr	r3, [r7, #32]
 8003772:	ee07 3a90 	vmov	s15, r3
 8003776:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800377a:	ed97 6a04 	vldr	s12, [r7, #16]
 800377e:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80039a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003782:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003786:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800378a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800378e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003796:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800379a:	e068      	b.n	800386e <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	ee07 3a90 	vmov	s15, r3
 80037a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037a6:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80039a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 80037aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037ae:	6a3b      	ldr	r3, [r7, #32]
 80037b0:	ee07 3a90 	vmov	s15, r3
 80037b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037b8:	ed97 6a04 	vldr	s12, [r7, #16]
 80037bc:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80039a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80037c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80037cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037d4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80037d8:	e049      	b.n	800386e <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	ee07 3a90 	vmov	s15, r3
 80037e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037e4:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80039a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 80037e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037ec:	6a3b      	ldr	r3, [r7, #32]
 80037ee:	ee07 3a90 	vmov	s15, r3
 80037f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037f6:	ed97 6a04 	vldr	s12, [r7, #16]
 80037fa:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80039a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80037fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003806:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800380a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800380e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003812:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8003816:	e02a      	b.n	800386e <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003818:	4b5f      	ldr	r3, [pc, #380]	@ (8003998 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	08db      	lsrs	r3, r3, #3
 800381e:	f003 0303 	and.w	r3, r3, #3
 8003822:	4a5e      	ldr	r2, [pc, #376]	@ (800399c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8003824:	fa22 f303 	lsr.w	r3, r2, r3
 8003828:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	ee07 3a90 	vmov	s15, r3
 8003830:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	ee07 3a90 	vmov	s15, r3
 800383a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800383e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003842:	6a3b      	ldr	r3, [r7, #32]
 8003844:	ee07 3a90 	vmov	s15, r3
 8003848:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800384c:	ed97 6a04 	vldr	s12, [r7, #16]
 8003850:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80039a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003854:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003858:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800385c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003860:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003864:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003868:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800386c:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800386e:	4b4a      	ldr	r3, [pc, #296]	@ (8003998 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003876:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800387a:	d121      	bne.n	80038c0 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800387c:	4b46      	ldr	r3, [pc, #280]	@ (8003998 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800387e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003880:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d017      	beq.n	80038b8 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003888:	4b43      	ldr	r3, [pc, #268]	@ (8003998 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800388a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800388c:	0a5b      	lsrs	r3, r3, #9
 800388e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003892:	ee07 3a90 	vmov	s15, r3
 8003896:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 800389a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800389e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80038a2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80038a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038ae:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	601a      	str	r2, [r3, #0]
 80038b6:	e006      	b.n	80038c6 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	601a      	str	r2, [r3, #0]
 80038be:	e002      	b.n	80038c6 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80038c6:	4b34      	ldr	r3, [pc, #208]	@ (8003998 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80038d2:	d121      	bne.n	8003918 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80038d4:	4b30      	ldr	r3, [pc, #192]	@ (8003998 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80038d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d017      	beq.n	8003910 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80038e0:	4b2d      	ldr	r3, [pc, #180]	@ (8003998 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80038e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038e4:	0c1b      	lsrs	r3, r3, #16
 80038e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038ea:	ee07 3a90 	vmov	s15, r3
 80038ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 80038f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80038f6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80038fa:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80038fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003902:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003906:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	605a      	str	r2, [r3, #4]
 800390e:	e006      	b.n	800391e <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	605a      	str	r2, [r3, #4]
 8003916:	e002      	b.n	800391e <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800391e:	4b1e      	ldr	r3, [pc, #120]	@ (8003998 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003926:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800392a:	d121      	bne.n	8003970 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800392c:	4b1a      	ldr	r3, [pc, #104]	@ (8003998 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800392e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003930:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d017      	beq.n	8003968 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003938:	4b17      	ldr	r3, [pc, #92]	@ (8003998 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800393a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800393c:	0e1b      	lsrs	r3, r3, #24
 800393e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003942:	ee07 3a90 	vmov	s15, r3
 8003946:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 800394a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800394e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8003952:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003956:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800395a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800395e:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8003966:	e010      	b.n	800398a <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	609a      	str	r2, [r3, #8]
}
 800396e:	e00c      	b.n	800398a <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	609a      	str	r2, [r3, #8]
}
 8003976:	e008      	b.n	800398a <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	609a      	str	r2, [r3, #8]
}
 800398a:	bf00      	nop
 800398c:	372c      	adds	r7, #44	@ 0x2c
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	44020c00 	.word	0x44020c00
 800399c:	03d09000 	.word	0x03d09000
 80039a0:	46000000 	.word	0x46000000
 80039a4:	4a742400 	.word	0x4a742400
 80039a8:	4bbebc20 	.word	0x4bbebc20

080039ac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b08b      	sub	sp, #44	@ 0x2c
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80039b4:	4bae      	ldr	r3, [pc, #696]	@ (8003c70 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80039b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039bc:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80039be:	4bac      	ldr	r3, [pc, #688]	@ (8003c70 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80039c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039c2:	f003 0303 	and.w	r3, r3, #3
 80039c6:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 80039c8:	4ba9      	ldr	r3, [pc, #676]	@ (8003c70 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80039ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039cc:	0a1b      	lsrs	r3, r3, #8
 80039ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039d2:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80039d4:	4ba6      	ldr	r3, [pc, #664]	@ (8003c70 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80039d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039d8:	091b      	lsrs	r3, r3, #4
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80039e0:	4ba3      	ldr	r3, [pc, #652]	@ (8003c70 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80039e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e4:	08db      	lsrs	r3, r3, #3
 80039e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	fb02 f303 	mul.w	r3, r2, r3
 80039f0:	ee07 3a90 	vmov	s15, r3
 80039f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039f8:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	f000 8126 	beq.w	8003c50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	2b03      	cmp	r3, #3
 8003a08:	d053      	beq.n	8003ab2 <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	2b03      	cmp	r3, #3
 8003a0e:	d86f      	bhi.n	8003af0 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d003      	beq.n	8003a1e <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d02b      	beq.n	8003a74 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8003a1c:	e068      	b.n	8003af0 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003a1e:	4b94      	ldr	r3, [pc, #592]	@ (8003c70 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	08db      	lsrs	r3, r3, #3
 8003a24:	f003 0303 	and.w	r3, r3, #3
 8003a28:	4a92      	ldr	r2, [pc, #584]	@ (8003c74 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8003a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a2e:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	ee07 3a90 	vmov	s15, r3
 8003a36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	ee07 3a90 	vmov	s15, r3
 8003a40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a48:	6a3b      	ldr	r3, [r7, #32]
 8003a4a:	ee07 3a90 	vmov	s15, r3
 8003a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a52:	ed97 6a04 	vldr	s12, [r7, #16]
 8003a56:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8003c78 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8003a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a6e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8003a72:	e068      	b.n	8003b46 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	ee07 3a90 	vmov	s15, r3
 8003a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a7e:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8003c7c <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8003a82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a86:	6a3b      	ldr	r3, [r7, #32]
 8003a88:	ee07 3a90 	vmov	s15, r3
 8003a8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a90:	ed97 6a04 	vldr	s12, [r7, #16]
 8003a94:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003c78 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8003a98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aa0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003aa4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003aa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aac:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8003ab0:	e049      	b.n	8003b46 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	ee07 3a90 	vmov	s15, r3
 8003ab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003abc:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8003c80 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8003ac0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ac4:	6a3b      	ldr	r3, [r7, #32]
 8003ac6:	ee07 3a90 	vmov	s15, r3
 8003aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ace:	ed97 6a04 	vldr	s12, [r7, #16]
 8003ad2:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8003c78 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8003ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ade:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aea:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8003aee:	e02a      	b.n	8003b46 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003af0:	4b5f      	ldr	r3, [pc, #380]	@ (8003c70 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	08db      	lsrs	r3, r3, #3
 8003af6:	f003 0303 	and.w	r3, r3, #3
 8003afa:	4a5e      	ldr	r2, [pc, #376]	@ (8003c74 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8003afc:	fa22 f303 	lsr.w	r3, r2, r3
 8003b00:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	ee07 3a90 	vmov	s15, r3
 8003b08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	ee07 3a90 	vmov	s15, r3
 8003b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b1a:	6a3b      	ldr	r3, [r7, #32]
 8003b1c:	ee07 3a90 	vmov	s15, r3
 8003b20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b24:	ed97 6a04 	vldr	s12, [r7, #16]
 8003b28:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8003c78 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8003b2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b34:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b40:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8003b44:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003b46:	4b4a      	ldr	r3, [pc, #296]	@ (8003c70 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b52:	d121      	bne.n	8003b98 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8003b54:	4b46      	ldr	r3, [pc, #280]	@ (8003c70 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d017      	beq.n	8003b90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003b60:	4b43      	ldr	r3, [pc, #268]	@ (8003c70 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003b62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b64:	0a5b      	lsrs	r3, r3, #9
 8003b66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b6a:	ee07 3a90 	vmov	s15, r3
 8003b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8003b72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003b76:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8003b7a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003b7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b86:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	601a      	str	r2, [r3, #0]
 8003b8e:	e006      	b.n	8003b9e <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	601a      	str	r2, [r3, #0]
 8003b96:	e002      	b.n	8003b9e <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003b9e:	4b34      	ldr	r3, [pc, #208]	@ (8003c70 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ba6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003baa:	d121      	bne.n	8003bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8003bac:	4b30      	ldr	r3, [pc, #192]	@ (8003c70 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d017      	beq.n	8003be8 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003bb8:	4b2d      	ldr	r3, [pc, #180]	@ (8003c70 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003bba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bbc:	0c1b      	lsrs	r3, r3, #16
 8003bbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003bc2:	ee07 3a90 	vmov	s15, r3
 8003bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8003bca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003bce:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8003bd2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003bd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bde:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	605a      	str	r2, [r3, #4]
 8003be6:	e006      	b.n	8003bf6 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	605a      	str	r2, [r3, #4]
 8003bee:	e002      	b.n	8003bf6 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003bf6:	4b1e      	ldr	r3, [pc, #120]	@ (8003c70 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003bfe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c02:	d121      	bne.n	8003c48 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8003c04:	4b1a      	ldr	r3, [pc, #104]	@ (8003c70 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d017      	beq.n	8003c40 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003c10:	4b17      	ldr	r3, [pc, #92]	@ (8003c70 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003c12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c14:	0e1b      	lsrs	r3, r3, #24
 8003c16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c1a:	ee07 3a90 	vmov	s15, r3
 8003c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8003c22:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c26:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8003c2a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003c2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c36:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003c3e:	e010      	b.n	8003c62 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	609a      	str	r2, [r3, #8]
}
 8003c46:	e00c      	b.n	8003c62 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	609a      	str	r2, [r3, #8]
}
 8003c4e:	e008      	b.n	8003c62 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	609a      	str	r2, [r3, #8]
}
 8003c62:	bf00      	nop
 8003c64:	372c      	adds	r7, #44	@ 0x2c
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	44020c00 	.word	0x44020c00
 8003c74:	03d09000 	.word	0x03d09000
 8003c78:	46000000 	.word	0x46000000
 8003c7c:	4a742400 	.word	0x4a742400
 8003c80:	4bbebc20 	.word	0x4bbebc20

08003c84 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b08c      	sub	sp, #48	@ 0x30
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8003c8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c92:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8003c96:	430b      	orrs	r3, r1
 8003c98:	d14b      	bne.n	8003d32 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003c9a:	4bc4      	ldr	r3, [pc, #784]	@ (8003fac <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003c9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ca0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ca4:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8003ca6:	4bc1      	ldr	r3, [pc, #772]	@ (8003fac <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003ca8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d108      	bne.n	8003cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8003cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cba:	d104      	bne.n	8003cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8003cbc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cc2:	f000 bf14 	b.w	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8003cc6:	4bb9      	ldr	r3, [pc, #740]	@ (8003fac <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003cc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ccc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003cd0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003cd4:	d108      	bne.n	8003ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8003cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cdc:	d104      	bne.n	8003ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8003cde:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ce4:	f000 bf03 	b.w	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8003ce8:	4bb0      	ldr	r3, [pc, #704]	@ (8003fac <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cf0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003cf4:	d119      	bne.n	8003d2a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8003cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cf8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cfc:	d115      	bne.n	8003d2a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8003cfe:	4bab      	ldr	r3, [pc, #684]	@ (8003fac <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003d00:	69db      	ldr	r3, [r3, #28]
 8003d02:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8003d06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d0a:	d30a      	bcc.n	8003d22 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8003d0c:	4ba7      	ldr	r3, [pc, #668]	@ (8003fac <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003d0e:	69db      	ldr	r3, [r3, #28]
 8003d10:	0a1b      	lsrs	r3, r3, #8
 8003d12:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d16:	4aa6      	ldr	r2, [pc, #664]	@ (8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 8003d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8003d1e:	f000 bee6 	b.w	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
      }
      else
      {
        frequency = 0U;
 8003d22:	2300      	movs	r3, #0
 8003d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8003d26:	f000 bee2 	b.w	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d2e:	f000 bede 	b.w	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8003d32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d36:	f5a3 5180 	sub.w	r1, r3, #4096	@ 0x1000
 8003d3a:	ea52 0301 	orrs.w	r3, r2, r1
 8003d3e:	f000 838e 	beq.w	800445e <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 8003d42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d46:	2a01      	cmp	r2, #1
 8003d48:	f573 5380 	sbcs.w	r3, r3, #4096	@ 0x1000
 8003d4c:	f080 86cc 	bcs.w	8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003d50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d54:	f5a3 7100 	sub.w	r1, r3, #512	@ 0x200
 8003d58:	ea52 0301 	orrs.w	r3, r2, r1
 8003d5c:	f000 82aa 	beq.w	80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8003d60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d64:	2a01      	cmp	r2, #1
 8003d66:	f573 7300 	sbcs.w	r3, r3, #512	@ 0x200
 8003d6a:	f080 86bd 	bcs.w	8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003d6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d72:	f1a3 0110 	sub.w	r1, r3, #16
 8003d76:	ea52 0301 	orrs.w	r3, r2, r1
 8003d7a:	f000 8681 	beq.w	8004a80 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 8003d7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d82:	2a01      	cmp	r2, #1
 8003d84:	f173 0310 	sbcs.w	r3, r3, #16
 8003d88:	f080 86ae 	bcs.w	8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003d8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d90:	1f19      	subs	r1, r3, #4
 8003d92:	ea52 0301 	orrs.w	r3, r2, r1
 8003d96:	f000 84b1 	beq.w	80046fc <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8003d9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d9e:	2a01      	cmp	r2, #1
 8003da0:	f173 0304 	sbcs.w	r3, r3, #4
 8003da4:	f080 86a0 	bcs.w	8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003da8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003dac:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 8003db0:	430b      	orrs	r3, r1
 8003db2:	f000 85aa 	beq.w	800490a <HAL_RCCEx_GetPeriphCLKFreq+0xc86>
 8003db6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003dba:	497e      	ldr	r1, [pc, #504]	@ (8003fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8003dbc:	428a      	cmp	r2, r1
 8003dbe:	f173 0300 	sbcs.w	r3, r3, #0
 8003dc2:	f080 8691 	bcs.w	8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003dc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003dca:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8003dce:	430b      	orrs	r3, r1
 8003dd0:	f000 8532 	beq.w	8004838 <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
 8003dd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003dd8:	4977      	ldr	r1, [pc, #476]	@ (8003fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 8003dda:	428a      	cmp	r2, r1
 8003ddc:	f173 0300 	sbcs.w	r3, r3, #0
 8003de0:	f080 8682 	bcs.w	8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003de4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003de8:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8003dec:	430b      	orrs	r3, r1
 8003dee:	f000 84bc 	beq.w	800476a <HAL_RCCEx_GetPeriphCLKFreq+0xae6>
 8003df2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003df6:	4971      	ldr	r1, [pc, #452]	@ (8003fbc <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8003df8:	428a      	cmp	r2, r1
 8003dfa:	f173 0300 	sbcs.w	r3, r3, #0
 8003dfe:	f080 8673 	bcs.w	8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003e02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e06:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8003e0a:	430b      	orrs	r3, r1
 8003e0c:	f000 85f2 	beq.w	80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd70>
 8003e10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e14:	496a      	ldr	r1, [pc, #424]	@ (8003fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 8003e16:	428a      	cmp	r2, r1
 8003e18:	f173 0300 	sbcs.w	r3, r3, #0
 8003e1c:	f080 8664 	bcs.w	8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003e20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e24:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8003e28:	430b      	orrs	r3, r1
 8003e2a:	f000 81e5 	beq.w	80041f8 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 8003e2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e32:	4964      	ldr	r1, [pc, #400]	@ (8003fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
 8003e34:	428a      	cmp	r2, r1
 8003e36:	f173 0300 	sbcs.w	r3, r3, #0
 8003e3a:	f080 8655 	bcs.w	8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003e3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e42:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8003e46:	430b      	orrs	r3, r1
 8003e48:	f000 83cc 	beq.w	80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003e4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e50:	495d      	ldr	r1, [pc, #372]	@ (8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 8003e52:	428a      	cmp	r2, r1
 8003e54:	f173 0300 	sbcs.w	r3, r3, #0
 8003e58:	f080 8646 	bcs.w	8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003e5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e60:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8003e64:	430b      	orrs	r3, r1
 8003e66:	f000 8331 	beq.w	80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x848>
 8003e6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e6e:	4957      	ldr	r1, [pc, #348]	@ (8003fcc <HAL_RCCEx_GetPeriphCLKFreq+0x348>)
 8003e70:	428a      	cmp	r2, r1
 8003e72:	f173 0300 	sbcs.w	r3, r3, #0
 8003e76:	f080 8637 	bcs.w	8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003e7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e7e:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8003e82:	430b      	orrs	r3, r1
 8003e84:	f000 82bb 	beq.w	80043fe <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
 8003e88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e8c:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 8003e90:	f173 0300 	sbcs.w	r3, r3, #0
 8003e94:	f080 8628 	bcs.w	8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003e98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e9c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8003ea0:	430b      	orrs	r3, r1
 8003ea2:	f000 826d 	beq.w	8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
 8003ea6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003eaa:	f244 0101 	movw	r1, #16385	@ 0x4001
 8003eae:	428a      	cmp	r2, r1
 8003eb0:	f173 0300 	sbcs.w	r3, r3, #0
 8003eb4:	f080 8618 	bcs.w	8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003eb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ebc:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8003ec0:	430b      	orrs	r3, r1
 8003ec2:	f000 821e 	beq.w	8004302 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 8003ec6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003eca:	f242 0101 	movw	r1, #8193	@ 0x2001
 8003ece:	428a      	cmp	r2, r1
 8003ed0:	f173 0300 	sbcs.w	r3, r3, #0
 8003ed4:	f080 8608 	bcs.w	8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003ed8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003edc:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8003ee0:	430b      	orrs	r3, r1
 8003ee2:	f000 8137 	beq.w	8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8003ee6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003eea:	f241 0101 	movw	r1, #4097	@ 0x1001
 8003eee:	428a      	cmp	r2, r1
 8003ef0:	f173 0300 	sbcs.w	r3, r3, #0
 8003ef4:	f080 85f8 	bcs.w	8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003ef8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003efc:	1f11      	subs	r1, r2, #4
 8003efe:	430b      	orrs	r3, r1
 8003f00:	f000 80d2 	beq.w	80040a8 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 8003f04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f08:	2a05      	cmp	r2, #5
 8003f0a:	f173 0300 	sbcs.w	r3, r3, #0
 8003f0e:	f080 85eb 	bcs.w	8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003f12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f16:	1e51      	subs	r1, r2, #1
 8003f18:	430b      	orrs	r3, r1
 8003f1a:	d006      	beq.n	8003f2a <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 8003f1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f20:	1e91      	subs	r1, r2, #2
 8003f22:	430b      	orrs	r3, r1
 8003f24:	d06c      	beq.n	8004000 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8003f26:	f000 bddf 	b.w	8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003f2a:	4b20      	ldr	r3, [pc, #128]	@ (8003fac <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003f2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003f30:	f003 0307 	and.w	r3, r3, #7
 8003f34:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8003f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d104      	bne.n	8003f46 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8003f3c:	f7fe fd7a 	bl	8002a34 <HAL_RCC_GetPCLK2Freq>
 8003f40:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8003f42:	f000 bdd4 	b.w	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8003f46:	4b19      	ldr	r3, [pc, #100]	@ (8003fac <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f52:	d10a      	bne.n	8003f6a <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
 8003f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d107      	bne.n	8003f6a <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003f5a:	f107 030c 	add.w	r3, r7, #12
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7ff fd24 	bl	80039ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f68:	e048      	b.n	8003ffc <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8003f6a:	4b10      	ldr	r3, [pc, #64]	@ (8003fac <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d10c      	bne.n	8003f90 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8003f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f78:	2b03      	cmp	r3, #3
 8003f7a:	d109      	bne.n	8003f90 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8003fac <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	08db      	lsrs	r3, r3, #3
 8003f82:	f003 0303 	and.w	r3, r3, #3
 8003f86:	4a12      	ldr	r2, [pc, #72]	@ (8003fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8003f88:	fa22 f303 	lsr.w	r3, r2, r3
 8003f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f8e:	e035      	b.n	8003ffc <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8003f90:	4b06      	ldr	r3, [pc, #24]	@ (8003fac <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f9c:	d11c      	bne.n	8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8003f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fa0:	2b04      	cmp	r3, #4
 8003fa2:	d119      	bne.n	8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
          frequency = CSI_VALUE;
 8003fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8003fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8003fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fa8:	e028      	b.n	8003ffc <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8003faa:	bf00      	nop
 8003fac:	44020c00 	.word	0x44020c00
 8003fb0:	017d7840 	.word	0x017d7840
 8003fb4:	20000001 	.word	0x20000001
 8003fb8:	10000001 	.word	0x10000001
 8003fbc:	08000001 	.word	0x08000001
 8003fc0:	04000001 	.word	0x04000001
 8003fc4:	00200001 	.word	0x00200001
 8003fc8:	00040001 	.word	0x00040001
 8003fcc:	00020001 	.word	0x00020001
 8003fd0:	03d09000 	.word	0x03d09000
 8003fd4:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8003fd8:	4b9f      	ldr	r3, [pc, #636]	@ (8004258 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003fda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d106      	bne.n	8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8003fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fe8:	2b05      	cmp	r3, #5
 8003fea:	d103      	bne.n	8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
          frequency = LSE_VALUE;
 8003fec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ff2:	e003      	b.n	8003ffc <HAL_RCCEx_GetPeriphCLKFreq+0x378>
          frequency = 0U;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003ff8:	f000 bd79 	b.w	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003ffc:	f000 bd77 	b.w	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004000:	4b95      	ldr	r3, [pc, #596]	@ (8004258 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004002:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004006:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800400a:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800400c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800400e:	2b00      	cmp	r3, #0
 8004010:	d104      	bne.n	800401c <HAL_RCCEx_GetPeriphCLKFreq+0x398>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004012:	f7fe fcf9 	bl	8002a08 <HAL_RCC_GetPCLK1Freq>
 8004016:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004018:	f000 bd69 	b.w	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 800401c:	4b8e      	ldr	r3, [pc, #568]	@ (8004258 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004024:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004028:	d10a      	bne.n	8004040 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 800402a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800402c:	2b08      	cmp	r3, #8
 800402e:	d107      	bne.n	8004040 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004030:	f107 030c 	add.w	r3, r7, #12
 8004034:	4618      	mov	r0, r3
 8004036:	f7ff fcb9 	bl	80039ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800403e:	e031      	b.n	80040a4 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8004040:	4b85      	ldr	r3, [pc, #532]	@ (8004258 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0302 	and.w	r3, r3, #2
 8004048:	2b02      	cmp	r3, #2
 800404a:	d10c      	bne.n	8004066 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800404c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800404e:	2b18      	cmp	r3, #24
 8004050:	d109      	bne.n	8004066 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004052:	4b81      	ldr	r3, [pc, #516]	@ (8004258 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	08db      	lsrs	r3, r3, #3
 8004058:	f003 0303 	and.w	r3, r3, #3
 800405c:	4a7f      	ldr	r2, [pc, #508]	@ (800425c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800405e:	fa22 f303 	lsr.w	r3, r2, r3
 8004062:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004064:	e01e      	b.n	80040a4 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8004066:	4b7c      	ldr	r3, [pc, #496]	@ (8004258 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800406e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004072:	d105      	bne.n	8004080 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8004074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004076:	2b20      	cmp	r3, #32
 8004078:	d102      	bne.n	8004080 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
          frequency = CSI_VALUE;
 800407a:	4b79      	ldr	r3, [pc, #484]	@ (8004260 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 800407c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800407e:	e011      	b.n	80040a4 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8004080:	4b75      	ldr	r3, [pc, #468]	@ (8004258 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004082:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b02      	cmp	r3, #2
 800408c:	d106      	bne.n	800409c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 800408e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004090:	2b28      	cmp	r3, #40	@ 0x28
 8004092:	d103      	bne.n	800409c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = LSE_VALUE;
 8004094:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004098:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800409a:	e003      	b.n	80040a4 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
          frequency = 0U;
 800409c:	2300      	movs	r3, #0
 800409e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80040a0:	f000 bd25 	b.w	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80040a4:	f000 bd23 	b.w	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80040a8:	4b6b      	ldr	r3, [pc, #428]	@ (8004258 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80040aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80040ae:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80040b2:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80040b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d104      	bne.n	80040c4 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80040ba:	f7fe fca5 	bl	8002a08 <HAL_RCC_GetPCLK1Freq>
 80040be:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 80040c0:	f000 bd15 	b.w	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 80040c4:	4b64      	ldr	r3, [pc, #400]	@ (8004258 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80040cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040d0:	d10a      	bne.n	80040e8 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
 80040d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040d4:	2b40      	cmp	r3, #64	@ 0x40
 80040d6:	d107      	bne.n	80040e8 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80040d8:	f107 030c 	add.w	r3, r7, #12
 80040dc:	4618      	mov	r0, r3
 80040de:	f7ff fc65 	bl	80039ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040e6:	e033      	b.n	8004150 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80040e8:	4b5b      	ldr	r3, [pc, #364]	@ (8004258 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d10c      	bne.n	800410e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80040f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80040f8:	d109      	bne.n	800410e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80040fa:	4b57      	ldr	r3, [pc, #348]	@ (8004258 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	08db      	lsrs	r3, r3, #3
 8004100:	f003 0303 	and.w	r3, r3, #3
 8004104:	4a55      	ldr	r2, [pc, #340]	@ (800425c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8004106:	fa22 f303 	lsr.w	r3, r2, r3
 800410a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800410c:	e020      	b.n	8004150 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 800410e:	4b52      	ldr	r3, [pc, #328]	@ (8004258 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004116:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800411a:	d106      	bne.n	800412a <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 800411c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800411e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004122:	d102      	bne.n	800412a <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          frequency = CSI_VALUE;
 8004124:	4b4e      	ldr	r3, [pc, #312]	@ (8004260 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8004126:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004128:	e012      	b.n	8004150 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800412a:	4b4b      	ldr	r3, [pc, #300]	@ (8004258 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800412c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b02      	cmp	r3, #2
 8004136:	d107      	bne.n	8004148 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8004138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800413a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800413e:	d103      	bne.n	8004148 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
          frequency = LSE_VALUE;
 8004140:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004144:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004146:	e003      	b.n	8004150 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          frequency = 0U;
 8004148:	2300      	movs	r3, #0
 800414a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800414c:	f000 bccf 	b.w	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004150:	f000 bccd 	b.w	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004154:	4b40      	ldr	r3, [pc, #256]	@ (8004258 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800415a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800415e:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8004160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004162:	2b00      	cmp	r3, #0
 8004164:	d104      	bne.n	8004170 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8004166:	f7fe fc7b 	bl	8002a60 <HAL_RCC_GetPCLK3Freq>
 800416a:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800416c:	f000 bcbf 	b.w	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8004170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004172:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004176:	d108      	bne.n	800418a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004178:	f107 030c 	add.w	r3, r7, #12
 800417c:	4618      	mov	r0, r3
 800417e:	f7ff fc15 	bl	80039ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004186:	f000 bcb2 	b.w	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800418a:	4b33      	ldr	r3, [pc, #204]	@ (8004258 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b02      	cmp	r3, #2
 8004194:	d10d      	bne.n	80041b2 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 8004196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004198:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800419c:	d109      	bne.n	80041b2 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800419e:	4b2e      	ldr	r3, [pc, #184]	@ (8004258 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	08db      	lsrs	r3, r3, #3
 80041a4:	f003 0303 	and.w	r3, r3, #3
 80041a8:	4a2c      	ldr	r2, [pc, #176]	@ (800425c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80041aa:	fa22 f303 	lsr.w	r3, r2, r3
 80041ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041b0:	e020      	b.n	80041f4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 80041b2:	4b29      	ldr	r3, [pc, #164]	@ (8004258 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041be:	d106      	bne.n	80041ce <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 80041c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041c2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80041c6:	d102      	bne.n	80041ce <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = CSI_VALUE;
 80041c8:	4b25      	ldr	r3, [pc, #148]	@ (8004260 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 80041ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041cc:	e012      	b.n	80041f4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80041ce:	4b22      	ldr	r3, [pc, #136]	@ (8004258 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80041d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d107      	bne.n	80041ec <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 80041dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041de:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80041e2:	d103      	bne.n	80041ec <HAL_RCCEx_GetPeriphCLKFreq+0x568>
          frequency = LSE_VALUE;
 80041e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041ea:	e003      	b.n	80041f4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
          frequency = 0U;
 80041ec:	2300      	movs	r3, #0
 80041ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80041f0:	f000 bc7d 	b.w	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80041f4:	f000 bc7b 	b.w	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80041f8:	4b17      	ldr	r3, [pc, #92]	@ (8004258 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80041fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80041fe:	f003 0307 	and.w	r3, r3, #7
 8004202:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8004204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004206:	2b00      	cmp	r3, #0
 8004208:	d104      	bne.n	8004214 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 800420a:	f7fe fbe1 	bl	80029d0 <HAL_RCC_GetHCLKFreq>
 800420e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8004210:	f000 bc6d 	b.w	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8004214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004216:	2b01      	cmp	r3, #1
 8004218:	d104      	bne.n	8004224 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          frequency = HAL_RCC_GetSysClockFreq();
 800421a:	f7fe faad 	bl	8002778 <HAL_RCC_GetSysClockFreq>
 800421e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        break;
 8004220:	f000 bc65 	b.w	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8004224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004226:	2b02      	cmp	r3, #2
 8004228:	d108      	bne.n	800423c <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800422a:	f107 030c 	add.w	r3, r7, #12
 800422e:	4618      	mov	r0, r3
 8004230:	f7ff fbbc 	bl	80039ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004238:	f000 bc59 	b.w	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800423c:	4b06      	ldr	r3, [pc, #24]	@ (8004258 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004244:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004248:	d10e      	bne.n	8004268 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800424a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800424c:	2b03      	cmp	r3, #3
 800424e:	d10b      	bne.n	8004268 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
          frequency = HSE_VALUE;
 8004250:	4b04      	ldr	r3, [pc, #16]	@ (8004264 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8004252:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004254:	e02c      	b.n	80042b0 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
 8004256:	bf00      	nop
 8004258:	44020c00 	.word	0x44020c00
 800425c:	03d09000 	.word	0x03d09000
 8004260:	003d0900 	.word	0x003d0900
 8004264:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8004268:	4b95      	ldr	r3, [pc, #596]	@ (80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b02      	cmp	r3, #2
 8004272:	d10c      	bne.n	800428e <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
 8004274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004276:	2b04      	cmp	r3, #4
 8004278:	d109      	bne.n	800428e <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800427a:	4b91      	ldr	r3, [pc, #580]	@ (80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	08db      	lsrs	r3, r3, #3
 8004280:	f003 0303 	and.w	r3, r3, #3
 8004284:	4a8f      	ldr	r2, [pc, #572]	@ (80044c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004286:	fa22 f303 	lsr.w	r3, r2, r3
 800428a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800428c:	e010      	b.n	80042b0 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 800428e:	4b8c      	ldr	r3, [pc, #560]	@ (80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004296:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800429a:	d105      	bne.n	80042a8 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 800429c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800429e:	2b05      	cmp	r3, #5
 80042a0:	d102      	bne.n	80042a8 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          frequency = CSI_VALUE;
 80042a2:	4b89      	ldr	r3, [pc, #548]	@ (80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80042a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042a6:	e003      	b.n	80042b0 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
          frequency = 0U;
 80042a8:	2300      	movs	r3, #0
 80042aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80042ac:	f000 bc1f 	b.w	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80042b0:	f000 bc1d 	b.w	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 80042b4:	4b82      	ldr	r3, [pc, #520]	@ (80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80042b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80042ba:	f003 0308 	and.w	r3, r3, #8
 80042be:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 80042c0:	4b7f      	ldr	r3, [pc, #508]	@ (80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80042c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d106      	bne.n	80042dc <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 80042ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d103      	bne.n	80042dc <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        {
          frequency = LSE_VALUE;
 80042d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042da:	e011      	b.n	8004300 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 80042dc:	4b78      	ldr	r3, [pc, #480]	@ (80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80042de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80042e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042ea:	d106      	bne.n	80042fa <HAL_RCCEx_GetPeriphCLKFreq+0x676>
 80042ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ee:	2b08      	cmp	r3, #8
 80042f0:	d103      	bne.n	80042fa <HAL_RCCEx_GetPeriphCLKFreq+0x676>
        {
          frequency = LSI_VALUE;
 80042f2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80042f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042f8:	e002      	b.n	8004300 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 80042fa:	2300      	movs	r3, #0
 80042fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 80042fe:	e3f6      	b.n	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004300:	e3f5      	b.n	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004302:	4b6f      	ldr	r3, [pc, #444]	@ (80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004304:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004308:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800430c:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800430e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004310:	2b00      	cmp	r3, #0
 8004312:	d103      	bne.n	800431c <HAL_RCCEx_GetPeriphCLKFreq+0x698>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004314:	f7fe fb78 	bl	8002a08 <HAL_RCC_GetPCLK1Freq>
 8004318:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800431a:	e3e8      	b.n	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL2R)
 800431c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800431e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004322:	d107      	bne.n	8004334 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004324:	f107 030c 	add.w	r3, r7, #12
 8004328:	4618      	mov	r0, r3
 800432a:	f7ff fb3f 	bl	80039ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004332:	e3dc      	b.n	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8004334:	4b62      	ldr	r3, [pc, #392]	@ (80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0302 	and.w	r3, r3, #2
 800433c:	2b02      	cmp	r3, #2
 800433e:	d10d      	bne.n	800435c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8004340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004342:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004346:	d109      	bne.n	800435c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004348:	4b5d      	ldr	r3, [pc, #372]	@ (80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	08db      	lsrs	r3, r3, #3
 800434e:	f003 0303 	and.w	r3, r3, #3
 8004352:	4a5c      	ldr	r2, [pc, #368]	@ (80044c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004354:	fa22 f303 	lsr.w	r3, r2, r3
 8004358:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800435a:	e010      	b.n	800437e <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 800435c:	4b58      	ldr	r3, [pc, #352]	@ (80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004364:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004368:	d106      	bne.n	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 800436a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800436c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004370:	d102      	bne.n	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
          frequency = CSI_VALUE;
 8004372:	4b55      	ldr	r3, [pc, #340]	@ (80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004374:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004376:	e002      	b.n	800437e <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
          frequency = 0U;
 8004378:	2300      	movs	r3, #0
 800437a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800437c:	e3b7      	b.n	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800437e:	e3b6      	b.n	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004380:	4b4f      	ldr	r3, [pc, #316]	@ (80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004382:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004386:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800438a:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800438c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800438e:	2b00      	cmp	r3, #0
 8004390:	d103      	bne.n	800439a <HAL_RCCEx_GetPeriphCLKFreq+0x716>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004392:	f7fe fb39 	bl	8002a08 <HAL_RCC_GetPCLK1Freq>
 8004396:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004398:	e3a9      	b.n	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL2R)
 800439a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800439c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80043a0:	d107      	bne.n	80043b2 <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80043a2:	f107 030c 	add.w	r3, r7, #12
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7ff fb00 	bl	80039ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80043b0:	e39d      	b.n	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80043b2:	4b43      	ldr	r3, [pc, #268]	@ (80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d10d      	bne.n	80043da <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 80043be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043c0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80043c4:	d109      	bne.n	80043da <HAL_RCCEx_GetPeriphCLKFreq+0x756>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80043c6:	4b3e      	ldr	r3, [pc, #248]	@ (80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	08db      	lsrs	r3, r3, #3
 80043cc:	f003 0303 	and.w	r3, r3, #3
 80043d0:	4a3c      	ldr	r2, [pc, #240]	@ (80044c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80043d2:	fa22 f303 	lsr.w	r3, r2, r3
 80043d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043d8:	e010      	b.n	80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x778>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 80043da:	4b39      	ldr	r3, [pc, #228]	@ (80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043e6:	d106      	bne.n	80043f6 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 80043e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ea:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80043ee:	d102      	bne.n	80043f6 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          frequency = CSI_VALUE;
 80043f0:	4b35      	ldr	r3, [pc, #212]	@ (80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80043f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043f4:	e002      	b.n	80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = 0U;
 80043f6:	2300      	movs	r3, #0
 80043f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80043fa:	e378      	b.n	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80043fc:	e377      	b.n	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 80043fe:	4b30      	ldr	r3, [pc, #192]	@ (80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004400:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004404:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8004408:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 800440a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800440c:	2b00      	cmp	r3, #0
 800440e:	d103      	bne.n	8004418 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004410:	f7fe fafa 	bl	8002a08 <HAL_RCC_GetPCLK1Freq>
 8004414:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004416:	e36a      	b.n	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL2R)
 8004418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800441a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800441e:	d107      	bne.n	8004430 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004420:	f107 030c 	add.w	r3, r7, #12
 8004424:	4618      	mov	r0, r3
 8004426:	f7ff fac1 	bl	80039ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800442e:	e35e      	b.n	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8004430:	4b23      	ldr	r3, [pc, #140]	@ (80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b02      	cmp	r3, #2
 800443a:	d10d      	bne.n	8004458 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
 800443c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800443e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004442:	d109      	bne.n	8004458 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004444:	4b1e      	ldr	r3, [pc, #120]	@ (80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	08db      	lsrs	r3, r3, #3
 800444a:	f003 0303 	and.w	r3, r3, #3
 800444e:	4a1d      	ldr	r2, [pc, #116]	@ (80044c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004450:	fa22 f303 	lsr.w	r3, r2, r3
 8004454:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004456:	e34a      	b.n	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8004458:	2300      	movs	r3, #0
 800445a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800445c:	e347      	b.n	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 800445e:	4b18      	ldr	r3, [pc, #96]	@ (80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004460:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004464:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8004468:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 800446a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800446c:	2b00      	cmp	r3, #0
 800446e:	d103      	bne.n	8004478 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8004470:	f7fe faf6 	bl	8002a60 <HAL_RCC_GetPCLK3Freq>
 8004474:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004476:	e33a      	b.n	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL2R)
 8004478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800447a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800447e:	d107      	bne.n	8004490 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004480:	f107 030c 	add.w	r3, r7, #12
 8004484:	4618      	mov	r0, r3
 8004486:	f7ff fa91 	bl	80039ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800448e:	e32e      	b.n	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8004490:	4b0b      	ldr	r3, [pc, #44]	@ (80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b02      	cmp	r3, #2
 800449a:	d10d      	bne.n	80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 800449c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800449e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044a2:	d109      	bne.n	80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80044a4:	4b06      	ldr	r3, [pc, #24]	@ (80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	08db      	lsrs	r3, r3, #3
 80044aa:	f003 0303 	and.w	r3, r3, #3
 80044ae:	4a05      	ldr	r2, [pc, #20]	@ (80044c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80044b0:	fa22 f303 	lsr.w	r3, r2, r3
 80044b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80044b6:	e31a      	b.n	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 80044b8:	2300      	movs	r3, #0
 80044ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80044bc:	e317      	b.n	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80044be:	bf00      	nop
 80044c0:	44020c00 	.word	0x44020c00
 80044c4:	03d09000 	.word	0x03d09000
 80044c8:	003d0900 	.word	0x003d0900
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80044cc:	4b9b      	ldr	r3, [pc, #620]	@ (800473c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80044ce:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80044d2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80044d6:	62bb      	str	r3, [r7, #40]	@ 0x28

        switch (srcclk)
 80044d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044da:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80044de:	d044      	beq.n	800456a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80044e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044e2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80044e6:	d879      	bhi.n	80045dc <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 80044e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044ee:	d02d      	beq.n	800454c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 80044f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044f6:	d871      	bhi.n	80045dc <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 80044f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044fe:	d017      	beq.n	8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8004500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004502:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004506:	d869      	bhi.n	80045dc <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8004508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800450a:	2b00      	cmp	r3, #0
 800450c:	d004      	beq.n	8004518 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 800450e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004510:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004514:	d004      	beq.n	8004520 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 8004516:	e061      	b.n	80045dc <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8004518:	f7fe faa2 	bl	8002a60 <HAL_RCC_GetPCLK3Freq>
 800451c:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 800451e:	e060      	b.n	80045e2 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004520:	f107 030c 	add.w	r3, r7, #12
 8004524:	4618      	mov	r0, r3
 8004526:	f7ff fa41 	bl	80039ac <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800452e:	e058      	b.n	80045e2 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
            break;
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004530:	4b82      	ldr	r3, [pc, #520]	@ (800473c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004532:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b02      	cmp	r3, #2
 800453c:	d103      	bne.n	8004546 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
            {
              frequency = LSE_VALUE;
 800453e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004542:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004544:	e04d      	b.n	80045e2 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8004546:	2300      	movs	r3, #0
 8004548:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800454a:	e04a      	b.n	80045e2 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800454c:	4b7b      	ldr	r3, [pc, #492]	@ (800473c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800454e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004552:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004556:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800455a:	d103      	bne.n	8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
            {
              frequency = LSI_VALUE;
 800455c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004560:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8004562:	e03e      	b.n	80045e2 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8004564:	2300      	movs	r3, #0
 8004566:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004568:	e03b      	b.n	80045e2 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800456a:	4b74      	ldr	r3, [pc, #464]	@ (800473c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800456c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004570:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004574:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004576:	4b71      	ldr	r3, [pc, #452]	@ (800473c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b02      	cmp	r3, #2
 8004580:	d10c      	bne.n	800459c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8004582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004584:	2b00      	cmp	r3, #0
 8004586:	d109      	bne.n	800459c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004588:	4b6c      	ldr	r3, [pc, #432]	@ (800473c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	08db      	lsrs	r3, r3, #3
 800458e:	f003 0303 	and.w	r3, r3, #3
 8004592:	4a6b      	ldr	r2, [pc, #428]	@ (8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8004594:	fa22 f303 	lsr.w	r3, r2, r3
 8004598:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800459a:	e01e      	b.n	80045da <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800459c:	4b67      	ldr	r3, [pc, #412]	@ (800473c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045a8:	d106      	bne.n	80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 80045aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045b0:	d102      	bne.n	80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80045b2:	4b64      	ldr	r3, [pc, #400]	@ (8004744 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 80045b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045b6:	e010      	b.n	80045da <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80045b8:	4b60      	ldr	r3, [pc, #384]	@ (800473c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80045c4:	d106      	bne.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 80045c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80045cc:	d102      	bne.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80045ce:	4b5e      	ldr	r3, [pc, #376]	@ (8004748 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 80045d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045d2:	e002      	b.n	80045da <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80045d4:	2300      	movs	r3, #0
 80045d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 80045d8:	e003      	b.n	80045e2 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
 80045da:	e002      	b.n	80045e2 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          default :
          {
            frequency = 0U;
 80045dc:	2300      	movs	r3, #0
 80045de:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80045e0:	bf00      	nop
          }
        }
        break;
 80045e2:	e284      	b.n	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80045e4:	4b55      	ldr	r3, [pc, #340]	@ (800473c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80045e6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80045ea:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80045ee:	62bb      	str	r3, [r7, #40]	@ 0x28

        switch (srcclk)
 80045f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045f2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80045f6:	d044      	beq.n	8004682 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 80045f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045fa:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80045fe:	d879      	bhi.n	80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8004600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004602:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004606:	d02d      	beq.n	8004664 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 8004608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800460a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800460e:	d871      	bhi.n	80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8004610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004612:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004616:	d017      	beq.n	8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 8004618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800461a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800461e:	d869      	bhi.n	80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8004620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004622:	2b00      	cmp	r3, #0
 8004624:	d004      	beq.n	8004630 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
 8004626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004628:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800462c:	d004      	beq.n	8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 800462e:	e061      	b.n	80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8004630:	f7fe f9ea 	bl	8002a08 <HAL_RCC_GetPCLK1Freq>
 8004634:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 8004636:	e060      	b.n	80046fa <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004638:	f107 030c 	add.w	r3, r7, #12
 800463c:	4618      	mov	r0, r3
 800463e:	f7ff f9b5 	bl	80039ac <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004646:	e058      	b.n	80046fa <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
            break;
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004648:	4b3c      	ldr	r3, [pc, #240]	@ (800473c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800464a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	2b02      	cmp	r3, #2
 8004654:	d103      	bne.n	800465e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            {
              frequency = LSE_VALUE;
 8004656:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800465a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 800465c:	e04d      	b.n	80046fa <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 800465e:	2300      	movs	r3, #0
 8004660:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004662:	e04a      	b.n	80046fa <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004664:	4b35      	ldr	r3, [pc, #212]	@ (800473c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004666:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800466a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800466e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004672:	d103      	bne.n	800467c <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
            {
              frequency = LSI_VALUE;
 8004674:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004678:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 800467a:	e03e      	b.n	80046fa <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 800467c:	2300      	movs	r3, #0
 800467e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004680:	e03b      	b.n	80046fa <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004682:	4b2e      	ldr	r3, [pc, #184]	@ (800473c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004684:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004688:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800468c:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800468e:	4b2b      	ldr	r3, [pc, #172]	@ (800473c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b02      	cmp	r3, #2
 8004698:	d10c      	bne.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
 800469a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800469c:	2b00      	cmp	r3, #0
 800469e:	d109      	bne.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80046a0:	4b26      	ldr	r3, [pc, #152]	@ (800473c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	08db      	lsrs	r3, r3, #3
 80046a6:	f003 0303 	and.w	r3, r3, #3
 80046aa:	4a25      	ldr	r2, [pc, #148]	@ (8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 80046ac:	fa22 f303 	lsr.w	r3, r2, r3
 80046b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046b2:	e01e      	b.n	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80046b4:	4b21      	ldr	r3, [pc, #132]	@ (800473c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046c0:	d106      	bne.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 80046c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046c8:	d102      	bne.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80046ca:	4b1e      	ldr	r3, [pc, #120]	@ (8004744 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 80046cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046ce:	e010      	b.n	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80046d0:	4b1a      	ldr	r3, [pc, #104]	@ (800473c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80046dc:	d106      	bne.n	80046ec <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 80046de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80046e4:	d102      	bne.n	80046ec <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80046e6:	4b18      	ldr	r3, [pc, #96]	@ (8004748 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 80046e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046ea:	e002      	b.n	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80046ec:	2300      	movs	r3, #0
 80046ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 80046f0:	e003      	b.n	80046fa <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 80046f2:	e002      	b.n	80046fa <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          default :
          {
            frequency = 0U;
 80046f4:	2300      	movs	r3, #0
 80046f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80046f8:	bf00      	nop
          }
        }
        break;
 80046fa:	e1f8      	b.n	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80046fc:	4b0f      	ldr	r3, [pc, #60]	@ (800473c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80046fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004702:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004706:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8004708:	4b0c      	ldr	r3, [pc, #48]	@ (800473c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004710:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004714:	d105      	bne.n	8004722 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8004716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004718:	2b00      	cmp	r3, #0
 800471a:	d102      	bne.n	8004722 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
        {
          frequency = HSE_VALUE;
 800471c:	4b0a      	ldr	r3, [pc, #40]	@ (8004748 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 800471e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8004720:	e1e5      	b.n	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8004722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004724:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004728:	d110      	bne.n	800474c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800472a:	f107 0318 	add.w	r3, r7, #24
 800472e:	4618      	mov	r0, r3
 8004730:	f7fe ffd0 	bl	80036d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004738:	e1d9      	b.n	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800473a:	bf00      	nop
 800473c:	44020c00 	.word	0x44020c00
 8004740:	03d09000 	.word	0x03d09000
 8004744:	003d0900 	.word	0x003d0900
 8004748:	017d7840 	.word	0x017d7840
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 800474c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800474e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004752:	d107      	bne.n	8004764 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004754:	f107 030c 	add.w	r3, r7, #12
 8004758:	4618      	mov	r0, r3
 800475a:	f7ff f927 	bl	80039ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004762:	e1c4      	b.n	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8004764:	2300      	movs	r3, #0
 8004766:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004768:	e1c1      	b.n	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800476a:	4b9d      	ldr	r3, [pc, #628]	@ (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800476c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004770:	f003 0307 	and.w	r3, r3, #7
 8004774:	62bb      	str	r3, [r7, #40]	@ 0x28
        switch (srcclk)
 8004776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004778:	2b04      	cmp	r3, #4
 800477a:	d859      	bhi.n	8004830 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 800477c:	a201      	add	r2, pc, #4	@ (adr r2, 8004784 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800477e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004782:	bf00      	nop
 8004784:	08004799 	.word	0x08004799
 8004788:	080047a9 	.word	0x080047a9
 800478c:	08004831 	.word	0x08004831
 8004790:	080047b9 	.word	0x080047b9
 8004794:	080047bf 	.word	0x080047bf
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004798:	f107 0318 	add.w	r3, r7, #24
 800479c:	4618      	mov	r0, r3
 800479e:	f7fe ff99 	bl	80036d4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80047a6:	e046      	b.n	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80047a8:	f107 030c 	add.w	r3, r7, #12
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7ff f8fd 	bl	80039ac <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80047b6:	e03e      	b.n	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
            break;
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80047b8:	4b8a      	ldr	r3, [pc, #552]	@ (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80047ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80047bc:	e03b      	b.n	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80047be:	4b88      	ldr	r3, [pc, #544]	@ (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80047c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80047c4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80047c8:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80047ca:	4b85      	ldr	r3, [pc, #532]	@ (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d10c      	bne.n	80047f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 80047d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d109      	bne.n	80047f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80047dc:	4b80      	ldr	r3, [pc, #512]	@ (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	08db      	lsrs	r3, r3, #3
 80047e2:	f003 0303 	and.w	r3, r3, #3
 80047e6:	4a80      	ldr	r2, [pc, #512]	@ (80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80047e8:	fa22 f303 	lsr.w	r3, r2, r3
 80047ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047ee:	e01e      	b.n	800482e <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80047f0:	4b7b      	ldr	r3, [pc, #492]	@ (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047fc:	d106      	bne.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 80047fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004800:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004804:	d102      	bne.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004806:	4b79      	ldr	r3, [pc, #484]	@ (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8004808:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800480a:	e010      	b.n	800482e <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800480c:	4b74      	ldr	r3, [pc, #464]	@ (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004814:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004818:	d106      	bne.n	8004828 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 800481a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800481c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004820:	d102      	bne.n	8004828 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004822:	4b73      	ldr	r3, [pc, #460]	@ (80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8004824:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004826:	e002      	b.n	800482e <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004828:	2300      	movs	r3, #0
 800482a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 800482c:	e003      	b.n	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
 800482e:	e002      	b.n	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          default:
          {
            frequency = 0;
 8004830:	2300      	movs	r3, #0
 8004832:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004834:	bf00      	nop
          }
        }
        break;
 8004836:	e15a      	b.n	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8004838:	4b69      	ldr	r3, [pc, #420]	@ (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800483a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800483e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004842:	62bb      	str	r3, [r7, #40]	@ 0x28
        switch (srcclk)
 8004844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004846:	2b20      	cmp	r3, #32
 8004848:	d022      	beq.n	8004890 <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
 800484a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800484c:	2b20      	cmp	r3, #32
 800484e:	d858      	bhi.n	8004902 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8004850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004852:	2b18      	cmp	r3, #24
 8004854:	d019      	beq.n	800488a <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
 8004856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004858:	2b18      	cmp	r3, #24
 800485a:	d852      	bhi.n	8004902 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 800485c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800485e:	2b00      	cmp	r3, #0
 8004860:	d003      	beq.n	800486a <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8004862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004864:	2b08      	cmp	r3, #8
 8004866:	d008      	beq.n	800487a <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8004868:	e04b      	b.n	8004902 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800486a:	f107 0318 	add.w	r3, r7, #24
 800486e:	4618      	mov	r0, r3
 8004870:	f7fe ff30 	bl	80036d4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004878:	e046      	b.n	8004908 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800487a:	f107 030c 	add.w	r3, r7, #12
 800487e:	4618      	mov	r0, r3
 8004880:	f7ff f894 	bl	80039ac <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004888:	e03e      	b.n	8004908 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
            break;
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800488a:	4b56      	ldr	r3, [pc, #344]	@ (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800488c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800488e:	e03b      	b.n	8004908 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004890:	4b53      	ldr	r3, [pc, #332]	@ (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004892:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004896:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800489a:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800489c:	4b50      	ldr	r3, [pc, #320]	@ (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0302 	and.w	r3, r3, #2
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d10c      	bne.n	80048c2 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 80048a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d109      	bne.n	80048c2 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80048ae:	4b4c      	ldr	r3, [pc, #304]	@ (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	08db      	lsrs	r3, r3, #3
 80048b4:	f003 0303 	and.w	r3, r3, #3
 80048b8:	4a4b      	ldr	r2, [pc, #300]	@ (80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80048ba:	fa22 f303 	lsr.w	r3, r2, r3
 80048be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048c0:	e01e      	b.n	8004900 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80048c2:	4b47      	ldr	r3, [pc, #284]	@ (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048ce:	d106      	bne.n	80048de <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 80048d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048d6:	d102      	bne.n	80048de <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80048d8:	4b44      	ldr	r3, [pc, #272]	@ (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 80048da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048dc:	e010      	b.n	8004900 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80048de:	4b40      	ldr	r3, [pc, #256]	@ (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80048ea:	d106      	bne.n	80048fa <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
 80048ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80048f2:	d102      	bne.n	80048fa <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80048f4:	4b3e      	ldr	r3, [pc, #248]	@ (80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 80048f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048f8:	e002      	b.n	8004900 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80048fa:	2300      	movs	r3, #0
 80048fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 80048fe:	e003      	b.n	8004908 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8004900:	e002      	b.n	8004908 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          default:
          {
            frequency = 0;
 8004902:	2300      	movs	r3, #0
 8004904:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004906:	bf00      	nop
          }
        }
        break;
 8004908:	e0f1      	b.n	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800490a:	4b35      	ldr	r3, [pc, #212]	@ (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800490c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004910:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8004914:	62bb      	str	r3, [r7, #40]	@ 0x28
        switch (srcclk)
 8004916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004918:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800491c:	d023      	beq.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 800491e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004920:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004924:	d858      	bhi.n	80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8004926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004928:	2bc0      	cmp	r3, #192	@ 0xc0
 800492a:	d019      	beq.n	8004960 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
 800492c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800492e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004930:	d852      	bhi.n	80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8004932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004934:	2b00      	cmp	r3, #0
 8004936:	d003      	beq.n	8004940 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>
 8004938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800493a:	2b40      	cmp	r3, #64	@ 0x40
 800493c:	d008      	beq.n	8004950 <HAL_RCCEx_GetPeriphCLKFreq+0xccc>
 800493e:	e04b      	b.n	80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004940:	f107 0318 	add.w	r3, r7, #24
 8004944:	4618      	mov	r0, r3
 8004946:	f7fe fec5 	bl	80036d4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800494e:	e046      	b.n	80049de <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004950:	f107 030c 	add.w	r3, r7, #12
 8004954:	4618      	mov	r0, r3
 8004956:	f7ff f829 	bl	80039ac <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800495e:	e03e      	b.n	80049de <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
            break;
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8004960:	4b20      	ldr	r3, [pc, #128]	@ (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8004962:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004964:	e03b      	b.n	80049de <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004966:	4b1e      	ldr	r3, [pc, #120]	@ (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004968:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800496c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004970:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004972:	4b1b      	ldr	r3, [pc, #108]	@ (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	2b02      	cmp	r3, #2
 800497c:	d10c      	bne.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800497e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004980:	2b00      	cmp	r3, #0
 8004982:	d109      	bne.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004984:	4b16      	ldr	r3, [pc, #88]	@ (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	08db      	lsrs	r3, r3, #3
 800498a:	f003 0303 	and.w	r3, r3, #3
 800498e:	4a16      	ldr	r2, [pc, #88]	@ (80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8004990:	fa22 f303 	lsr.w	r3, r2, r3
 8004994:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004996:	e01e      	b.n	80049d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004998:	4b11      	ldr	r3, [pc, #68]	@ (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049a4:	d106      	bne.n	80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
 80049a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049ac:	d102      	bne.n	80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80049ae:	4b0f      	ldr	r3, [pc, #60]	@ (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 80049b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049b2:	e010      	b.n	80049d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80049b4:	4b0a      	ldr	r3, [pc, #40]	@ (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049c0:	d106      	bne.n	80049d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
 80049c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80049c8:	d102      	bne.n	80049d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80049ca:	4b09      	ldr	r3, [pc, #36]	@ (80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 80049cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049ce:	e002      	b.n	80049d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80049d0:	2300      	movs	r3, #0
 80049d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 80049d4:	e003      	b.n	80049de <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 80049d6:	e002      	b.n	80049de <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          default:
          {
            frequency = 0;
 80049d8:	2300      	movs	r3, #0
 80049da:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80049dc:	bf00      	nop
          }
        }
        break;
 80049de:	e086      	b.n	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80049e0:	44020c00 	.word	0x44020c00
 80049e4:	00bb8000 	.word	0x00bb8000
 80049e8:	03d09000 	.word	0x03d09000
 80049ec:	003d0900 	.word	0x003d0900
 80049f0:	017d7840 	.word	0x017d7840
        break;
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80049f4:	4b40      	ldr	r3, [pc, #256]	@ (8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80049f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80049fa:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80049fe:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8004a00:	4b3d      	ldr	r3, [pc, #244]	@ (8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a0c:	d105      	bne.n	8004a1a <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
 8004a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d102      	bne.n	8004a1a <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
        {
          frequency = HSI48_VALUE;
 8004a14:	4b39      	ldr	r3, [pc, #228]	@ (8004afc <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 8004a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a18:	e031      	b.n	8004a7e <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8004a1a:	4b37      	ldr	r3, [pc, #220]	@ (8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a26:	d10a      	bne.n	8004a3e <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8004a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a2a:	2b10      	cmp	r3, #16
 8004a2c:	d107      	bne.n	8004a3e <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004a2e:	f107 0318 	add.w	r3, r7, #24
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7fe fe4e 	bl	80036d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a3c:	e01f      	b.n	8004a7e <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8004a3e:	4b2e      	ldr	r3, [pc, #184]	@ (8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004a40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d106      	bne.n	8004a5a <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
 8004a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a4e:	2b20      	cmp	r3, #32
 8004a50:	d103      	bne.n	8004a5a <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
        {
          frequency = LSE_VALUE;
 8004a52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a58:	e011      	b.n	8004a7e <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8004a5a:	4b27      	ldr	r3, [pc, #156]	@ (8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004a5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a68:	d106      	bne.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
 8004a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a6c:	2b30      	cmp	r3, #48	@ 0x30
 8004a6e:	d103      	bne.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
        {
          frequency = LSI_VALUE;
 8004a70:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a76:	e002      	b.n	8004a7e <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 8004a7c:	e037      	b.n	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004a7e:	e036      	b.n	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8004a80:	4b1d      	ldr	r3, [pc, #116]	@ (8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004a82:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004a86:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004a8a:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8004a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a8e:	2b10      	cmp	r3, #16
 8004a90:	d107      	bne.n	8004aa2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004a92:	f107 0318 	add.w	r3, r7, #24
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7fe fe1c 	bl	80036d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break;
 8004aa0:	e025      	b.n	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
          frequency = pll3_clocks.PLL3_Q_Frequency;
        }
#else
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL2Q))
 8004aa2:	4b15      	ldr	r3, [pc, #84]	@ (8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004aaa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004aae:	d10a      	bne.n	8004ac6 <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
 8004ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ab2:	2b20      	cmp	r3, #32
 8004ab4:	d107      	bne.n	8004ac6 <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ab6:	f107 030c 	add.w	r3, r7, #12
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7fe ff76 	bl	80039ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ac4:	e00f      	b.n	8004ae6 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8004ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ace:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ad2:	d105      	bne.n	8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 8004ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad6:	2b30      	cmp	r3, #48	@ 0x30
 8004ad8:	d102      	bne.n	8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
        {
          frequency = HSI48_VALUE;
 8004ada:	4b08      	ldr	r3, [pc, #32]	@ (8004afc <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 8004adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ade:	e002      	b.n	8004ae6 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        break;
 8004ae4:	e003      	b.n	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004ae6:	e002      	b.n	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      default:
        frequency = 0U;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004aec:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 8004aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3730      	adds	r7, #48	@ 0x30
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	44020c00 	.word	0x44020c00
 8004afc:	02dc6c00 	.word	0x02dc6c00

08004b00 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8004b08:	4b48      	ldr	r3, [pc, #288]	@ (8004c2c <RCCEx_PLL2_Config+0x12c>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a47      	ldr	r2, [pc, #284]	@ (8004c2c <RCCEx_PLL2_Config+0x12c>)
 8004b0e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004b12:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004b14:	f7fc f9dc 	bl	8000ed0 <HAL_GetTick>
 8004b18:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004b1a:	e008      	b.n	8004b2e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004b1c:	f7fc f9d8 	bl	8000ed0 <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d901      	bls.n	8004b2e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e07a      	b.n	8004c24 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004b2e:	4b3f      	ldr	r3, [pc, #252]	@ (8004c2c <RCCEx_PLL2_Config+0x12c>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1f0      	bne.n	8004b1c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8004b3a:	4b3c      	ldr	r3, [pc, #240]	@ (8004c2c <RCCEx_PLL2_Config+0x12c>)
 8004b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b3e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004b42:	f023 0303 	bic.w	r3, r3, #3
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	6811      	ldr	r1, [r2, #0]
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	6852      	ldr	r2, [r2, #4]
 8004b4e:	0212      	lsls	r2, r2, #8
 8004b50:	430a      	orrs	r2, r1
 8004b52:	4936      	ldr	r1, [pc, #216]	@ (8004c2c <RCCEx_PLL2_Config+0x12c>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	3b01      	subs	r3, #1
 8004b68:	025b      	lsls	r3, r3, #9
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	431a      	orrs	r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	3b01      	subs	r3, #1
 8004b74:	041b      	lsls	r3, r3, #16
 8004b76:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004b7a:	431a      	orrs	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	695b      	ldr	r3, [r3, #20]
 8004b80:	3b01      	subs	r3, #1
 8004b82:	061b      	lsls	r3, r3, #24
 8004b84:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004b88:	4928      	ldr	r1, [pc, #160]	@ (8004c2c <RCCEx_PLL2_Config+0x12c>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8004b8e:	4b27      	ldr	r3, [pc, #156]	@ (8004c2c <RCCEx_PLL2_Config+0x12c>)
 8004b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b92:	f023 020c 	bic.w	r2, r3, #12
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	4924      	ldr	r1, [pc, #144]	@ (8004c2c <RCCEx_PLL2_Config+0x12c>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8004ba0:	4b22      	ldr	r3, [pc, #136]	@ (8004c2c <RCCEx_PLL2_Config+0x12c>)
 8004ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ba4:	f023 0220 	bic.w	r2, r3, #32
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	69db      	ldr	r3, [r3, #28]
 8004bac:	491f      	ldr	r1, [pc, #124]	@ (8004c2c <RCCEx_PLL2_Config+0x12c>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8004bb2:	4b1e      	ldr	r3, [pc, #120]	@ (8004c2c <RCCEx_PLL2_Config+0x12c>)
 8004bb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bba:	491c      	ldr	r1, [pc, #112]	@ (8004c2c <RCCEx_PLL2_Config+0x12c>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8004bc0:	4b1a      	ldr	r3, [pc, #104]	@ (8004c2c <RCCEx_PLL2_Config+0x12c>)
 8004bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc4:	4a19      	ldr	r2, [pc, #100]	@ (8004c2c <RCCEx_PLL2_Config+0x12c>)
 8004bc6:	f023 0310 	bic.w	r3, r3, #16
 8004bca:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8004bcc:	4b17      	ldr	r3, [pc, #92]	@ (8004c2c <RCCEx_PLL2_Config+0x12c>)
 8004bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004bd4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	6a12      	ldr	r2, [r2, #32]
 8004bdc:	00d2      	lsls	r2, r2, #3
 8004bde:	4913      	ldr	r1, [pc, #76]	@ (8004c2c <RCCEx_PLL2_Config+0x12c>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8004be4:	4b11      	ldr	r3, [pc, #68]	@ (8004c2c <RCCEx_PLL2_Config+0x12c>)
 8004be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004be8:	4a10      	ldr	r2, [pc, #64]	@ (8004c2c <RCCEx_PLL2_Config+0x12c>)
 8004bea:	f043 0310 	orr.w	r3, r3, #16
 8004bee:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8004bf0:	4b0e      	ldr	r3, [pc, #56]	@ (8004c2c <RCCEx_PLL2_Config+0x12c>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a0d      	ldr	r2, [pc, #52]	@ (8004c2c <RCCEx_PLL2_Config+0x12c>)
 8004bf6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004bfa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004bfc:	f7fc f968 	bl	8000ed0 <HAL_GetTick>
 8004c00:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004c02:	e008      	b.n	8004c16 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004c04:	f7fc f964 	bl	8000ed0 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d901      	bls.n	8004c16 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e006      	b.n	8004c24 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004c16:	4b05      	ldr	r3, [pc, #20]	@ (8004c2c <RCCEx_PLL2_Config+0x12c>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d0f0      	beq.n	8004c04 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8004c22:	2300      	movs	r3, #0

}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3710      	adds	r7, #16
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	44020c00 	.word	0x44020c00

08004c30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d101      	bne.n	8004c42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e042      	b.n	8004cc8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d106      	bne.n	8004c5a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f7fb ff1f 	bl	8000a98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2224      	movs	r2, #36	@ 0x24
 8004c5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 0201 	bic.w	r2, r2, #1
 8004c70:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d002      	beq.n	8004c80 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 fa44 	bl	8005108 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 f8c3 	bl	8004e0c <UART_SetConfig>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d101      	bne.n	8004c90 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e01b      	b.n	8004cc8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	685a      	ldr	r2, [r3, #4]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	689a      	ldr	r2, [r3, #8]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004cae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f042 0201 	orr.w	r2, r2, #1
 8004cbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 fac3 	bl	800524c <UART_CheckIdleState>
 8004cc6:	4603      	mov	r3, r0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3708      	adds	r7, #8
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b08a      	sub	sp, #40	@ 0x28
 8004cd4:	af02      	add	r7, sp, #8
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	603b      	str	r3, [r7, #0]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ce6:	2b20      	cmp	r3, #32
 8004ce8:	f040 808b 	bne.w	8004e02 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d002      	beq.n	8004cf8 <HAL_UART_Transmit+0x28>
 8004cf2:	88fb      	ldrh	r3, [r7, #6]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d101      	bne.n	8004cfc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e083      	b.n	8004e04 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d06:	2b80      	cmp	r3, #128	@ 0x80
 8004d08:	d107      	bne.n	8004d1a <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	689a      	ldr	r2, [r3, #8]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004d18:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2221      	movs	r2, #33	@ 0x21
 8004d26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d2a:	f7fc f8d1 	bl	8000ed0 <HAL_GetTick>
 8004d2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	88fa      	ldrh	r2, [r7, #6]
 8004d34:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	88fa      	ldrh	r2, [r7, #6]
 8004d3c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d48:	d108      	bne.n	8004d5c <HAL_UART_Transmit+0x8c>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d104      	bne.n	8004d5c <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8004d52:	2300      	movs	r3, #0
 8004d54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	61bb      	str	r3, [r7, #24]
 8004d5a:	e003      	b.n	8004d64 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d60:	2300      	movs	r3, #0
 8004d62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d64:	e030      	b.n	8004dc8 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	9300      	str	r3, [sp, #0]
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	2180      	movs	r1, #128	@ 0x80
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f000 fb15 	bl	80053a0 <UART_WaitOnFlagUntilTimeout>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d005      	beq.n	8004d88 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2220      	movs	r2, #32
 8004d80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e03d      	b.n	8004e04 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d10b      	bne.n	8004da6 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	881b      	ldrh	r3, [r3, #0]
 8004d92:	461a      	mov	r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d9c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	3302      	adds	r3, #2
 8004da2:	61bb      	str	r3, [r7, #24]
 8004da4:	e007      	b.n	8004db6 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	781a      	ldrb	r2, [r3, #0]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	3301      	adds	r3, #1
 8004db4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d1c8      	bne.n	8004d66 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	9300      	str	r3, [sp, #0]
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	2140      	movs	r1, #64	@ 0x40
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	f000 fade 	bl	80053a0 <UART_WaitOnFlagUntilTimeout>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d005      	beq.n	8004df6 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2220      	movs	r2, #32
 8004dee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e006      	b.n	8004e04 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2220      	movs	r2, #32
 8004dfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	e000      	b.n	8004e04 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8004e02:	2302      	movs	r3, #2
  }
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3720      	adds	r7, #32
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e10:	b094      	sub	sp, #80	@ 0x50
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e16:	2300      	movs	r3, #0
 8004e18:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e1e:	689a      	ldr	r2, [r3, #8]
 8004e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	431a      	orrs	r2, r3
 8004e26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e2e:	69db      	ldr	r3, [r3, #28]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	498a      	ldr	r1, [pc, #552]	@ (8005064 <UART_SetConfig+0x258>)
 8004e3c:	4019      	ands	r1, r3
 8004e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e44:	430b      	orrs	r3, r1
 8004e46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e54:	68d9      	ldr	r1, [r3, #12]
 8004e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	ea40 0301 	orr.w	r3, r0, r1
 8004e5e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	4b7f      	ldr	r3, [pc, #508]	@ (8005068 <UART_SetConfig+0x25c>)
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d004      	beq.n	8004e7a <UART_SetConfig+0x6e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e72:	6a1a      	ldr	r2, [r3, #32]
 8004e74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e76:	4313      	orrs	r3, r2
 8004e78:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8004e84:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8004e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e8e:	430b      	orrs	r3, r1
 8004e90:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004e92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e98:	f023 000f 	bic.w	r0, r3, #15
 8004e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e9e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	ea40 0301 	orr.w	r3, r0, r1
 8004ea8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	4b6f      	ldr	r3, [pc, #444]	@ (800506c <UART_SetConfig+0x260>)
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d102      	bne.n	8004eba <UART_SetConfig+0xae>
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004eb8:	e01a      	b.n	8004ef0 <UART_SetConfig+0xe4>
 8004eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	4b6c      	ldr	r3, [pc, #432]	@ (8005070 <UART_SetConfig+0x264>)
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d102      	bne.n	8004eca <UART_SetConfig+0xbe>
 8004ec4:	2302      	movs	r3, #2
 8004ec6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ec8:	e012      	b.n	8004ef0 <UART_SetConfig+0xe4>
 8004eca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	4b69      	ldr	r3, [pc, #420]	@ (8005074 <UART_SetConfig+0x268>)
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d102      	bne.n	8004eda <UART_SetConfig+0xce>
 8004ed4:	2304      	movs	r3, #4
 8004ed6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ed8:	e00a      	b.n	8004ef0 <UART_SetConfig+0xe4>
 8004eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	4b62      	ldr	r3, [pc, #392]	@ (8005068 <UART_SetConfig+0x25c>)
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d103      	bne.n	8004eec <UART_SetConfig+0xe0>
 8004ee4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004ee8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004eea:	e001      	b.n	8004ef0 <UART_SetConfig+0xe4>
 8004eec:	2300      	movs	r3, #0
 8004eee:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	4b5c      	ldr	r3, [pc, #368]	@ (8005068 <UART_SetConfig+0x25c>)
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d171      	bne.n	8004fde <UART_SetConfig+0x1d2>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8004efa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004efc:	2200      	movs	r2, #0
 8004efe:	623b      	str	r3, [r7, #32]
 8004f00:	627a      	str	r2, [r7, #36]	@ 0x24
 8004f02:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004f06:	f7fe febd 	bl	8003c84 <HAL_RCCEx_GetPeriphCLKFreq>
 8004f0a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	f000 80e2 	beq.w	80050d8 <UART_SetConfig+0x2cc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f18:	4a57      	ldr	r2, [pc, #348]	@ (8005078 <UART_SetConfig+0x26c>)
 8004f1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f22:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f26:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f2a:	685a      	ldr	r2, [r3, #4]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	005b      	lsls	r3, r3, #1
 8004f30:	4413      	add	r3, r2
 8004f32:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d305      	bcc.n	8004f44 <UART_SetConfig+0x138>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d903      	bls.n	8004f4c <UART_SetConfig+0x140>
      {
        ret = HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8004f4a:	e0c5      	b.n	80050d8 <UART_SetConfig+0x2cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f4e:	2200      	movs	r2, #0
 8004f50:	61bb      	str	r3, [r7, #24]
 8004f52:	61fa      	str	r2, [r7, #28]
 8004f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f58:	4a47      	ldr	r2, [pc, #284]	@ (8005078 <UART_SetConfig+0x26c>)
 8004f5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	2200      	movs	r2, #0
 8004f62:	613b      	str	r3, [r7, #16]
 8004f64:	617a      	str	r2, [r7, #20]
 8004f66:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004f6a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004f6e:	f7fb f99b 	bl	80002a8 <__aeabi_uldivmod>
 8004f72:	4602      	mov	r2, r0
 8004f74:	460b      	mov	r3, r1
 8004f76:	4610      	mov	r0, r2
 8004f78:	4619      	mov	r1, r3
 8004f7a:	f04f 0200 	mov.w	r2, #0
 8004f7e:	f04f 0300 	mov.w	r3, #0
 8004f82:	020b      	lsls	r3, r1, #8
 8004f84:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004f88:	0202      	lsls	r2, r0, #8
 8004f8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f8c:	6849      	ldr	r1, [r1, #4]
 8004f8e:	0849      	lsrs	r1, r1, #1
 8004f90:	2000      	movs	r0, #0
 8004f92:	460c      	mov	r4, r1
 8004f94:	4605      	mov	r5, r0
 8004f96:	eb12 0804 	adds.w	r8, r2, r4
 8004f9a:	eb43 0905 	adc.w	r9, r3, r5
 8004f9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	60bb      	str	r3, [r7, #8]
 8004fa6:	60fa      	str	r2, [r7, #12]
 8004fa8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fac:	4640      	mov	r0, r8
 8004fae:	4649      	mov	r1, r9
 8004fb0:	f7fb f97a 	bl	80002a8 <__aeabi_uldivmod>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	4613      	mov	r3, r2
 8004fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004fbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fbe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fc2:	d308      	bcc.n	8004fd6 <UART_SetConfig+0x1ca>
 8004fc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fca:	d204      	bcs.n	8004fd6 <UART_SetConfig+0x1ca>
        {
          huart->Instance->BRR = usartdiv;
 8004fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004fd2:	60da      	str	r2, [r3, #12]
 8004fd4:	e080      	b.n	80050d8 <UART_SetConfig+0x2cc>
        }
        else
        {
          ret = HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8004fdc:	e07c      	b.n	80050d8 <UART_SetConfig+0x2cc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fe0:	69db      	ldr	r3, [r3, #28]
 8004fe2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fe6:	d149      	bne.n	800507c <UART_SetConfig+0x270>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8004fe8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fea:	2200      	movs	r2, #0
 8004fec:	603b      	str	r3, [r7, #0]
 8004fee:	607a      	str	r2, [r7, #4]
 8004ff0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ff4:	f7fe fe46 	bl	8003c84 <HAL_RCCEx_GetPeriphCLKFreq>
 8004ff8:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ffa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d06b      	beq.n	80050d8 <UART_SetConfig+0x2cc>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005004:	4a1c      	ldr	r2, [pc, #112]	@ (8005078 <UART_SetConfig+0x26c>)
 8005006:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800500a:	461a      	mov	r2, r3
 800500c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800500e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005012:	005a      	lsls	r2, r3, #1
 8005014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	085b      	lsrs	r3, r3, #1
 800501a:	441a      	add	r2, r3
 800501c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	fbb2 f3f3 	udiv	r3, r2, r3
 8005024:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005028:	2b0f      	cmp	r3, #15
 800502a:	d916      	bls.n	800505a <UART_SetConfig+0x24e>
 800502c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800502e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005032:	d212      	bcs.n	800505a <UART_SetConfig+0x24e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005034:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005036:	b29b      	uxth	r3, r3
 8005038:	f023 030f 	bic.w	r3, r3, #15
 800503c:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800503e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005040:	085b      	lsrs	r3, r3, #1
 8005042:	b29b      	uxth	r3, r3
 8005044:	f003 0307 	and.w	r3, r3, #7
 8005048:	b29a      	uxth	r2, r3
 800504a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800504c:	4313      	orrs	r3, r2
 800504e:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8005050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8005056:	60da      	str	r2, [r3, #12]
 8005058:	e03e      	b.n	80050d8 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005060:	e03a      	b.n	80050d8 <UART_SetConfig+0x2cc>
 8005062:	bf00      	nop
 8005064:	cfff69f3 	.word	0xcfff69f3
 8005068:	44002400 	.word	0x44002400
 800506c:	40013800 	.word	0x40013800
 8005070:	40004400 	.word	0x40004400
 8005074:	40004800 	.word	0x40004800
 8005078:	08006110 	.word	0x08006110
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800507c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800507e:	2200      	movs	r2, #0
 8005080:	469a      	mov	sl, r3
 8005082:	4693      	mov	fp, r2
 8005084:	4650      	mov	r0, sl
 8005086:	4659      	mov	r1, fp
 8005088:	f7fe fdfc 	bl	8003c84 <HAL_RCCEx_GetPeriphCLKFreq>
 800508c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800508e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005090:	2b00      	cmp	r3, #0
 8005092:	d021      	beq.n	80050d8 <UART_SetConfig+0x2cc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005098:	4a1a      	ldr	r2, [pc, #104]	@ (8005104 <UART_SetConfig+0x2f8>)
 800509a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800509e:	461a      	mov	r2, r3
 80050a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80050a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	085b      	lsrs	r3, r3, #1
 80050ac:	441a      	add	r2, r3
 80050ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050ba:	2b0f      	cmp	r3, #15
 80050bc:	d909      	bls.n	80050d2 <UART_SetConfig+0x2c6>
 80050be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050c4:	d205      	bcs.n	80050d2 <UART_SetConfig+0x2c6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050c8:	b29a      	uxth	r2, r3
 80050ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	60da      	str	r2, [r3, #12]
 80050d0:	e002      	b.n	80050d8 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80050d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050da:	2201      	movs	r2, #1
 80050dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80050e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050e2:	2201      	movs	r2, #1
 80050e4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050ea:	2200      	movs	r2, #0
 80050ec:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80050ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050f0:	2200      	movs	r2, #0
 80050f2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80050f4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3750      	adds	r7, #80	@ 0x50
 80050fc:	46bd      	mov	sp, r7
 80050fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005102:	bf00      	nop
 8005104:	08006110 	.word	0x08006110

08005108 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005114:	f003 0308 	and.w	r3, r3, #8
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00a      	beq.n	8005132 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	430a      	orrs	r2, r1
 8005130:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00a      	beq.n	8005154 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	430a      	orrs	r2, r1
 8005152:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005158:	f003 0302 	and.w	r3, r3, #2
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00a      	beq.n	8005176 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	430a      	orrs	r2, r1
 8005174:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800517a:	f003 0304 	and.w	r3, r3, #4
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00a      	beq.n	8005198 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	430a      	orrs	r2, r1
 8005196:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800519c:	f003 0310 	and.w	r3, r3, #16
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d00a      	beq.n	80051ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	430a      	orrs	r2, r1
 80051b8:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051be:	f003 0320 	and.w	r3, r3, #32
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00a      	beq.n	80051dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	430a      	orrs	r2, r1
 80051da:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d01a      	beq.n	800521e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	430a      	orrs	r2, r1
 80051fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005202:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005206:	d10a      	bne.n	800521e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	430a      	orrs	r2, r1
 800521c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00a      	beq.n	8005240 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	430a      	orrs	r2, r1
 800523e:	605a      	str	r2, [r3, #4]
  }
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b098      	sub	sp, #96	@ 0x60
 8005250:	af02      	add	r7, sp, #8
 8005252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800525c:	f7fb fe38 	bl	8000ed0 <HAL_GetTick>
 8005260:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0308 	and.w	r3, r3, #8
 800526c:	2b08      	cmp	r3, #8
 800526e:	d12f      	bne.n	80052d0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005270:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005274:	9300      	str	r3, [sp, #0]
 8005276:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005278:	2200      	movs	r2, #0
 800527a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 f88e 	bl	80053a0 <UART_WaitOnFlagUntilTimeout>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d022      	beq.n	80052d0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005292:	e853 3f00 	ldrex	r3, [r3]
 8005296:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005298:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800529a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800529e:	653b      	str	r3, [r7, #80]	@ 0x50
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	461a      	mov	r2, r3
 80052a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80052aa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80052ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052b0:	e841 2300 	strex	r3, r2, [r1]
 80052b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80052b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1e6      	bne.n	800528a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2220      	movs	r2, #32
 80052c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	e063      	b.n	8005398 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0304 	and.w	r3, r3, #4
 80052da:	2b04      	cmp	r3, #4
 80052dc:	d149      	bne.n	8005372 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052de:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80052e2:	9300      	str	r3, [sp, #0]
 80052e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052e6:	2200      	movs	r2, #0
 80052e8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 f857 	bl	80053a0 <UART_WaitOnFlagUntilTimeout>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d03c      	beq.n	8005372 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005300:	e853 3f00 	ldrex	r3, [r3]
 8005304:	623b      	str	r3, [r7, #32]
   return(result);
 8005306:	6a3b      	ldr	r3, [r7, #32]
 8005308:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800530c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	461a      	mov	r2, r3
 8005314:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005316:	633b      	str	r3, [r7, #48]	@ 0x30
 8005318:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800531c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800531e:	e841 2300 	strex	r3, r2, [r1]
 8005322:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005326:	2b00      	cmp	r3, #0
 8005328:	d1e6      	bne.n	80052f8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	3308      	adds	r3, #8
 8005330:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	e853 3f00 	ldrex	r3, [r3]
 8005338:	60fb      	str	r3, [r7, #12]
   return(result);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f023 0301 	bic.w	r3, r3, #1
 8005340:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	3308      	adds	r3, #8
 8005348:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800534a:	61fa      	str	r2, [r7, #28]
 800534c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534e:	69b9      	ldr	r1, [r7, #24]
 8005350:	69fa      	ldr	r2, [r7, #28]
 8005352:	e841 2300 	strex	r3, r2, [r1]
 8005356:	617b      	str	r3, [r7, #20]
   return(result);
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1e5      	bne.n	800532a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2220      	movs	r2, #32
 8005362:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e012      	b.n	8005398 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2220      	movs	r2, #32
 8005376:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2220      	movs	r2, #32
 800537e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3758      	adds	r7, #88	@ 0x58
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	603b      	str	r3, [r7, #0]
 80053ac:	4613      	mov	r3, r2
 80053ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053b0:	e04f      	b.n	8005452 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b8:	d04b      	beq.n	8005452 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ba:	f7fb fd89 	bl	8000ed0 <HAL_GetTick>
 80053be:	4602      	mov	r2, r0
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	69ba      	ldr	r2, [r7, #24]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d302      	bcc.n	80053d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d101      	bne.n	80053d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e04e      	b.n	8005472 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0304 	and.w	r3, r3, #4
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d037      	beq.n	8005452 <UART_WaitOnFlagUntilTimeout+0xb2>
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	2b80      	cmp	r3, #128	@ 0x80
 80053e6:	d034      	beq.n	8005452 <UART_WaitOnFlagUntilTimeout+0xb2>
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	2b40      	cmp	r3, #64	@ 0x40
 80053ec:	d031      	beq.n	8005452 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	69db      	ldr	r3, [r3, #28]
 80053f4:	f003 0308 	and.w	r3, r3, #8
 80053f8:	2b08      	cmp	r3, #8
 80053fa:	d110      	bne.n	800541e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2208      	movs	r2, #8
 8005402:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005404:	68f8      	ldr	r0, [r7, #12]
 8005406:	f000 f838 	bl	800547a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2208      	movs	r2, #8
 800540e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e029      	b.n	8005472 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	69db      	ldr	r3, [r3, #28]
 8005424:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005428:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800542c:	d111      	bne.n	8005452 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005436:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f000 f81e 	bl	800547a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2220      	movs	r2, #32
 8005442:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e00f      	b.n	8005472 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	69da      	ldr	r2, [r3, #28]
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	4013      	ands	r3, r2
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	429a      	cmp	r2, r3
 8005460:	bf0c      	ite	eq
 8005462:	2301      	moveq	r3, #1
 8005464:	2300      	movne	r3, #0
 8005466:	b2db      	uxtb	r3, r3
 8005468:	461a      	mov	r2, r3
 800546a:	79fb      	ldrb	r3, [r7, #7]
 800546c:	429a      	cmp	r2, r3
 800546e:	d0a0      	beq.n	80053b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800547a:	b480      	push	{r7}
 800547c:	b095      	sub	sp, #84	@ 0x54
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800548a:	e853 3f00 	ldrex	r3, [r3]
 800548e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005492:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005496:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	461a      	mov	r2, r3
 800549e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80054a2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80054a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80054a8:	e841 2300 	strex	r3, r2, [r1]
 80054ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80054ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d1e6      	bne.n	8005482 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	3308      	adds	r3, #8
 80054ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054bc:	6a3b      	ldr	r3, [r7, #32]
 80054be:	e853 3f00 	ldrex	r3, [r3]
 80054c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054ca:	f023 0301 	bic.w	r3, r3, #1
 80054ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	3308      	adds	r3, #8
 80054d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054e0:	e841 2300 	strex	r3, r2, [r1]
 80054e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80054e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1e3      	bne.n	80054b4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d118      	bne.n	8005526 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	e853 3f00 	ldrex	r3, [r3]
 8005500:	60bb      	str	r3, [r7, #8]
   return(result);
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	f023 0310 	bic.w	r3, r3, #16
 8005508:	647b      	str	r3, [r7, #68]	@ 0x44
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	461a      	mov	r2, r3
 8005510:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005512:	61bb      	str	r3, [r7, #24]
 8005514:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005516:	6979      	ldr	r1, [r7, #20]
 8005518:	69ba      	ldr	r2, [r7, #24]
 800551a:	e841 2300 	strex	r3, r2, [r1]
 800551e:	613b      	str	r3, [r7, #16]
   return(result);
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d1e6      	bne.n	80054f4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2220      	movs	r2, #32
 800552a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800553a:	bf00      	nop
 800553c:	3754      	adds	r7, #84	@ 0x54
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr

08005546 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005546:	b480      	push	{r7}
 8005548:	b085      	sub	sp, #20
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005554:	2b01      	cmp	r3, #1
 8005556:	d101      	bne.n	800555c <HAL_UARTEx_DisableFifoMode+0x16>
 8005558:	2302      	movs	r3, #2
 800555a:	e027      	b.n	80055ac <HAL_UARTEx_DisableFifoMode+0x66>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2224      	movs	r2, #36	@ 0x24
 8005568:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f022 0201 	bic.w	r2, r2, #1
 8005582:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800558a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2220      	movs	r2, #32
 800559e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3714      	adds	r7, #20
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d101      	bne.n	80055d0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80055cc:	2302      	movs	r3, #2
 80055ce:	e02d      	b.n	800562c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2224      	movs	r2, #36	@ 0x24
 80055dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f022 0201 	bic.w	r2, r2, #1
 80055f6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	683a      	ldr	r2, [r7, #0]
 8005608:	430a      	orrs	r2, r1
 800560a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f000 f84f 	bl	80056b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2220      	movs	r2, #32
 800561e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	3710      	adds	r7, #16
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005644:	2b01      	cmp	r3, #1
 8005646:	d101      	bne.n	800564c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005648:	2302      	movs	r3, #2
 800564a:	e02d      	b.n	80056a8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2224      	movs	r2, #36	@ 0x24
 8005658:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f022 0201 	bic.w	r2, r2, #1
 8005672:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	430a      	orrs	r2, r1
 8005686:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 f811 	bl	80056b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2220      	movs	r2, #32
 800569a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3710      	adds	r7, #16
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d108      	bne.n	80056d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80056d0:	e031      	b.n	8005736 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80056d2:	2308      	movs	r3, #8
 80056d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80056d6:	2308      	movs	r3, #8
 80056d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	0e5b      	lsrs	r3, r3, #25
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	f003 0307 	and.w	r3, r3, #7
 80056e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	0f5b      	lsrs	r3, r3, #29
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	f003 0307 	and.w	r3, r3, #7
 80056f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80056fa:	7bbb      	ldrb	r3, [r7, #14]
 80056fc:	7b3a      	ldrb	r2, [r7, #12]
 80056fe:	4911      	ldr	r1, [pc, #68]	@ (8005744 <UARTEx_SetNbDataToProcess+0x94>)
 8005700:	5c8a      	ldrb	r2, [r1, r2]
 8005702:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005706:	7b3a      	ldrb	r2, [r7, #12]
 8005708:	490f      	ldr	r1, [pc, #60]	@ (8005748 <UARTEx_SetNbDataToProcess+0x98>)
 800570a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800570c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005710:	b29a      	uxth	r2, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005718:	7bfb      	ldrb	r3, [r7, #15]
 800571a:	7b7a      	ldrb	r2, [r7, #13]
 800571c:	4909      	ldr	r1, [pc, #36]	@ (8005744 <UARTEx_SetNbDataToProcess+0x94>)
 800571e:	5c8a      	ldrb	r2, [r1, r2]
 8005720:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005724:	7b7a      	ldrb	r2, [r7, #13]
 8005726:	4908      	ldr	r1, [pc, #32]	@ (8005748 <UARTEx_SetNbDataToProcess+0x98>)
 8005728:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800572a:	fb93 f3f2 	sdiv	r3, r3, r2
 800572e:	b29a      	uxth	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005736:	bf00      	nop
 8005738:	3714      	adds	r7, #20
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	08006128 	.word	0x08006128
 8005748:	08006130 	.word	0x08006130

0800574c <siprintf>:
 800574c:	b40e      	push	{r1, r2, r3}
 800574e:	b510      	push	{r4, lr}
 8005750:	b09d      	sub	sp, #116	@ 0x74
 8005752:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005756:	2400      	movs	r4, #0
 8005758:	ab1f      	add	r3, sp, #124	@ 0x7c
 800575a:	9002      	str	r0, [sp, #8]
 800575c:	9006      	str	r0, [sp, #24]
 800575e:	9107      	str	r1, [sp, #28]
 8005760:	9104      	str	r1, [sp, #16]
 8005762:	4809      	ldr	r0, [pc, #36]	@ (8005788 <siprintf+0x3c>)
 8005764:	4909      	ldr	r1, [pc, #36]	@ (800578c <siprintf+0x40>)
 8005766:	f853 2b04 	ldr.w	r2, [r3], #4
 800576a:	9105      	str	r1, [sp, #20]
 800576c:	a902      	add	r1, sp, #8
 800576e:	6800      	ldr	r0, [r0, #0]
 8005770:	9301      	str	r3, [sp, #4]
 8005772:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005774:	f000 f994 	bl	8005aa0 <_svfiprintf_r>
 8005778:	9b02      	ldr	r3, [sp, #8]
 800577a:	701c      	strb	r4, [r3, #0]
 800577c:	b01d      	add	sp, #116	@ 0x74
 800577e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005782:	b003      	add	sp, #12
 8005784:	4770      	bx	lr
 8005786:	bf00      	nop
 8005788:	2000000c 	.word	0x2000000c
 800578c:	ffff0208 	.word	0xffff0208

08005790 <memset>:
 8005790:	4402      	add	r2, r0
 8005792:	4603      	mov	r3, r0
 8005794:	4293      	cmp	r3, r2
 8005796:	d100      	bne.n	800579a <memset+0xa>
 8005798:	4770      	bx	lr
 800579a:	f803 1b01 	strb.w	r1, [r3], #1
 800579e:	e7f9      	b.n	8005794 <memset+0x4>

080057a0 <__errno>:
 80057a0:	4b01      	ldr	r3, [pc, #4]	@ (80057a8 <__errno+0x8>)
 80057a2:	6818      	ldr	r0, [r3, #0]
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	2000000c 	.word	0x2000000c

080057ac <__libc_init_array>:
 80057ac:	b570      	push	{r4, r5, r6, lr}
 80057ae:	4d0d      	ldr	r5, [pc, #52]	@ (80057e4 <__libc_init_array+0x38>)
 80057b0:	2600      	movs	r6, #0
 80057b2:	4c0d      	ldr	r4, [pc, #52]	@ (80057e8 <__libc_init_array+0x3c>)
 80057b4:	1b64      	subs	r4, r4, r5
 80057b6:	10a4      	asrs	r4, r4, #2
 80057b8:	42a6      	cmp	r6, r4
 80057ba:	d109      	bne.n	80057d0 <__libc_init_array+0x24>
 80057bc:	4d0b      	ldr	r5, [pc, #44]	@ (80057ec <__libc_init_array+0x40>)
 80057be:	2600      	movs	r6, #0
 80057c0:	4c0b      	ldr	r4, [pc, #44]	@ (80057f0 <__libc_init_array+0x44>)
 80057c2:	f000 fc75 	bl	80060b0 <_init>
 80057c6:	1b64      	subs	r4, r4, r5
 80057c8:	10a4      	asrs	r4, r4, #2
 80057ca:	42a6      	cmp	r6, r4
 80057cc:	d105      	bne.n	80057da <__libc_init_array+0x2e>
 80057ce:	bd70      	pop	{r4, r5, r6, pc}
 80057d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80057d4:	3601      	adds	r6, #1
 80057d6:	4798      	blx	r3
 80057d8:	e7ee      	b.n	80057b8 <__libc_init_array+0xc>
 80057da:	f855 3b04 	ldr.w	r3, [r5], #4
 80057de:	3601      	adds	r6, #1
 80057e0:	4798      	blx	r3
 80057e2:	e7f2      	b.n	80057ca <__libc_init_array+0x1e>
 80057e4:	08006174 	.word	0x08006174
 80057e8:	08006174 	.word	0x08006174
 80057ec:	08006174 	.word	0x08006174
 80057f0:	08006178 	.word	0x08006178

080057f4 <__retarget_lock_acquire_recursive>:
 80057f4:	4770      	bx	lr

080057f6 <__retarget_lock_release_recursive>:
 80057f6:	4770      	bx	lr

080057f8 <_free_r>:
 80057f8:	b538      	push	{r3, r4, r5, lr}
 80057fa:	4605      	mov	r5, r0
 80057fc:	2900      	cmp	r1, #0
 80057fe:	d041      	beq.n	8005884 <_free_r+0x8c>
 8005800:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005804:	1f0c      	subs	r4, r1, #4
 8005806:	2b00      	cmp	r3, #0
 8005808:	bfb8      	it	lt
 800580a:	18e4      	addlt	r4, r4, r3
 800580c:	f000 f8e0 	bl	80059d0 <__malloc_lock>
 8005810:	4a1d      	ldr	r2, [pc, #116]	@ (8005888 <_free_r+0x90>)
 8005812:	6813      	ldr	r3, [r2, #0]
 8005814:	b933      	cbnz	r3, 8005824 <_free_r+0x2c>
 8005816:	6063      	str	r3, [r4, #4]
 8005818:	6014      	str	r4, [r2, #0]
 800581a:	4628      	mov	r0, r5
 800581c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005820:	f000 b8dc 	b.w	80059dc <__malloc_unlock>
 8005824:	42a3      	cmp	r3, r4
 8005826:	d908      	bls.n	800583a <_free_r+0x42>
 8005828:	6820      	ldr	r0, [r4, #0]
 800582a:	1821      	adds	r1, r4, r0
 800582c:	428b      	cmp	r3, r1
 800582e:	bf01      	itttt	eq
 8005830:	6819      	ldreq	r1, [r3, #0]
 8005832:	685b      	ldreq	r3, [r3, #4]
 8005834:	1809      	addeq	r1, r1, r0
 8005836:	6021      	streq	r1, [r4, #0]
 8005838:	e7ed      	b.n	8005816 <_free_r+0x1e>
 800583a:	461a      	mov	r2, r3
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	b10b      	cbz	r3, 8005844 <_free_r+0x4c>
 8005840:	42a3      	cmp	r3, r4
 8005842:	d9fa      	bls.n	800583a <_free_r+0x42>
 8005844:	6811      	ldr	r1, [r2, #0]
 8005846:	1850      	adds	r0, r2, r1
 8005848:	42a0      	cmp	r0, r4
 800584a:	d10b      	bne.n	8005864 <_free_r+0x6c>
 800584c:	6820      	ldr	r0, [r4, #0]
 800584e:	4401      	add	r1, r0
 8005850:	1850      	adds	r0, r2, r1
 8005852:	6011      	str	r1, [r2, #0]
 8005854:	4283      	cmp	r3, r0
 8005856:	d1e0      	bne.n	800581a <_free_r+0x22>
 8005858:	6818      	ldr	r0, [r3, #0]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	4408      	add	r0, r1
 800585e:	6053      	str	r3, [r2, #4]
 8005860:	6010      	str	r0, [r2, #0]
 8005862:	e7da      	b.n	800581a <_free_r+0x22>
 8005864:	d902      	bls.n	800586c <_free_r+0x74>
 8005866:	230c      	movs	r3, #12
 8005868:	602b      	str	r3, [r5, #0]
 800586a:	e7d6      	b.n	800581a <_free_r+0x22>
 800586c:	6820      	ldr	r0, [r4, #0]
 800586e:	1821      	adds	r1, r4, r0
 8005870:	428b      	cmp	r3, r1
 8005872:	bf02      	ittt	eq
 8005874:	6819      	ldreq	r1, [r3, #0]
 8005876:	685b      	ldreq	r3, [r3, #4]
 8005878:	1809      	addeq	r1, r1, r0
 800587a:	6063      	str	r3, [r4, #4]
 800587c:	bf08      	it	eq
 800587e:	6021      	streq	r1, [r4, #0]
 8005880:	6054      	str	r4, [r2, #4]
 8005882:	e7ca      	b.n	800581a <_free_r+0x22>
 8005884:	bd38      	pop	{r3, r4, r5, pc}
 8005886:	bf00      	nop
 8005888:	200002ac 	.word	0x200002ac

0800588c <sbrk_aligned>:
 800588c:	b570      	push	{r4, r5, r6, lr}
 800588e:	4e0f      	ldr	r6, [pc, #60]	@ (80058cc <sbrk_aligned+0x40>)
 8005890:	460c      	mov	r4, r1
 8005892:	4605      	mov	r5, r0
 8005894:	6831      	ldr	r1, [r6, #0]
 8005896:	b911      	cbnz	r1, 800589e <sbrk_aligned+0x12>
 8005898:	f000 fba8 	bl	8005fec <_sbrk_r>
 800589c:	6030      	str	r0, [r6, #0]
 800589e:	4621      	mov	r1, r4
 80058a0:	4628      	mov	r0, r5
 80058a2:	f000 fba3 	bl	8005fec <_sbrk_r>
 80058a6:	1c43      	adds	r3, r0, #1
 80058a8:	d103      	bne.n	80058b2 <sbrk_aligned+0x26>
 80058aa:	f04f 34ff 	mov.w	r4, #4294967295
 80058ae:	4620      	mov	r0, r4
 80058b0:	bd70      	pop	{r4, r5, r6, pc}
 80058b2:	1cc4      	adds	r4, r0, #3
 80058b4:	f024 0403 	bic.w	r4, r4, #3
 80058b8:	42a0      	cmp	r0, r4
 80058ba:	d0f8      	beq.n	80058ae <sbrk_aligned+0x22>
 80058bc:	1a21      	subs	r1, r4, r0
 80058be:	4628      	mov	r0, r5
 80058c0:	f000 fb94 	bl	8005fec <_sbrk_r>
 80058c4:	3001      	adds	r0, #1
 80058c6:	d1f2      	bne.n	80058ae <sbrk_aligned+0x22>
 80058c8:	e7ef      	b.n	80058aa <sbrk_aligned+0x1e>
 80058ca:	bf00      	nop
 80058cc:	200002a8 	.word	0x200002a8

080058d0 <_malloc_r>:
 80058d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058d4:	1ccd      	adds	r5, r1, #3
 80058d6:	4606      	mov	r6, r0
 80058d8:	f025 0503 	bic.w	r5, r5, #3
 80058dc:	3508      	adds	r5, #8
 80058de:	2d0c      	cmp	r5, #12
 80058e0:	bf38      	it	cc
 80058e2:	250c      	movcc	r5, #12
 80058e4:	2d00      	cmp	r5, #0
 80058e6:	db01      	blt.n	80058ec <_malloc_r+0x1c>
 80058e8:	42a9      	cmp	r1, r5
 80058ea:	d904      	bls.n	80058f6 <_malloc_r+0x26>
 80058ec:	230c      	movs	r3, #12
 80058ee:	6033      	str	r3, [r6, #0]
 80058f0:	2000      	movs	r0, #0
 80058f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80059cc <_malloc_r+0xfc>
 80058fa:	f000 f869 	bl	80059d0 <__malloc_lock>
 80058fe:	f8d8 3000 	ldr.w	r3, [r8]
 8005902:	461c      	mov	r4, r3
 8005904:	bb44      	cbnz	r4, 8005958 <_malloc_r+0x88>
 8005906:	4629      	mov	r1, r5
 8005908:	4630      	mov	r0, r6
 800590a:	f7ff ffbf 	bl	800588c <sbrk_aligned>
 800590e:	1c43      	adds	r3, r0, #1
 8005910:	4604      	mov	r4, r0
 8005912:	d158      	bne.n	80059c6 <_malloc_r+0xf6>
 8005914:	f8d8 4000 	ldr.w	r4, [r8]
 8005918:	4627      	mov	r7, r4
 800591a:	2f00      	cmp	r7, #0
 800591c:	d143      	bne.n	80059a6 <_malloc_r+0xd6>
 800591e:	2c00      	cmp	r4, #0
 8005920:	d04b      	beq.n	80059ba <_malloc_r+0xea>
 8005922:	6823      	ldr	r3, [r4, #0]
 8005924:	4639      	mov	r1, r7
 8005926:	4630      	mov	r0, r6
 8005928:	eb04 0903 	add.w	r9, r4, r3
 800592c:	f000 fb5e 	bl	8005fec <_sbrk_r>
 8005930:	4581      	cmp	r9, r0
 8005932:	d142      	bne.n	80059ba <_malloc_r+0xea>
 8005934:	6821      	ldr	r1, [r4, #0]
 8005936:	4630      	mov	r0, r6
 8005938:	1a6d      	subs	r5, r5, r1
 800593a:	4629      	mov	r1, r5
 800593c:	f7ff ffa6 	bl	800588c <sbrk_aligned>
 8005940:	3001      	adds	r0, #1
 8005942:	d03a      	beq.n	80059ba <_malloc_r+0xea>
 8005944:	6823      	ldr	r3, [r4, #0]
 8005946:	442b      	add	r3, r5
 8005948:	6023      	str	r3, [r4, #0]
 800594a:	f8d8 3000 	ldr.w	r3, [r8]
 800594e:	685a      	ldr	r2, [r3, #4]
 8005950:	bb62      	cbnz	r2, 80059ac <_malloc_r+0xdc>
 8005952:	f8c8 7000 	str.w	r7, [r8]
 8005956:	e00f      	b.n	8005978 <_malloc_r+0xa8>
 8005958:	6822      	ldr	r2, [r4, #0]
 800595a:	1b52      	subs	r2, r2, r5
 800595c:	d420      	bmi.n	80059a0 <_malloc_r+0xd0>
 800595e:	2a0b      	cmp	r2, #11
 8005960:	d917      	bls.n	8005992 <_malloc_r+0xc2>
 8005962:	1961      	adds	r1, r4, r5
 8005964:	42a3      	cmp	r3, r4
 8005966:	6025      	str	r5, [r4, #0]
 8005968:	bf18      	it	ne
 800596a:	6059      	strne	r1, [r3, #4]
 800596c:	6863      	ldr	r3, [r4, #4]
 800596e:	bf08      	it	eq
 8005970:	f8c8 1000 	streq.w	r1, [r8]
 8005974:	5162      	str	r2, [r4, r5]
 8005976:	604b      	str	r3, [r1, #4]
 8005978:	4630      	mov	r0, r6
 800597a:	f000 f82f 	bl	80059dc <__malloc_unlock>
 800597e:	f104 000b 	add.w	r0, r4, #11
 8005982:	1d23      	adds	r3, r4, #4
 8005984:	f020 0007 	bic.w	r0, r0, #7
 8005988:	1ac2      	subs	r2, r0, r3
 800598a:	bf1c      	itt	ne
 800598c:	1a1b      	subne	r3, r3, r0
 800598e:	50a3      	strne	r3, [r4, r2]
 8005990:	e7af      	b.n	80058f2 <_malloc_r+0x22>
 8005992:	6862      	ldr	r2, [r4, #4]
 8005994:	42a3      	cmp	r3, r4
 8005996:	bf0c      	ite	eq
 8005998:	f8c8 2000 	streq.w	r2, [r8]
 800599c:	605a      	strne	r2, [r3, #4]
 800599e:	e7eb      	b.n	8005978 <_malloc_r+0xa8>
 80059a0:	4623      	mov	r3, r4
 80059a2:	6864      	ldr	r4, [r4, #4]
 80059a4:	e7ae      	b.n	8005904 <_malloc_r+0x34>
 80059a6:	463c      	mov	r4, r7
 80059a8:	687f      	ldr	r7, [r7, #4]
 80059aa:	e7b6      	b.n	800591a <_malloc_r+0x4a>
 80059ac:	461a      	mov	r2, r3
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	42a3      	cmp	r3, r4
 80059b2:	d1fb      	bne.n	80059ac <_malloc_r+0xdc>
 80059b4:	2300      	movs	r3, #0
 80059b6:	6053      	str	r3, [r2, #4]
 80059b8:	e7de      	b.n	8005978 <_malloc_r+0xa8>
 80059ba:	230c      	movs	r3, #12
 80059bc:	4630      	mov	r0, r6
 80059be:	6033      	str	r3, [r6, #0]
 80059c0:	f000 f80c 	bl	80059dc <__malloc_unlock>
 80059c4:	e794      	b.n	80058f0 <_malloc_r+0x20>
 80059c6:	6005      	str	r5, [r0, #0]
 80059c8:	e7d6      	b.n	8005978 <_malloc_r+0xa8>
 80059ca:	bf00      	nop
 80059cc:	200002ac 	.word	0x200002ac

080059d0 <__malloc_lock>:
 80059d0:	4801      	ldr	r0, [pc, #4]	@ (80059d8 <__malloc_lock+0x8>)
 80059d2:	f7ff bf0f 	b.w	80057f4 <__retarget_lock_acquire_recursive>
 80059d6:	bf00      	nop
 80059d8:	200002a4 	.word	0x200002a4

080059dc <__malloc_unlock>:
 80059dc:	4801      	ldr	r0, [pc, #4]	@ (80059e4 <__malloc_unlock+0x8>)
 80059de:	f7ff bf0a 	b.w	80057f6 <__retarget_lock_release_recursive>
 80059e2:	bf00      	nop
 80059e4:	200002a4 	.word	0x200002a4

080059e8 <__ssputs_r>:
 80059e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059ec:	461f      	mov	r7, r3
 80059ee:	688e      	ldr	r6, [r1, #8]
 80059f0:	4682      	mov	sl, r0
 80059f2:	460c      	mov	r4, r1
 80059f4:	42be      	cmp	r6, r7
 80059f6:	4690      	mov	r8, r2
 80059f8:	680b      	ldr	r3, [r1, #0]
 80059fa:	d82d      	bhi.n	8005a58 <__ssputs_r+0x70>
 80059fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005a00:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005a04:	d026      	beq.n	8005a54 <__ssputs_r+0x6c>
 8005a06:	6965      	ldr	r5, [r4, #20]
 8005a08:	6909      	ldr	r1, [r1, #16]
 8005a0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a0e:	eba3 0901 	sub.w	r9, r3, r1
 8005a12:	1c7b      	adds	r3, r7, #1
 8005a14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a18:	444b      	add	r3, r9
 8005a1a:	106d      	asrs	r5, r5, #1
 8005a1c:	429d      	cmp	r5, r3
 8005a1e:	bf38      	it	cc
 8005a20:	461d      	movcc	r5, r3
 8005a22:	0553      	lsls	r3, r2, #21
 8005a24:	d527      	bpl.n	8005a76 <__ssputs_r+0x8e>
 8005a26:	4629      	mov	r1, r5
 8005a28:	f7ff ff52 	bl	80058d0 <_malloc_r>
 8005a2c:	4606      	mov	r6, r0
 8005a2e:	b360      	cbz	r0, 8005a8a <__ssputs_r+0xa2>
 8005a30:	464a      	mov	r2, r9
 8005a32:	6921      	ldr	r1, [r4, #16]
 8005a34:	f000 faf8 	bl	8006028 <memcpy>
 8005a38:	89a3      	ldrh	r3, [r4, #12]
 8005a3a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005a3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a42:	81a3      	strh	r3, [r4, #12]
 8005a44:	6126      	str	r6, [r4, #16]
 8005a46:	444e      	add	r6, r9
 8005a48:	6165      	str	r5, [r4, #20]
 8005a4a:	eba5 0509 	sub.w	r5, r5, r9
 8005a4e:	6026      	str	r6, [r4, #0]
 8005a50:	463e      	mov	r6, r7
 8005a52:	60a5      	str	r5, [r4, #8]
 8005a54:	42be      	cmp	r6, r7
 8005a56:	d900      	bls.n	8005a5a <__ssputs_r+0x72>
 8005a58:	463e      	mov	r6, r7
 8005a5a:	4632      	mov	r2, r6
 8005a5c:	4641      	mov	r1, r8
 8005a5e:	6820      	ldr	r0, [r4, #0]
 8005a60:	f000 faaa 	bl	8005fb8 <memmove>
 8005a64:	68a3      	ldr	r3, [r4, #8]
 8005a66:	2000      	movs	r0, #0
 8005a68:	1b9b      	subs	r3, r3, r6
 8005a6a:	60a3      	str	r3, [r4, #8]
 8005a6c:	6823      	ldr	r3, [r4, #0]
 8005a6e:	4433      	add	r3, r6
 8005a70:	6023      	str	r3, [r4, #0]
 8005a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a76:	462a      	mov	r2, r5
 8005a78:	f000 fae3 	bl	8006042 <_realloc_r>
 8005a7c:	4606      	mov	r6, r0
 8005a7e:	2800      	cmp	r0, #0
 8005a80:	d1e0      	bne.n	8005a44 <__ssputs_r+0x5c>
 8005a82:	6921      	ldr	r1, [r4, #16]
 8005a84:	4650      	mov	r0, sl
 8005a86:	f7ff feb7 	bl	80057f8 <_free_r>
 8005a8a:	230c      	movs	r3, #12
 8005a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a90:	f8ca 3000 	str.w	r3, [sl]
 8005a94:	89a3      	ldrh	r3, [r4, #12]
 8005a96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a9a:	81a3      	strh	r3, [r4, #12]
 8005a9c:	e7e9      	b.n	8005a72 <__ssputs_r+0x8a>
	...

08005aa0 <_svfiprintf_r>:
 8005aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aa4:	4698      	mov	r8, r3
 8005aa6:	898b      	ldrh	r3, [r1, #12]
 8005aa8:	b09d      	sub	sp, #116	@ 0x74
 8005aaa:	4607      	mov	r7, r0
 8005aac:	061b      	lsls	r3, r3, #24
 8005aae:	460d      	mov	r5, r1
 8005ab0:	4614      	mov	r4, r2
 8005ab2:	d510      	bpl.n	8005ad6 <_svfiprintf_r+0x36>
 8005ab4:	690b      	ldr	r3, [r1, #16]
 8005ab6:	b973      	cbnz	r3, 8005ad6 <_svfiprintf_r+0x36>
 8005ab8:	2140      	movs	r1, #64	@ 0x40
 8005aba:	f7ff ff09 	bl	80058d0 <_malloc_r>
 8005abe:	6028      	str	r0, [r5, #0]
 8005ac0:	6128      	str	r0, [r5, #16]
 8005ac2:	b930      	cbnz	r0, 8005ad2 <_svfiprintf_r+0x32>
 8005ac4:	230c      	movs	r3, #12
 8005ac6:	603b      	str	r3, [r7, #0]
 8005ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8005acc:	b01d      	add	sp, #116	@ 0x74
 8005ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ad2:	2340      	movs	r3, #64	@ 0x40
 8005ad4:	616b      	str	r3, [r5, #20]
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	f8cd 800c 	str.w	r8, [sp, #12]
 8005adc:	f04f 0901 	mov.w	r9, #1
 8005ae0:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8005c84 <_svfiprintf_r+0x1e4>
 8005ae4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ae6:	2320      	movs	r3, #32
 8005ae8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005aec:	2330      	movs	r3, #48	@ 0x30
 8005aee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005af2:	4623      	mov	r3, r4
 8005af4:	469a      	mov	sl, r3
 8005af6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005afa:	b10a      	cbz	r2, 8005b00 <_svfiprintf_r+0x60>
 8005afc:	2a25      	cmp	r2, #37	@ 0x25
 8005afe:	d1f9      	bne.n	8005af4 <_svfiprintf_r+0x54>
 8005b00:	ebba 0b04 	subs.w	fp, sl, r4
 8005b04:	d00b      	beq.n	8005b1e <_svfiprintf_r+0x7e>
 8005b06:	465b      	mov	r3, fp
 8005b08:	4622      	mov	r2, r4
 8005b0a:	4629      	mov	r1, r5
 8005b0c:	4638      	mov	r0, r7
 8005b0e:	f7ff ff6b 	bl	80059e8 <__ssputs_r>
 8005b12:	3001      	adds	r0, #1
 8005b14:	f000 80a7 	beq.w	8005c66 <_svfiprintf_r+0x1c6>
 8005b18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b1a:	445a      	add	r2, fp
 8005b1c:	9209      	str	r2, [sp, #36]	@ 0x24
 8005b1e:	f89a 3000 	ldrb.w	r3, [sl]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f000 809f 	beq.w	8005c66 <_svfiprintf_r+0x1c6>
 8005b28:	2300      	movs	r3, #0
 8005b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b2e:	f10a 0a01 	add.w	sl, sl, #1
 8005b32:	9304      	str	r3, [sp, #16]
 8005b34:	9307      	str	r3, [sp, #28]
 8005b36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005b3a:	931a      	str	r3, [sp, #104]	@ 0x68
 8005b3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b40:	4654      	mov	r4, sl
 8005b42:	2205      	movs	r2, #5
 8005b44:	484f      	ldr	r0, [pc, #316]	@ (8005c84 <_svfiprintf_r+0x1e4>)
 8005b46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b4a:	f000 fa5f 	bl	800600c <memchr>
 8005b4e:	9a04      	ldr	r2, [sp, #16]
 8005b50:	b9d8      	cbnz	r0, 8005b8a <_svfiprintf_r+0xea>
 8005b52:	06d0      	lsls	r0, r2, #27
 8005b54:	bf44      	itt	mi
 8005b56:	2320      	movmi	r3, #32
 8005b58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b5c:	0711      	lsls	r1, r2, #28
 8005b5e:	bf44      	itt	mi
 8005b60:	232b      	movmi	r3, #43	@ 0x2b
 8005b62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b66:	f89a 3000 	ldrb.w	r3, [sl]
 8005b6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b6c:	d015      	beq.n	8005b9a <_svfiprintf_r+0xfa>
 8005b6e:	9a07      	ldr	r2, [sp, #28]
 8005b70:	4654      	mov	r4, sl
 8005b72:	2000      	movs	r0, #0
 8005b74:	f04f 0c0a 	mov.w	ip, #10
 8005b78:	4621      	mov	r1, r4
 8005b7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b7e:	3b30      	subs	r3, #48	@ 0x30
 8005b80:	2b09      	cmp	r3, #9
 8005b82:	d94b      	bls.n	8005c1c <_svfiprintf_r+0x17c>
 8005b84:	b1b0      	cbz	r0, 8005bb4 <_svfiprintf_r+0x114>
 8005b86:	9207      	str	r2, [sp, #28]
 8005b88:	e014      	b.n	8005bb4 <_svfiprintf_r+0x114>
 8005b8a:	eba0 0308 	sub.w	r3, r0, r8
 8005b8e:	46a2      	mov	sl, r4
 8005b90:	fa09 f303 	lsl.w	r3, r9, r3
 8005b94:	4313      	orrs	r3, r2
 8005b96:	9304      	str	r3, [sp, #16]
 8005b98:	e7d2      	b.n	8005b40 <_svfiprintf_r+0xa0>
 8005b9a:	9b03      	ldr	r3, [sp, #12]
 8005b9c:	1d19      	adds	r1, r3, #4
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	9103      	str	r1, [sp, #12]
 8005ba4:	bfbb      	ittet	lt
 8005ba6:	425b      	neglt	r3, r3
 8005ba8:	f042 0202 	orrlt.w	r2, r2, #2
 8005bac:	9307      	strge	r3, [sp, #28]
 8005bae:	9307      	strlt	r3, [sp, #28]
 8005bb0:	bfb8      	it	lt
 8005bb2:	9204      	strlt	r2, [sp, #16]
 8005bb4:	7823      	ldrb	r3, [r4, #0]
 8005bb6:	2b2e      	cmp	r3, #46	@ 0x2e
 8005bb8:	d10a      	bne.n	8005bd0 <_svfiprintf_r+0x130>
 8005bba:	7863      	ldrb	r3, [r4, #1]
 8005bbc:	2b2a      	cmp	r3, #42	@ 0x2a
 8005bbe:	d132      	bne.n	8005c26 <_svfiprintf_r+0x186>
 8005bc0:	9b03      	ldr	r3, [sp, #12]
 8005bc2:	3402      	adds	r4, #2
 8005bc4:	1d1a      	adds	r2, r3, #4
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005bcc:	9203      	str	r2, [sp, #12]
 8005bce:	9305      	str	r3, [sp, #20]
 8005bd0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005c94 <_svfiprintf_r+0x1f4>
 8005bd4:	2203      	movs	r2, #3
 8005bd6:	7821      	ldrb	r1, [r4, #0]
 8005bd8:	4650      	mov	r0, sl
 8005bda:	f000 fa17 	bl	800600c <memchr>
 8005bde:	b138      	cbz	r0, 8005bf0 <_svfiprintf_r+0x150>
 8005be0:	eba0 000a 	sub.w	r0, r0, sl
 8005be4:	2240      	movs	r2, #64	@ 0x40
 8005be6:	9b04      	ldr	r3, [sp, #16]
 8005be8:	3401      	adds	r4, #1
 8005bea:	4082      	lsls	r2, r0
 8005bec:	4313      	orrs	r3, r2
 8005bee:	9304      	str	r3, [sp, #16]
 8005bf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bf4:	2206      	movs	r2, #6
 8005bf6:	4824      	ldr	r0, [pc, #144]	@ (8005c88 <_svfiprintf_r+0x1e8>)
 8005bf8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005bfc:	f000 fa06 	bl	800600c <memchr>
 8005c00:	2800      	cmp	r0, #0
 8005c02:	d036      	beq.n	8005c72 <_svfiprintf_r+0x1d2>
 8005c04:	4b21      	ldr	r3, [pc, #132]	@ (8005c8c <_svfiprintf_r+0x1ec>)
 8005c06:	bb1b      	cbnz	r3, 8005c50 <_svfiprintf_r+0x1b0>
 8005c08:	9b03      	ldr	r3, [sp, #12]
 8005c0a:	3307      	adds	r3, #7
 8005c0c:	f023 0307 	bic.w	r3, r3, #7
 8005c10:	3308      	adds	r3, #8
 8005c12:	9303      	str	r3, [sp, #12]
 8005c14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c16:	4433      	add	r3, r6
 8005c18:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c1a:	e76a      	b.n	8005af2 <_svfiprintf_r+0x52>
 8005c1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c20:	460c      	mov	r4, r1
 8005c22:	2001      	movs	r0, #1
 8005c24:	e7a8      	b.n	8005b78 <_svfiprintf_r+0xd8>
 8005c26:	2300      	movs	r3, #0
 8005c28:	3401      	adds	r4, #1
 8005c2a:	f04f 0c0a 	mov.w	ip, #10
 8005c2e:	4619      	mov	r1, r3
 8005c30:	9305      	str	r3, [sp, #20]
 8005c32:	4620      	mov	r0, r4
 8005c34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c38:	3a30      	subs	r2, #48	@ 0x30
 8005c3a:	2a09      	cmp	r2, #9
 8005c3c:	d903      	bls.n	8005c46 <_svfiprintf_r+0x1a6>
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d0c6      	beq.n	8005bd0 <_svfiprintf_r+0x130>
 8005c42:	9105      	str	r1, [sp, #20]
 8005c44:	e7c4      	b.n	8005bd0 <_svfiprintf_r+0x130>
 8005c46:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c4a:	4604      	mov	r4, r0
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e7f0      	b.n	8005c32 <_svfiprintf_r+0x192>
 8005c50:	ab03      	add	r3, sp, #12
 8005c52:	462a      	mov	r2, r5
 8005c54:	a904      	add	r1, sp, #16
 8005c56:	4638      	mov	r0, r7
 8005c58:	9300      	str	r3, [sp, #0]
 8005c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8005c90 <_svfiprintf_r+0x1f0>)
 8005c5c:	f3af 8000 	nop.w
 8005c60:	1c42      	adds	r2, r0, #1
 8005c62:	4606      	mov	r6, r0
 8005c64:	d1d6      	bne.n	8005c14 <_svfiprintf_r+0x174>
 8005c66:	89ab      	ldrh	r3, [r5, #12]
 8005c68:	065b      	lsls	r3, r3, #25
 8005c6a:	f53f af2d 	bmi.w	8005ac8 <_svfiprintf_r+0x28>
 8005c6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005c70:	e72c      	b.n	8005acc <_svfiprintf_r+0x2c>
 8005c72:	ab03      	add	r3, sp, #12
 8005c74:	462a      	mov	r2, r5
 8005c76:	a904      	add	r1, sp, #16
 8005c78:	4638      	mov	r0, r7
 8005c7a:	9300      	str	r3, [sp, #0]
 8005c7c:	4b04      	ldr	r3, [pc, #16]	@ (8005c90 <_svfiprintf_r+0x1f0>)
 8005c7e:	f000 f87d 	bl	8005d7c <_printf_i>
 8005c82:	e7ed      	b.n	8005c60 <_svfiprintf_r+0x1c0>
 8005c84:	08006138 	.word	0x08006138
 8005c88:	08006142 	.word	0x08006142
 8005c8c:	00000000 	.word	0x00000000
 8005c90:	080059e9 	.word	0x080059e9
 8005c94:	0800613e 	.word	0x0800613e

08005c98 <_printf_common>:
 8005c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c9c:	4616      	mov	r6, r2
 8005c9e:	4698      	mov	r8, r3
 8005ca0:	688a      	ldr	r2, [r1, #8]
 8005ca2:	4607      	mov	r7, r0
 8005ca4:	690b      	ldr	r3, [r1, #16]
 8005ca6:	460c      	mov	r4, r1
 8005ca8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005cac:	4293      	cmp	r3, r2
 8005cae:	bfb8      	it	lt
 8005cb0:	4613      	movlt	r3, r2
 8005cb2:	6033      	str	r3, [r6, #0]
 8005cb4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005cb8:	b10a      	cbz	r2, 8005cbe <_printf_common+0x26>
 8005cba:	3301      	adds	r3, #1
 8005cbc:	6033      	str	r3, [r6, #0]
 8005cbe:	6823      	ldr	r3, [r4, #0]
 8005cc0:	0699      	lsls	r1, r3, #26
 8005cc2:	bf42      	ittt	mi
 8005cc4:	6833      	ldrmi	r3, [r6, #0]
 8005cc6:	3302      	addmi	r3, #2
 8005cc8:	6033      	strmi	r3, [r6, #0]
 8005cca:	6825      	ldr	r5, [r4, #0]
 8005ccc:	f015 0506 	ands.w	r5, r5, #6
 8005cd0:	d106      	bne.n	8005ce0 <_printf_common+0x48>
 8005cd2:	f104 0a19 	add.w	sl, r4, #25
 8005cd6:	68e3      	ldr	r3, [r4, #12]
 8005cd8:	6832      	ldr	r2, [r6, #0]
 8005cda:	1a9b      	subs	r3, r3, r2
 8005cdc:	42ab      	cmp	r3, r5
 8005cde:	dc2b      	bgt.n	8005d38 <_printf_common+0xa0>
 8005ce0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005ce4:	6822      	ldr	r2, [r4, #0]
 8005ce6:	3b00      	subs	r3, #0
 8005ce8:	bf18      	it	ne
 8005cea:	2301      	movne	r3, #1
 8005cec:	0692      	lsls	r2, r2, #26
 8005cee:	d430      	bmi.n	8005d52 <_printf_common+0xba>
 8005cf0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005cf4:	4641      	mov	r1, r8
 8005cf6:	4638      	mov	r0, r7
 8005cf8:	47c8      	blx	r9
 8005cfa:	3001      	adds	r0, #1
 8005cfc:	d023      	beq.n	8005d46 <_printf_common+0xae>
 8005cfe:	6823      	ldr	r3, [r4, #0]
 8005d00:	341a      	adds	r4, #26
 8005d02:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8005d06:	f003 0306 	and.w	r3, r3, #6
 8005d0a:	2b04      	cmp	r3, #4
 8005d0c:	bf0a      	itet	eq
 8005d0e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8005d12:	2500      	movne	r5, #0
 8005d14:	6833      	ldreq	r3, [r6, #0]
 8005d16:	f04f 0600 	mov.w	r6, #0
 8005d1a:	bf08      	it	eq
 8005d1c:	1aed      	subeq	r5, r5, r3
 8005d1e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005d22:	bf08      	it	eq
 8005d24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	bfc4      	itt	gt
 8005d2c:	1a9b      	subgt	r3, r3, r2
 8005d2e:	18ed      	addgt	r5, r5, r3
 8005d30:	42b5      	cmp	r5, r6
 8005d32:	d11a      	bne.n	8005d6a <_printf_common+0xd2>
 8005d34:	2000      	movs	r0, #0
 8005d36:	e008      	b.n	8005d4a <_printf_common+0xb2>
 8005d38:	2301      	movs	r3, #1
 8005d3a:	4652      	mov	r2, sl
 8005d3c:	4641      	mov	r1, r8
 8005d3e:	4638      	mov	r0, r7
 8005d40:	47c8      	blx	r9
 8005d42:	3001      	adds	r0, #1
 8005d44:	d103      	bne.n	8005d4e <_printf_common+0xb6>
 8005d46:	f04f 30ff 	mov.w	r0, #4294967295
 8005d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d4e:	3501      	adds	r5, #1
 8005d50:	e7c1      	b.n	8005cd6 <_printf_common+0x3e>
 8005d52:	18e1      	adds	r1, r4, r3
 8005d54:	1c5a      	adds	r2, r3, #1
 8005d56:	2030      	movs	r0, #48	@ 0x30
 8005d58:	3302      	adds	r3, #2
 8005d5a:	4422      	add	r2, r4
 8005d5c:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005d64:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005d68:	e7c2      	b.n	8005cf0 <_printf_common+0x58>
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	4622      	mov	r2, r4
 8005d6e:	4641      	mov	r1, r8
 8005d70:	4638      	mov	r0, r7
 8005d72:	47c8      	blx	r9
 8005d74:	3001      	adds	r0, #1
 8005d76:	d0e6      	beq.n	8005d46 <_printf_common+0xae>
 8005d78:	3601      	adds	r6, #1
 8005d7a:	e7d9      	b.n	8005d30 <_printf_common+0x98>

08005d7c <_printf_i>:
 8005d7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d80:	7e0f      	ldrb	r7, [r1, #24]
 8005d82:	4691      	mov	r9, r2
 8005d84:	4680      	mov	r8, r0
 8005d86:	460c      	mov	r4, r1
 8005d88:	2f78      	cmp	r7, #120	@ 0x78
 8005d8a:	469a      	mov	sl, r3
 8005d8c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005d8e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005d92:	d807      	bhi.n	8005da4 <_printf_i+0x28>
 8005d94:	2f62      	cmp	r7, #98	@ 0x62
 8005d96:	d80a      	bhi.n	8005dae <_printf_i+0x32>
 8005d98:	2f00      	cmp	r7, #0
 8005d9a:	f000 80d1 	beq.w	8005f40 <_printf_i+0x1c4>
 8005d9e:	2f58      	cmp	r7, #88	@ 0x58
 8005da0:	f000 80b8 	beq.w	8005f14 <_printf_i+0x198>
 8005da4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005da8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005dac:	e03a      	b.n	8005e24 <_printf_i+0xa8>
 8005dae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005db2:	2b15      	cmp	r3, #21
 8005db4:	d8f6      	bhi.n	8005da4 <_printf_i+0x28>
 8005db6:	a101      	add	r1, pc, #4	@ (adr r1, 8005dbc <_printf_i+0x40>)
 8005db8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005dbc:	08005e15 	.word	0x08005e15
 8005dc0:	08005e29 	.word	0x08005e29
 8005dc4:	08005da5 	.word	0x08005da5
 8005dc8:	08005da5 	.word	0x08005da5
 8005dcc:	08005da5 	.word	0x08005da5
 8005dd0:	08005da5 	.word	0x08005da5
 8005dd4:	08005e29 	.word	0x08005e29
 8005dd8:	08005da5 	.word	0x08005da5
 8005ddc:	08005da5 	.word	0x08005da5
 8005de0:	08005da5 	.word	0x08005da5
 8005de4:	08005da5 	.word	0x08005da5
 8005de8:	08005f27 	.word	0x08005f27
 8005dec:	08005e53 	.word	0x08005e53
 8005df0:	08005ee1 	.word	0x08005ee1
 8005df4:	08005da5 	.word	0x08005da5
 8005df8:	08005da5 	.word	0x08005da5
 8005dfc:	08005f49 	.word	0x08005f49
 8005e00:	08005da5 	.word	0x08005da5
 8005e04:	08005e53 	.word	0x08005e53
 8005e08:	08005da5 	.word	0x08005da5
 8005e0c:	08005da5 	.word	0x08005da5
 8005e10:	08005ee9 	.word	0x08005ee9
 8005e14:	6833      	ldr	r3, [r6, #0]
 8005e16:	1d1a      	adds	r2, r3, #4
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	6032      	str	r2, [r6, #0]
 8005e1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e20:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005e24:	2301      	movs	r3, #1
 8005e26:	e09c      	b.n	8005f62 <_printf_i+0x1e6>
 8005e28:	6833      	ldr	r3, [r6, #0]
 8005e2a:	6820      	ldr	r0, [r4, #0]
 8005e2c:	1d19      	adds	r1, r3, #4
 8005e2e:	6031      	str	r1, [r6, #0]
 8005e30:	0606      	lsls	r6, r0, #24
 8005e32:	d501      	bpl.n	8005e38 <_printf_i+0xbc>
 8005e34:	681d      	ldr	r5, [r3, #0]
 8005e36:	e003      	b.n	8005e40 <_printf_i+0xc4>
 8005e38:	0645      	lsls	r5, r0, #25
 8005e3a:	d5fb      	bpl.n	8005e34 <_printf_i+0xb8>
 8005e3c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005e40:	2d00      	cmp	r5, #0
 8005e42:	da03      	bge.n	8005e4c <_printf_i+0xd0>
 8005e44:	232d      	movs	r3, #45	@ 0x2d
 8005e46:	426d      	negs	r5, r5
 8005e48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e4c:	4858      	ldr	r0, [pc, #352]	@ (8005fb0 <_printf_i+0x234>)
 8005e4e:	230a      	movs	r3, #10
 8005e50:	e011      	b.n	8005e76 <_printf_i+0xfa>
 8005e52:	6821      	ldr	r1, [r4, #0]
 8005e54:	6833      	ldr	r3, [r6, #0]
 8005e56:	0608      	lsls	r0, r1, #24
 8005e58:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e5c:	d402      	bmi.n	8005e64 <_printf_i+0xe8>
 8005e5e:	0649      	lsls	r1, r1, #25
 8005e60:	bf48      	it	mi
 8005e62:	b2ad      	uxthmi	r5, r5
 8005e64:	2f6f      	cmp	r7, #111	@ 0x6f
 8005e66:	6033      	str	r3, [r6, #0]
 8005e68:	4851      	ldr	r0, [pc, #324]	@ (8005fb0 <_printf_i+0x234>)
 8005e6a:	bf14      	ite	ne
 8005e6c:	230a      	movne	r3, #10
 8005e6e:	2308      	moveq	r3, #8
 8005e70:	2100      	movs	r1, #0
 8005e72:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005e76:	6866      	ldr	r6, [r4, #4]
 8005e78:	2e00      	cmp	r6, #0
 8005e7a:	60a6      	str	r6, [r4, #8]
 8005e7c:	db05      	blt.n	8005e8a <_printf_i+0x10e>
 8005e7e:	6821      	ldr	r1, [r4, #0]
 8005e80:	432e      	orrs	r6, r5
 8005e82:	f021 0104 	bic.w	r1, r1, #4
 8005e86:	6021      	str	r1, [r4, #0]
 8005e88:	d04b      	beq.n	8005f22 <_printf_i+0x1a6>
 8005e8a:	4616      	mov	r6, r2
 8005e8c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e90:	fb03 5711 	mls	r7, r3, r1, r5
 8005e94:	5dc7      	ldrb	r7, [r0, r7]
 8005e96:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e9a:	462f      	mov	r7, r5
 8005e9c:	460d      	mov	r5, r1
 8005e9e:	42bb      	cmp	r3, r7
 8005ea0:	d9f4      	bls.n	8005e8c <_printf_i+0x110>
 8005ea2:	2b08      	cmp	r3, #8
 8005ea4:	d10b      	bne.n	8005ebe <_printf_i+0x142>
 8005ea6:	6823      	ldr	r3, [r4, #0]
 8005ea8:	07df      	lsls	r7, r3, #31
 8005eaa:	d508      	bpl.n	8005ebe <_printf_i+0x142>
 8005eac:	6923      	ldr	r3, [r4, #16]
 8005eae:	6861      	ldr	r1, [r4, #4]
 8005eb0:	4299      	cmp	r1, r3
 8005eb2:	bfde      	ittt	le
 8005eb4:	2330      	movle	r3, #48	@ 0x30
 8005eb6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005eba:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005ebe:	1b92      	subs	r2, r2, r6
 8005ec0:	6122      	str	r2, [r4, #16]
 8005ec2:	464b      	mov	r3, r9
 8005ec4:	aa03      	add	r2, sp, #12
 8005ec6:	4621      	mov	r1, r4
 8005ec8:	4640      	mov	r0, r8
 8005eca:	f8cd a000 	str.w	sl, [sp]
 8005ece:	f7ff fee3 	bl	8005c98 <_printf_common>
 8005ed2:	3001      	adds	r0, #1
 8005ed4:	d14a      	bne.n	8005f6c <_printf_i+0x1f0>
 8005ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8005eda:	b004      	add	sp, #16
 8005edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ee0:	6823      	ldr	r3, [r4, #0]
 8005ee2:	f043 0320 	orr.w	r3, r3, #32
 8005ee6:	6023      	str	r3, [r4, #0]
 8005ee8:	2778      	movs	r7, #120	@ 0x78
 8005eea:	4832      	ldr	r0, [pc, #200]	@ (8005fb4 <_printf_i+0x238>)
 8005eec:	6823      	ldr	r3, [r4, #0]
 8005eee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005ef2:	061f      	lsls	r7, r3, #24
 8005ef4:	6831      	ldr	r1, [r6, #0]
 8005ef6:	f851 5b04 	ldr.w	r5, [r1], #4
 8005efa:	d402      	bmi.n	8005f02 <_printf_i+0x186>
 8005efc:	065f      	lsls	r7, r3, #25
 8005efe:	bf48      	it	mi
 8005f00:	b2ad      	uxthmi	r5, r5
 8005f02:	6031      	str	r1, [r6, #0]
 8005f04:	07d9      	lsls	r1, r3, #31
 8005f06:	bf44      	itt	mi
 8005f08:	f043 0320 	orrmi.w	r3, r3, #32
 8005f0c:	6023      	strmi	r3, [r4, #0]
 8005f0e:	b11d      	cbz	r5, 8005f18 <_printf_i+0x19c>
 8005f10:	2310      	movs	r3, #16
 8005f12:	e7ad      	b.n	8005e70 <_printf_i+0xf4>
 8005f14:	4826      	ldr	r0, [pc, #152]	@ (8005fb0 <_printf_i+0x234>)
 8005f16:	e7e9      	b.n	8005eec <_printf_i+0x170>
 8005f18:	6823      	ldr	r3, [r4, #0]
 8005f1a:	f023 0320 	bic.w	r3, r3, #32
 8005f1e:	6023      	str	r3, [r4, #0]
 8005f20:	e7f6      	b.n	8005f10 <_printf_i+0x194>
 8005f22:	4616      	mov	r6, r2
 8005f24:	e7bd      	b.n	8005ea2 <_printf_i+0x126>
 8005f26:	6833      	ldr	r3, [r6, #0]
 8005f28:	6825      	ldr	r5, [r4, #0]
 8005f2a:	1d18      	adds	r0, r3, #4
 8005f2c:	6961      	ldr	r1, [r4, #20]
 8005f2e:	6030      	str	r0, [r6, #0]
 8005f30:	062e      	lsls	r6, r5, #24
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	d501      	bpl.n	8005f3a <_printf_i+0x1be>
 8005f36:	6019      	str	r1, [r3, #0]
 8005f38:	e002      	b.n	8005f40 <_printf_i+0x1c4>
 8005f3a:	0668      	lsls	r0, r5, #25
 8005f3c:	d5fb      	bpl.n	8005f36 <_printf_i+0x1ba>
 8005f3e:	8019      	strh	r1, [r3, #0]
 8005f40:	2300      	movs	r3, #0
 8005f42:	4616      	mov	r6, r2
 8005f44:	6123      	str	r3, [r4, #16]
 8005f46:	e7bc      	b.n	8005ec2 <_printf_i+0x146>
 8005f48:	6833      	ldr	r3, [r6, #0]
 8005f4a:	2100      	movs	r1, #0
 8005f4c:	1d1a      	adds	r2, r3, #4
 8005f4e:	6032      	str	r2, [r6, #0]
 8005f50:	681e      	ldr	r6, [r3, #0]
 8005f52:	6862      	ldr	r2, [r4, #4]
 8005f54:	4630      	mov	r0, r6
 8005f56:	f000 f859 	bl	800600c <memchr>
 8005f5a:	b108      	cbz	r0, 8005f60 <_printf_i+0x1e4>
 8005f5c:	1b80      	subs	r0, r0, r6
 8005f5e:	6060      	str	r0, [r4, #4]
 8005f60:	6863      	ldr	r3, [r4, #4]
 8005f62:	6123      	str	r3, [r4, #16]
 8005f64:	2300      	movs	r3, #0
 8005f66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f6a:	e7aa      	b.n	8005ec2 <_printf_i+0x146>
 8005f6c:	6923      	ldr	r3, [r4, #16]
 8005f6e:	4632      	mov	r2, r6
 8005f70:	4649      	mov	r1, r9
 8005f72:	4640      	mov	r0, r8
 8005f74:	47d0      	blx	sl
 8005f76:	3001      	adds	r0, #1
 8005f78:	d0ad      	beq.n	8005ed6 <_printf_i+0x15a>
 8005f7a:	6823      	ldr	r3, [r4, #0]
 8005f7c:	079b      	lsls	r3, r3, #30
 8005f7e:	d413      	bmi.n	8005fa8 <_printf_i+0x22c>
 8005f80:	68e0      	ldr	r0, [r4, #12]
 8005f82:	9b03      	ldr	r3, [sp, #12]
 8005f84:	4298      	cmp	r0, r3
 8005f86:	bfb8      	it	lt
 8005f88:	4618      	movlt	r0, r3
 8005f8a:	e7a6      	b.n	8005eda <_printf_i+0x15e>
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	4632      	mov	r2, r6
 8005f90:	4649      	mov	r1, r9
 8005f92:	4640      	mov	r0, r8
 8005f94:	47d0      	blx	sl
 8005f96:	3001      	adds	r0, #1
 8005f98:	d09d      	beq.n	8005ed6 <_printf_i+0x15a>
 8005f9a:	3501      	adds	r5, #1
 8005f9c:	68e3      	ldr	r3, [r4, #12]
 8005f9e:	9903      	ldr	r1, [sp, #12]
 8005fa0:	1a5b      	subs	r3, r3, r1
 8005fa2:	42ab      	cmp	r3, r5
 8005fa4:	dcf2      	bgt.n	8005f8c <_printf_i+0x210>
 8005fa6:	e7eb      	b.n	8005f80 <_printf_i+0x204>
 8005fa8:	2500      	movs	r5, #0
 8005faa:	f104 0619 	add.w	r6, r4, #25
 8005fae:	e7f5      	b.n	8005f9c <_printf_i+0x220>
 8005fb0:	08006149 	.word	0x08006149
 8005fb4:	0800615a 	.word	0x0800615a

08005fb8 <memmove>:
 8005fb8:	4288      	cmp	r0, r1
 8005fba:	b510      	push	{r4, lr}
 8005fbc:	eb01 0402 	add.w	r4, r1, r2
 8005fc0:	d902      	bls.n	8005fc8 <memmove+0x10>
 8005fc2:	4284      	cmp	r4, r0
 8005fc4:	4623      	mov	r3, r4
 8005fc6:	d807      	bhi.n	8005fd8 <memmove+0x20>
 8005fc8:	1e43      	subs	r3, r0, #1
 8005fca:	42a1      	cmp	r1, r4
 8005fcc:	d008      	beq.n	8005fe0 <memmove+0x28>
 8005fce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005fd2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005fd6:	e7f8      	b.n	8005fca <memmove+0x12>
 8005fd8:	4402      	add	r2, r0
 8005fda:	4601      	mov	r1, r0
 8005fdc:	428a      	cmp	r2, r1
 8005fde:	d100      	bne.n	8005fe2 <memmove+0x2a>
 8005fe0:	bd10      	pop	{r4, pc}
 8005fe2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005fe6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005fea:	e7f7      	b.n	8005fdc <memmove+0x24>

08005fec <_sbrk_r>:
 8005fec:	b538      	push	{r3, r4, r5, lr}
 8005fee:	2300      	movs	r3, #0
 8005ff0:	4d05      	ldr	r5, [pc, #20]	@ (8006008 <_sbrk_r+0x1c>)
 8005ff2:	4604      	mov	r4, r0
 8005ff4:	4608      	mov	r0, r1
 8005ff6:	602b      	str	r3, [r5, #0]
 8005ff8:	f7fa fde6 	bl	8000bc8 <_sbrk>
 8005ffc:	1c43      	adds	r3, r0, #1
 8005ffe:	d102      	bne.n	8006006 <_sbrk_r+0x1a>
 8006000:	682b      	ldr	r3, [r5, #0]
 8006002:	b103      	cbz	r3, 8006006 <_sbrk_r+0x1a>
 8006004:	6023      	str	r3, [r4, #0]
 8006006:	bd38      	pop	{r3, r4, r5, pc}
 8006008:	200002a0 	.word	0x200002a0

0800600c <memchr>:
 800600c:	b2c9      	uxtb	r1, r1
 800600e:	4603      	mov	r3, r0
 8006010:	4402      	add	r2, r0
 8006012:	b510      	push	{r4, lr}
 8006014:	4293      	cmp	r3, r2
 8006016:	4618      	mov	r0, r3
 8006018:	d101      	bne.n	800601e <memchr+0x12>
 800601a:	2000      	movs	r0, #0
 800601c:	e003      	b.n	8006026 <memchr+0x1a>
 800601e:	7804      	ldrb	r4, [r0, #0]
 8006020:	3301      	adds	r3, #1
 8006022:	428c      	cmp	r4, r1
 8006024:	d1f6      	bne.n	8006014 <memchr+0x8>
 8006026:	bd10      	pop	{r4, pc}

08006028 <memcpy>:
 8006028:	440a      	add	r2, r1
 800602a:	1e43      	subs	r3, r0, #1
 800602c:	4291      	cmp	r1, r2
 800602e:	d100      	bne.n	8006032 <memcpy+0xa>
 8006030:	4770      	bx	lr
 8006032:	b510      	push	{r4, lr}
 8006034:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006038:	4291      	cmp	r1, r2
 800603a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800603e:	d1f9      	bne.n	8006034 <memcpy+0xc>
 8006040:	bd10      	pop	{r4, pc}

08006042 <_realloc_r>:
 8006042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006046:	4607      	mov	r7, r0
 8006048:	4614      	mov	r4, r2
 800604a:	460d      	mov	r5, r1
 800604c:	b921      	cbnz	r1, 8006058 <_realloc_r+0x16>
 800604e:	4611      	mov	r1, r2
 8006050:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006054:	f7ff bc3c 	b.w	80058d0 <_malloc_r>
 8006058:	b92a      	cbnz	r2, 8006066 <_realloc_r+0x24>
 800605a:	4625      	mov	r5, r4
 800605c:	f7ff fbcc 	bl	80057f8 <_free_r>
 8006060:	4628      	mov	r0, r5
 8006062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006066:	f000 f81a 	bl	800609e <_malloc_usable_size_r>
 800606a:	4284      	cmp	r4, r0
 800606c:	4606      	mov	r6, r0
 800606e:	d802      	bhi.n	8006076 <_realloc_r+0x34>
 8006070:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006074:	d8f4      	bhi.n	8006060 <_realloc_r+0x1e>
 8006076:	4621      	mov	r1, r4
 8006078:	4638      	mov	r0, r7
 800607a:	f7ff fc29 	bl	80058d0 <_malloc_r>
 800607e:	4680      	mov	r8, r0
 8006080:	b908      	cbnz	r0, 8006086 <_realloc_r+0x44>
 8006082:	4645      	mov	r5, r8
 8006084:	e7ec      	b.n	8006060 <_realloc_r+0x1e>
 8006086:	42b4      	cmp	r4, r6
 8006088:	4622      	mov	r2, r4
 800608a:	4629      	mov	r1, r5
 800608c:	bf28      	it	cs
 800608e:	4632      	movcs	r2, r6
 8006090:	f7ff ffca 	bl	8006028 <memcpy>
 8006094:	4629      	mov	r1, r5
 8006096:	4638      	mov	r0, r7
 8006098:	f7ff fbae 	bl	80057f8 <_free_r>
 800609c:	e7f1      	b.n	8006082 <_realloc_r+0x40>

0800609e <_malloc_usable_size_r>:
 800609e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060a2:	1f18      	subs	r0, r3, #4
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	bfbc      	itt	lt
 80060a8:	580b      	ldrlt	r3, [r1, r0]
 80060aa:	18c0      	addlt	r0, r0, r3
 80060ac:	4770      	bx	lr
	...

080060b0 <_init>:
 80060b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060b2:	bf00      	nop
 80060b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060b6:	bc08      	pop	{r3}
 80060b8:	469e      	mov	lr, r3
 80060ba:	4770      	bx	lr

080060bc <_fini>:
 80060bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060be:	bf00      	nop
 80060c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060c2:	bc08      	pop	{r3}
 80060c4:	469e      	mov	lr, r3
 80060c6:	4770      	bx	lr
